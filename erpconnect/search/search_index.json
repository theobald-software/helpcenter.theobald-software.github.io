{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Welcome to ERPConnect!","text":"<p>ERPConnect is a .NET programming library to develop your own SAP interfaces. Learn how to use ERPConnect by browsing our documentation, API reference, sample codes and more.</p> <ul> <li> <p>ERPConnect:</p> <p> Product Information  Download Trial Version  Download ERPConnect  Changelog</p> </li> <li> <p>Ressources:</p> <p> How to get started  Documentation  Code Samples  API Reference</p> </li> <li> <p>Troubleshooting:</p> <p> FAQs  Common Errors  Contact Support</p> </li> <li> <p>General:</p> <p> Theobald Software  Newsletters  Short Survey  Feedback Form</p> </li> </ul>"},{"location":"#whats-new","title":"What's New?","text":"<ul> <li> <p> R3Connection API updated</p> <p>Breaking Changes:  Obsolete APIs in the R3Connection class have been removed, see Release Notes.</p> <p> 2023-12-18</p> </li> <li> <p>RFC Connection via WebSocket added</p> <p>Connect to a single application server or public or private cloud instance via RFC over WebSocket, see SAP Connection.</p> <p> 2023-12-07</p> </li> <li> <p>Support for SNC SSO with NWRFC added</p> <p><code>R3Connection.GetSSOTicket()</code> now supports Secure Network Connection with NetWeaver RFC, see SAP Connection: SSO with SNC.</p> <p> 2023-04-05</p> </li> </ul>"},{"location":"#faqs","title":"FAQs","text":"How do I determine if my SAP connection is valid? <p>Use the <code>ping()</code> method of the ERPConnect.R3Connection object. It does not raise exceptions, it only returns true or false depending on if the connection is active and usable.</p> What do I do when I get the exception <code>System.BadImageFormatException</code>? <p>If you use a 64-Bit system, you have to copy a 64-Bit version of the librfc32.dll in your <code>Windows\\System32</code> folder.  The 32-Bit version of the librfc32.dll has to be copied in the <code>Windows\\SysWow64</code> folder.</p> How can I establish an SNC (Secure Network Connection) to SAP? <p>Use the SNC functionality and commit all logon parameters in a single connection string.  You can use the constructor or the connection string property of the R3Connection object to set the connection string. Example: <pre><code>string ConnStr = \u201cashost=myapphost client=000 snc_mode=1 sysnr=00 type=3 user=SAPDOTNET snc_partnername=\"p:SAPServiceCS2@nt5.sap-ag.de\";\n</code></pre> For more information, see About SNC in ERPConnect.</p> Which ports are used by SAP to establish the connection? <p>If an SAP-Router is used, the ports are 3299 and 3399. If not, the ports are 32XX and 33XX. XX is usually the System number, e.g., 00, or 05.</p> Can I use a password with blanks inside? <p>You can use blank characters in your password, if you quote the password using double quotes. Example: <pre><code>R3Connection con = new ERPConnect.R3Connection(\"ptmalg\", 05, \"User\", \"\\\"My Password\\\"\", \"EN\", \"800\");\n</code></pre></p> Why do some tables cause an error in the ASSIGN statement in the program SAPLSDTX? <p>This error is caused by a bug in one of the SAP\u2019s own function modules.  The tables that cause the bug contain at least one column of type F (floating point).  There are two ways to avoid this error: <li> Create a view in SAP over the table that causes the error. Leave out all columns of type F and use the <code>ReadTable</code> class to run the view instead of the table.</li> <li> Install the function module Z_XTRACT_IS_TABLE into your system.  Then call the method <code>ReadTable.SetCustomFunctionModule(\u201cZ_XTRACT_IS_TABLE\u201d)</code> before running the extraction. </li></p> What do I do when I get the exception <code>DATA_BUFFER_EXCEEDED</code>? <p>This error is caused by a bug in one of the SAP\u2019s own function modules.  The tables that cause the bug contain at least one column of type F (floating point).  There are two ways to avoid this error: <li> Create a view in SAP over the table that causes the error. Leave out all columns of type F and use the <code>ReadTable</code> class to run the view instead of the table.</li> <li> Install the function module Z_XTRACT_IS_TABLE into your system.  Then call the method <code>ReadTable.SetCustomFunctionModule(\u201cZ_XTRACT_IS_TABLE\u201d)</code> before running the extraction. </li></p> How can I fix the error <code>Entry too long (please enter in the format --____)</code> when using date parameters? <p>Use the technical format YYYYMMDD, e.g., 20240711 for date values. Date formats such as \"11-07-2024\" are not accepted.</p>"},{"location":"quick-start/","title":"Quick Start","text":"<ul> <li> This section shows how to install and set up ERPConnect for the first time.</li> </ul>"},{"location":"quick-start/#installation","title":"Installation","text":"<ol> <li>Download a 30 days trial version of ERPConnect.</li> <li>Run the ERPConnect executable to install ERPConnect. For information on system requirements, see Requirements.</li> <li>Download one of the following SAP libraries from the SAP Marketplace download area: <ul> <li>Classic RFC library</li> <li>Netweaver RFC library</li> </ul> </li> <li>When using a 64-bit system, copy the 64-bit version of the library to the <code>\\System32</code> folder. When using a 32-bit system, copy the 32-Bit Version of librfc32.dll to the <code>\\SysWoW64</code> folder.</li> <li>Add the ERPConnect.dll class library as a reference to your project.  The library is located in the ERPConnect installation directory, e.g., <code>C:\\Program Files\\ERPConnect</code>.</li> </ol> <p>For more information, see Installation.</p>"},{"location":"quick-start/#connect-to-sap","title":"Connect to SAP","text":"<ol> <li> <p>Create an <code>R3Connection</code> object and define all input parameters. Make sure to use an SAP dialog user with sufficient SAP authorization, see Authorization Objects - SAP User Rights</p> Single Server loginLoad BalancingRFC via WebSocket <pre><code>using (R3Connection con = new R3Connection())\n{\n    con.UserName = \"SAPUser\";\n    con.Password = \"SAPPassword\";\n    con.Language = \"EN\";\n    con.Client = \"800\";\n    con.Host = \"sap-erp-as05.example.com\";\n    con.SystemNumber = 00;\n    con.Protocol = ClientProtocol.NWRFC; //use ClientProtocol.RFC for classic RFC library\n\n    con.Open();\n}\n</code></pre> <pre><code>using (R3Connection con = new R3Connection())\n{\n    con.UserName = \"SAPUser\";\n    con.Password = \"SAPPassword\";\n    con.Language = \"DE\";\n    con.Client = \"800\";\n    con.MessageServer = \"sap-erp-as05.example.com\";\n    con.LogonGroup = \"PUBLIC\";\n    con.SID = \"ECC\";\n    con.Protocol = ClientProtocol.NWRFC; //use ClientProtocol.RFC for classic RFC library\n    con.UsesLoadBalancing = true;\n\n    con.Open();\n}\n</code></pre> <pre><code>using (R3Connection con = new R3Connection())\n{\n    con.UsesWebSocket = true;\n    con.WebSocketHost = \"myinstance-api.s4hana.cloud.sap\";\n    con.WebSocketPort = 443;\n    con.TlsSettings = new TlsSettings\n    {\n        TrustAll = false,\n        CryptoLibrary = @\"C:\\lib\\sapcrypto.dll\",\n        ClientPse = \"CLIENT.PSE\"\n    };\n\n    con.AliasUser = \"TESTUSER\",\n    con.Password = \"Password\",\n\n    con.Open();\n}\n</code></pre> </li> <li> <p>Establish the connection using <code>Open()</code>.</p> </li> <li>Run the program to test the SAP connection.</li> </ol> <p>Note</p> <p>After the 30 days trial is expired, the license number must be set before connecting to SAP: <pre><code>ERPConnect.LIC.SetLic(\"XXXXXXXXXX\");\n</code></pre></p> <p>For more information, see Connect to SAP.</p>"},{"location":"quick-start/#next-steps","title":"Next Steps","text":"<p>ERPConnect offers the following features for reading and writing data from and to SAP:</p> Functionality / SAP Objects Description ABAP Code Generate and execute ABAP code on-the-fly. BAPIs and Function Modules Access BAPIs and RFC function modules to read and write data from and to SAP. BW Cube and BEx Queries Extract data from SAP BW InfoCubes and BEx Queries. IDocs Send and receive SAP IDocs. Queries Extract SAP queries (not BEx queries). RFC Server Functions Create, register and use RFC server functions. Tables Read SAP Tables directly via RFC. Transactions Execute SAP transactions via batch input."},{"location":"samples/","title":"Samples","text":"<ul> <li> This section contains code samples and use cases for ERPConnect.</li> </ul>"},{"location":"samples/#sap-connection","title":"SAP Connection","text":"<ul> <li>Authorization Objects - SAP User Rights</li> <li>Check the Accessibility to an SAP System</li> <li>Implement a connection pool</li> <li>Login to SAP with an SSO Logon Ticket</li> <li>Use ERPConnect in PowerShell</li> </ul>"},{"location":"samples/#abap-code","title":"ABAP Code","text":"<ul> <li>Create an ABP Interpreter</li> </ul>"},{"location":"samples/#bapis-and-function-modules","title":"BAPIs and Function Modules","text":"<ul> <li>Change Batch Value of an Outbound Delivery</li> <li>Change Production Order</li> <li>Create Equipment</li> <li>Create Functional Location</li> <li>Create a Purchase Order</li> <li>Download Business Object Attachments</li> <li>Get Purchase Requisition Details</li> <li>Get a List of all SAP users</li> <li>Get an Equipment List</li> <li>Look up Purchase Orders</li> <li>Post Goods Movement</li> <li>Read Material BOM</li> <li>Read Personnel Data</li> <li>Read/Write Material Master Data</li> <li>Reset the Password of an SAP User</li> <li>Retrieve Stock Quantity</li> <li>Retrieve Texts from a Sales Order</li> <li>Retrieve the Quantity of a Purchase Order that has already been received</li> <li>Upload Documents to the BDS</li> <li>Use the ArchiveLink BAPI to send Barcodes to SAP</li> </ul>"},{"location":"samples/#bw-cubes-and-bw-queries","title":"BW Cubes and BW Queries","text":"<ul> <li>Fetch Data from a BW Query</li> </ul>"},{"location":"samples/#idocs","title":"IDocs","text":"<ul> <li>Receive an IDoc</li> <li>Resend IDocs which where set to CPICERR in SM58</li> <li>Send a MATMAS IDoc</li> <li>Send a STATUS IDoc</li> <li>Send an ORDER IDoc</li> </ul>"},{"location":"samples/#queries","title":"Queries","text":"<ul> <li>Fetch Data from an SAP Query</li> </ul>"},{"location":"samples/#rfc-server-functions","title":"RFC Server Functions","text":"<ul> <li>Calculate the length of the SAP type QUAN</li> <li>RFC Server Functions</li> <li>Transactional RFC Server</li> </ul>"},{"location":"samples/#tables","title":"Tables","text":"<ul> <li>Download Business Object Attachments</li> <li>Get CostCenter Hierarchies</li> <li>Read meta data of a table</li> <li>Read SAP Tables Directly</li> <li>Transfer data packets with ReadTable</li> <li>Use ERPConnect in PowerShell</li> </ul>"},{"location":"samples/#transactions","title":"Transactions","text":"<ul> <li>Access Stock Overview using Batch Input</li> <li>Create New Customers using Batch Input</li> <li>Create Purchase Orders using Batch Input and Background Processing</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<ul> <li> This section contains a list of troubleshooting articles.</li> </ul>"},{"location":"troubleshooting/#general","title":"General","text":"<ul> <li>Required Support Information for ERPConnect</li> <li>How to activate tracing in ERPConnect</li> <li>ERPConnect License Key</li> </ul>"},{"location":"troubleshooting/#sap","title":"SAP","text":"<ul> <li>Enabling Secure Network Communication (SNC) via X.509 certificate</li> <li>Registering RFC Server in SAP Releases in Kernel Release 720 and higher</li> <li>Authority Objects - SAP User Rights</li> <li>Authority Check Trace</li> <li>How to check the accessibility to a SAP System</li> </ul>"},{"location":"troubleshooting/#errors","title":"Errors","text":"<ul> <li>ERPConnect Exception - DATA_BUFFER_EXCEEDED</li> <li>Error when calling a Function Module or BAPI</li> </ul>"},{"location":"documentation/about/","title":"Disclaimer","text":""},{"location":"documentation/about/#about-the-documentation-content-of-theobald-software","title":"About the Documentation Content of Theobald Software","text":"<p>The documentation of Theobald Software is designed to introduce readers to the main functions of erpconnect.</p> <p>Theobald Software's claim is to keep the documentation up to date according to the latest product version.  Information concerning the older version is removed gradually from the documentation content.  It is generally recommended to always install the latest version of the product.</p> <p>Theobald Software's claim is to always update all the used screenshots of other software vendors, nevertheless this cannot be guaranteed. </p> <p>\u00a92024 Theobald Software GmbH. All rights reserved.</p>"},{"location":"documentation/about/#target-group-and-audience","title":"Target group and audience","text":"<p>This documentation is intended for all users of erpconnect.  The documentation offers an overview of the interface, of the navigation and of the basic information to the users who have never or rarely worked with the product.  Experienced users can find more detailed information on more complex topics and use the documentation for reference.</p> <p>Reading the \"QuickStart\" section is the prerequisite for working with the product.  The documentation can also be useful during the evaluation phase. </p>"},{"location":"documentation/about/#typographical-conventions","title":"Typographical conventions","text":"Convention Used for marking: Example bold &amp; square brackets Buttons [Edit] bold URL buttons Subscriptions bold Fields within a window, tab names Name italics Input values MATNR italics Drop-down menu options TextAndCode"},{"location":"documentation/about/#notes-and-warning-messages","title":"Notes and warning messages","text":"<p>There are three main types of warning messages with the corresponding colors.</p> Signal word Color Severity and meaning Note Blue Additional information Warning Yellow Information that is important for executing an error free procedure Tip Green Tips Recommendation Green Theobald Software recommendations and best practices advice <p>Example:</p> <p>Single Sign-On availability</p> <p>ABAP application server has to run on a Windows OS and SNC with Kerberos encryption setup on SAP.</p> <p>Note</p> <p>The corresponding SQL command is generated dynamically and executed on the SAP server.</p>"},{"location":"documentation/abap/","title":"ABAP Code Class","text":"<p>The following section contains information on how to use the ABAP code class. </p>"},{"location":"documentation/abap/#about-abap-code","title":"About ABAP Code","text":"<p>The ABAPCode class offers nearly unlimited possibilities.  You can execute ABAP code on the fly and retrieve the result in a string array.</p> <p>For more information about the ABAP programming language, see SAP Documentation: ABAP-Programming Language.</p>"},{"location":"documentation/abap/abap-code/","title":"ABAP Interpreter","text":"<p>The following section shows how to execute ABAP code and retrieve the result in a string array.</p>"},{"location":"documentation/abap/abap-code/#how-to-the-use-abap-code-class","title":"How to the Use ABAP Code Class","text":"<p>Follow the steps below to create an ABAP interpreter:</p> <ol> <li>Connect to the SAP system using <code>R3Connection</code>.</li> <li>Add a new line of code to the dynamic report using <code>AddCodeLine</code>.</li> <li>Execute the report using <code>Execute</code>.</li> <li>Read the result set (regarding the ABAP list) using <code>GetResultLine</code>.</li> </ol>"},{"location":"documentation/abap/abap-code/#create-an-abap-interpreter","title":"Create an ABAP Interpreter","text":"<p>The following sample shows how to create a simple ABAP interpreter that executes a dynamic SQL statement.</p> ABAP Interpreter<pre><code>using System;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\n// Open the connection to SAP\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nconst string code =\n    \"\"\"\n    REPORT ztestreport NO STANDARD PAGE HEADING.\n\n    TABLES kna1.\n\n    DATA c TYPE i.\n\n    SELECT COUNT(*) INTO c FROM kna1.\n\n    WRITE: /'System time ', sy-timlo.\n    WRITE: /'Number of rows in KNA1: ', c.\n    \"\"\";\n\nvar abapCode = new ABAPCode\n{\n    Connection = connection\n};\n\nstring[] lines = code.Split('\\n');\nforeach (string s in lines)\n{\n    abapCode.AddCodeLine(s.Trim());\n}\n\nif (abapCode.Execute())\n{\n    for (int i = 0; i &lt; abapCode.ResultLineCount; i++)\n    {\n        Console.WriteLine(abapCode.GetResultLine(i));\n    }\n}\nelse\n{\n    Console.WriteLine($\"ABAP Error: {abapCode.LastABAPSyntaxError}\");\n}\n</code></pre> <p>Output:</p> <pre><code>System time  11:17:46\nNumber of rows in KNA1:       7.705\n</code></pre> <p></p>"},{"location":"documentation/bapis-and-function-modules/","title":"BAPIs/Function Modules","text":"<p>Function modules are single functions managed by the SAP Function Builder (transaction SE37) and developed in SAP's programming language ABAP.</p> <p>Note</p> <p>A BAPI/Function Module must have the attribute Remote Enabled to be called from outside the SAP system via the RFC protocol.</p>"},{"location":"documentation/bapis-and-function-modules/#about-bapisfunction-modules","title":"About BAPIs/Function Modules","text":"<p>Every BAPI/Function Module provides import and export parameters.  These parameters are used to pass or get scalar values. An exchange of tables is also possible. </p> <p>The figure below shows the object hierarchy that is provided by ERPConnect to manage the exchange of imports, exports and table parameters.</p> <p> </p>"},{"location":"documentation/bapis-and-function-modules/bapis-and-function-modules/","title":"Call BAPIs/Function Modules","text":"<p>This section contains a list of available resources for the BAPI/Function Module classes.</p>"},{"location":"documentation/bapis-and-function-modules/bapis-and-function-modules/#call-bapisfunction-modules","title":"Call BAPIs/Function Modules","text":"<p>Follow the steps below to call BAPIs/Function Modules:</p> <ol> <li>Connect to the SAP system using <code>R3Connection</code>.</li> <li>Create an RFCFunction object using <code>CreateFunction</code>.</li> <li>Provide values to export parameters, table parameters or import parameters for the RFCFunction objects. <ul> <li>Export parameters:  <code>Exports[\"parameter_name\"].ParamValue</code> or <code>Exports[\"structure_name\"].ToStructure()[\"parameter:name\"]</code>.</li> <li>Table parameters: <code>Tables[\"table_name\"][\"parameter_name\"].ParamValue</code></li> <li>Import parameters:  <code>Imports[\"parameter_name\"].ParamValue</code> or <code>Imports[\"structure_name\"].ToStructure()[\"parameter:name\"]</code>.</li> </ul> </li> <li>Execute the BAPIs/function modules using <code>Execute</code>.</li> </ol>"},{"location":"documentation/bapis-and-function-modules/bapis-and-function-modules/#samples","title":"Samples","text":"<ul> <li>Change Batch Value of an Outbound Delivery (BAPI_OUTB_DELIVERY_CHANGE)</li> <li>Change Production Order (CLOI_CHANGES_UPL_31)</li> <li>Create Equipment (BAPI_EQMT_MODIFY)</li> <li>Create Functional Location (BAPI_FUNCLOC_CREATE)</li> <li>Create a Purchase Order (BAPI_PO_CREATE)</li> <li>Download Business Object Attachments (SO_DOCUMENT_READ_API1)</li> <li>Get Purchase Requisition Details (BAPI_REQUISITION_GETDETAIL)</li> <li>Get a List of all SAP users (BAPI_HELPVALUES_GET)</li> <li>Get an Equipment List (BAPI_EQUI_GETLIST)</li> <li>Look up Purchase Orders (BAPI_PO_GETITEMS)</li> <li>Post Goods Movement (BAPI_GOODSMVT_CREATE)</li> <li>Read Material BOM (CSAP_MAT_BOM_READ)</li> <li>Read Personnel Data (BAPI_EMPLOYEE_GETDATA)</li> <li>Read/Write Material Master Data (BAPI_MATERIAL_SAVEDATA)</li> <li>Reset the Password of an SAP User</li> <li>Retrieve Stock Quantity (BAPI_MATERIAL_AVAILABILITY)</li> <li>Retrieve Texts from a Sales Order (RFC_READ_TEXT)</li> <li>Retrieve the Quantity of a Purchase Order that has already been received (BAPI_PO_GETDETAIL)</li> <li>Upload Documents to the BDS (BDS_BUSINESSDOCUMENT_CREA_TAB)</li> <li>Use the ArchiveLink BAPI to send Barcodes to SAP (BAPI_BARCODE_SENDLIST)</li> </ul>"},{"location":"documentation/bapis-and-function-modules/function-template-generator/","title":"Templates","text":"<p>The Function-Template-Generator provided by ERPConnect generates reusable XML templates for Function Modules and BAPIs.</p>"},{"location":"documentation/bapis-and-function-modules/function-template-generator/#create-xml-templates","title":"Create XML Templates","text":"<ol> <li>Run the FunctionTemplateGenerator.exe in the ERPConnect directory <code>C:\\Program Files\\ERPConnect</code> to start the Function-Template-Generator.</li> <li>Enter the name of a  BAPI/Function Module that you want to use as a template. </li> <li>Click [Generate XML Template]. </li> <li>The window \"SAP Login\" opens. Enter your SAP credentials and click [OK].</li> <li>Save the XML file to your local hard drive. </li> </ol>"},{"location":"documentation/bapis-and-function-modules/function-template-generator/#use-xml-templates","title":"Use XML Templates","text":"<ol> <li>Create an XML template using the tool FunctionTemplateGenerator.exe located in the ERPConnect installation directory.</li> <li>Add the XML file to your project as a resource.</li> <li>Load the XML file into your program as shown in the sample code below. Now you can use the RFCFunction-object instead of the <code>CreateFunction</code> / <code>CreateBAPI</code> methods.</li> </ol> Load XML Templates<pre><code>using (R3Connection con = new R3Connection(\"SAPServer\", 00, \"SAPUser\", \"Password\", \"EN\", \"800\"))\n{\n    RFCFunction f = new RFCFunction(\"BAPI_CUSTOMER_GETDETAIL\");\n    f.Connection = con;\n\n    StreamReader reader = new StreamReader(\n        System.Reflection.Assembly.GetExecutingAssembly().\n            GetManifestResourceStream\n                (\"PocketGetCustomer.BAPI_CUSTOMER_GETDETAIL.xml\"));\n    f.LoadFromXML(reader);\n}\n</code></pre>"},{"location":"documentation/bapis-and-function-modules/web-applications/","title":"Web Applications","text":"<p>The following section shows the development process for an ASP.NET/ERPConnect project.</p>"},{"location":"documentation/bapis-and-function-modules/web-applications/#prerequisites","title":"Prerequisites","text":"<ul> <li>Add the ERPConnect.dll class library as a reference to the project (the .dll is copied to the bin directory when compiling the project). </li> <li>Add the librfc32.dll to your bin directory, see Requirements - 32/64-Bit Environment. </li> </ul> <p>Warning! The standard demo license does not support working in web environments.</p> <p>To test ERPConnect with your ASP.NET project, apply for a test license number at sales@theobald-software.com.</p>"},{"location":"documentation/bapis-and-function-modules/web-applications/#aspnet","title":"ASP.NET","text":"<p>The following sample shows how to create a purchase order using the BAPI_PO_CREATE. The sample uses an ASP page to enter data for a purchase order, see screenshot below.  </p> <p>Input: <pre><code>Vendor: 0000001070\nMaterial: B-7000\nPlant: 1000\nQuantity: 10\n</code></pre></p>"},{"location":"documentation/bapis-and-function-modules/web-applications/#call-bapi_po_create","title":"Call BAPI_PO_CREATE","text":"<p>To create a purchase order using the BAPI_PO_CREATE BAPI, follow the steps below:</p> <ol> <li>Establish a connection to the SAP system </li> <li>Create an RFC-Function object for the BAPI BAPI_PO_CREATE.</li> <li>Fill the structure PO_HEADER with the following values: </li> <li>DOC_TYPE -&gt; Order type (NB normal order)</li> <li>PURCH_ORG -&gt; Purchasing organization</li> <li>PUR_GROUP -&gt; Purchasing group</li> <li>DOC_DATE -&gt; Date </li> <li>VENDOR -&gt; Vendor number</li> <li>Define the items PLANT and PUR_MAT (material number) in the table PO_ITEMS. </li> <li>The values for the quantity (QUANTITY) and the delivery date (DELIV_DATE) must be placed in the table PO_ITEM_SHEDULES.</li> <li>Execute the BAPI and process the return messages.</li> </ol> BAPI_PO_CREATE &amp; Table PO_ITEMS<pre><code>private void Button1_Click(object sender, System.EventArgs e)\n{\n   // Set your ERPConnect license\n    LIC.SetLic(\"xxxx\");\n\n    using var connection = new R3Connection(\n        host: \"server.acme.org\",\n        systemNumber: 00,\n        userName: \"user\",\n        password: \"passwd\",\n        language: \"EN\",\n        client: \"001\")\n    {\n        Protocol = ClientProtocol.NWRFC,\n    };\n\n    connection.Open();\n\n   // Create a RFC-Function object\n   RFCFunction func = connection.CreateFunction(\"BAPI_PO_CREATE\");\n\n   // Fill header structure\n   RFCStructure Header = func.Exports[\"PO_HEADER\"].ToStructure();\n   Header[\"DOC_TYPE\"]= \"NB\";\n   Header[\"PURCH_ORG\"] = \"1000\";\n   Header[\"PUR_GROUP\"] = \"010\";\n   Header[\"DOC_DATE\"]= ERPConnect.ConversionUtils.NetDate2SAPDate(DateTime.Now);\n   Header[\"VENDOR\"]= this.txtVendor.Text\n\n   // Create an Item\n   RFCTable items = func.Tables[\"PO_ITEMS\"];\n   RFCStructure item = items.AddRow();\n   item[\"PO_ITEM\"] = \"1\";\n   item[\"PUR_MAT\"] = this.txtMaterial.Text;\n   item[\"PLANT\"] = this.txtPlant.Text;\n\n   // Create and fill shedules\n   RFCTable shedules = func.Tables[\"PO_ITEM_SCHEDULES\"];\n   RFCStructure shedule = shedules.AddRow();\n   shedule[\"PO_ITEM\"] = \"1\";\n   shedule[\"DELIV_DATE\"] = ERPConnect.ConversionUtils.NetDate2SAPDate(DateTime.Now);\n   shedule[\"QUANTITY\"] = Convert.ToDecimal(this.txtQuan.Text);\n\n   // Exceute BAPI and process return messages\n   func.Execute();\n   this.txtReturn.Text = \"\";\n   this.txtReturn.Text += func.Tables[\"RETURN\"].Rows[0, \"MESSAGE\"] + \"\\r\\n\";\n}\n</code></pre> <p>Output:</p> <pre><code>Message: Standard PO created under the number 4500018292\n</code></pre> <p></p>"},{"location":"documentation/bapis-and-function-modules/web-applications/#related-links","title":"Related Links","text":"<ul> <li>Implement a connection pool</li> </ul>"},{"location":"documentation/bw-cubes-and-bw-queries/","title":"SAP BW","text":"<p>The following section contains information on how to extract data from a Business Warehouse (BW) system. </p> <p>The BW class was developed to extract data from SAP BW InfoCubes and QueryCubes (also known as BEx Queries). A common approach for using the BW class is to build and extract a BEx query that meets your business requirements.</p> <p>Note</p> <p>This section refers to BW Queries, for information on queries created by the SAP transactions SQ02 and SQ01, see SAP Query.</p>"},{"location":"documentation/bw-cubes-and-bw-queries/#about-bex-queries-and-infocubes","title":"About BEx Queries and InfoCubes","text":"<p>BEx queries filter data to create reporting objects or views called InfoProviders for analyzing purposes.  One type of InfoProviders are InfoCubes.</p> <p>InfoCubes are multidimensional datasets that are used to store data e.g., characteristics (dimensions), key figures (measures or facts), units, time characteristics,  or technical characteristics. You can add data from one or more InfoSource or InfoProviders to an InfoCube. </p>"},{"location":"documentation/bw-cubes-and-bw-queries/call-bw-queries/","title":"Call BW Queries","text":"<p>The following sample shows how to fetch data from a BW Query using ERPConnect. To allow external access to a BW Query the checkbox Allow external access has to be set to active in the preferences for the query.</p>"},{"location":"documentation/bw-cubes-and-bw-queries/call-bw-queries/#call-bw-queries","title":"Call BW Queries","text":"<ol> <li>Connect to the SAP system using <code>R3Connection</code>.</li> <li>Create a BWCube object using <code>CreateCube</code>. Its name is made up of the cube name and query name. The cube object offers a collection for all contained dimensions (Dimensions) and key figures (Measures). </li> <li>Set the attribute <code>SelectForFlatMDX</code> of a cube component to true to add it to the query output. </li> <li>To pass values, address the variables via the variables collection. There are range tables behind each variable.</li> <li>Execute the BW query using <code>Execute</code>. The output is a table of the DataTable type. </li> </ol> <p>Note</p> <p>The denomination of the key figures via the query generation in the designer does not conform to the original technical name. That means key figures are addressed by the ordinal number, not the name.</p> BW Query ZSIMPLEQUERY<pre><code>using System;\nusing System.Data;\nusing ERPConnect;\nusing ERPConnect.BW;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nBWCube cube = connection.CreateBWCube(\"0D_DECU/DECUQUERY1\");\n\ncube.Dimensions[\"0D_MATERIAL\"].SelectForFlatMDX = true;\ncube.Dimensions[\"0D_SOLD_TO\"].SelectForFlatMDX = true;\n\ncube.Measures[0].SelectForFlatMDX = true;\ncube.Measures[1].SelectForFlatMDX = true;\n\nDataTable result = cube.Execute();\nforeach (DataRow row in result.Rows)\n{\n    foreach (DataColumn column in result.Columns)\n    {\n        Console.WriteLine($\"{column.Caption}: {row[column]}\");\n    }\n\n    Console.WriteLine();\n}\n</code></pre> <p>Output:</p> <pre><code>Material (SAP Demo): M18\nSold-to-Party (SAP Demo): Thomas Bush Inc.\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 398403,00\nClearing value in document currency (SAP Demo): 328206,00\n\nMaterial (SAP Demo): M18\nSold-to-Party (SAP Demo): Toro Motor Company\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 234234,00\nClearing value in document currency (SAP Demo): 196959,00\n\nMaterial (SAP Demo): M18\nSold-to-Party (SAP Demo): Calorad Inc.\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 111921,00\nClearing value in document currency (SAP Demo): 96837,00\n\nMaterial (SAP Demo): PCSERVICEA\nSold-to-Party (SAP Demo): Infix Co.\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 84564,00\nClearing value in document currency (SAP Demo): 0,00\n\nMaterial (SAP Demo): PCSERVICEA\nSold-to-Party (SAP Demo): Lampen-Markt GmbH\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 2826,00\nClearing value in document currency (SAP Demo): 0,00\n\nMaterial (SAP Demo): PCSERVICEA\nSold-to-Party (SAP Demo): Minerva Industries\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 27759,00\nClearing value in document currency (SAP Demo): 0,00\n\nMaterial (SAP Demo): PCSERVICEA\nSold-to-Party (SAP Demo): Nobil North Sea Limi\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 11118,00\nClearing value in document currency (SAP Demo): 0,00\n</code></pre>"},{"location":"documentation/bw-cubes-and-bw-queries/call-bw-queries/#related-links","title":"Related Links","text":"<ul> <li>Execute BW Queries</li> </ul>"},{"location":"documentation/idocs/","title":"IDocs","text":"<p>IDocs are electronic documents that can be sent from or to SAP systems.  You can exchange IDocs between SAP systems or between one SAP system and an external application.  ERPConnect provides a set of classes to send, receive and construct IDocs.</p>"},{"location":"documentation/idocs/#about-idocs","title":"About IDocs","text":"<p>An IDoc consists of one control record and several data records.  The control record contains routing data and information about the sending and the receiving system.  The data records are arranged hierarchically.  A single data record is also called segment.  One segment itself consists of several fields. For more information, see SAP Help: Structure, Documentation, and Definition of IDoc Types. </p> <p>Tip</p> <p>You can use the transaction WE60 to look up the structures of IDocs in SAP.</p> <p>The figure below shows the IDoc object structure of ERPConnect. Each segment can contain child segments and every segment contains several field objects.</p> <p></p>"},{"location":"documentation/idocs/idocs-schema-generator/","title":"Templates","text":"<p>The IDoc class of ERPConnect offers support for both the IDoc schema and IDoc data located in XML-files.</p> <p>The IDoc-Schema-Generator provided by ERPConnect generates an XML file that can be used to load IDoc schemas. Loading IDoc schemas via XML usually has higher performance than loading them via <code>CreateIdoc</code> or <code>CreateEmptyIdoc</code>, because no SAP connection is necessary.</p> <p>Note</p> <p>IDoc schema files contain the structure of an IDoc while IDoc data files contain the actual content of the IDoc.</p>"},{"location":"documentation/idocs/idocs-schema-generator/#create-xml-templates","title":"Create XML Templates","text":"<ol> <li>Run the IdocSchemaGenerator.exe in the ERPConnect directory <code>C:\\Program Files\\ERPConnect</code> to start the IDoc-Schema-Generator.</li> <li>Enter the IDoc type you want to generate. If needed, enter enhancements. </li> <li>Click [Generate Now!]. </li> <li>The window \"SAP Login\" opens. Enter your SAP credentials and click [OK].</li> <li>Save the XML file to your local hard drive. </li> </ol> Example of an *ORDERS01* IDoc schema<pre><code>xml version=\"1.0\" encoding=\"ISO-8859-1\" ?&gt;\n\n- &lt;ORDERS01&gt;\n- &lt;IDOC&gt;\n- &lt;EDI_DC40&gt;\n&lt;TABNAM&gt;EDI_DC40TABNAM&gt;\n&lt;IDOCTYP&gt;ORDERS01IDOCTYP&gt;\n&lt;MESTYP&gt;ORDERS&gt;MESTYP&gt;\n&lt;SNDPRT&gt;KUSNDPRT&gt;\nEDI_DC40&gt;\n&lt;E1EDK01 /&gt;\n- &lt;E1EDK01&gt;\n&lt;MENGE&gt;10MENGE&gt;\n- &lt;E1EDP10&gt;\n&lt;QUALF&gt;002QUALF&gt;\n&lt;IDTNR&gt;100-100IDTNR&gt;\nE1EDP19&gt;\n</code></pre>"},{"location":"documentation/idocs/idocs-schema-generator/#use-xml-templates","title":"Use XML Templates","text":"<ol> <li>Create an XML template using the tool IDocSchemaGenerator.exe located in the ERPConnect installation directory.</li> <li>Use the method <code>LoadIdocSchema</code> tool to create an IDoc object from a schema file.</li> <li>Load the IDoc data from a data file with the method <code>LoadXMLData</code>.</li> </ol> How to use XML Templates<pre><code>using (R3Connection con = new R3Connection(\"SAPServer\", 00, \"SAPUser\", \"Password\", \"EN\", \"800\"))\n{ \n    Idoc i = new Idoc();  \n    i.Connection = con; \n\n    i.LoadIdocSchema(@\"ORDERS01.xsd\");        \n    i.LoadXMLData(@\"OrderIdoc.xml\");\n\n    i.Send();\n}\n</code></pre>"},{"location":"documentation/idocs/prerequisites/","title":"Prerequisites","text":""},{"location":"documentation/idocs/prerequisites/#set-up-an-rfc-destination","title":"Set Up an RFC Destination","text":"<p>To enable calls from an SAP system to a subsystem, the subsystem must be known to SAP. This can be done with an RFC destination.</p> <p>An existing RFC destination is necessary for sending IDocs.</p> <ol> <li>Use the transaction SM59 to create a new RFC destination.</li> <li>Fill the following fields of the destination:  <ul> <li>Unique name of the new destination e.g., ERPTEST.</li> <li>Connection Type = T (for TCP/IP).</li> <li>Description.</li> <li>ProgramID: A unique name that the server program uses to register on the SAP gateway. </li> <li>Choose the option Registered Server Program.</li> </ul> </li> <li>Save the destination.</li> <li>To test the RFC-Destination, click the button [Test Connection] while the program is running.  If everything works well, you should see a screen like the one below: </li> </ol> <p>An example for a simple RFC server program can be found in section RFC-Server</p> <p>Note</p> <p>If the RFC Destination is set to Unicode, the property IsUnicode of the RFCServer object must be set to true.</p>"},{"location":"documentation/idocs/prerequisites/#set-up-a-test-environment-for-idocs","title":"Set Up a Test Environment for IDocs","text":"<p>To receive test IDocs, you can set up a test environment in your SAP system. Follow the steps below to set up a test environment that can send MATMAS IDocs for distributing material master data: </p> <ol> <li>Define a Logical System to which the IDocs can be sent. Use the transaction SPRO to open Customizing and navigate to SAP Web Application Server -&gt; ALE -&gt; Sending and Receiving Systems -&gt; Logical Systems -&gt; Define Logical System (this path is valid for Release 4.7). Create a new line and enter the name of the system e.g., ERPCONNECT and a short description.</li> <li>Use the transaction SM59 to create an RFC Destination, see Set Up an RFC Destination.</li> <li>Use the transaction WE21 to create a Transactional RFC IDoc Port.  The name of the port must be unique and refer to the RFC destination defined in step 2.  </li> <li>Use the transaction WE20 to create a Partner Profile for the logical system created in step 1. Add an outbound parameter using the [+] button.  For this example select MATMAS as the message type, MATMAS05 as the IDoc basic type and enter the name of the port created in step 3 as the logical receiver port.  </li> <li>Use the transaction BD10 to open the menu for sending IDocs.  Enter the logical system as shown in the figure below and run the program via [F8]. The IDocs are created and sent to the specified port. </li> </ol>"},{"location":"documentation/idocs/prerequisites/#set-up-receiving-idocs","title":"Set Up Receiving IDocs","text":"<p>The following instructions show how to customize your SAP system for processing IDocs and creating sales orders.</p> <ol> <li>Use the transaction WE20 to create a Partner Profile.  In case of a SalesOrder IDoc, the external system acts like a customer. The customer number is the appropriate partner number. Use KU as the partner type.  </li> <li>Add an inbound parameter and select ORDERS as the message type and ORDE as the process code. That enables the SAP system to find the right routines for creating a sales order, when an IDoc is received. </li> <li>Use the transaction VOE2 to process the incoming data. The transaction creates a line in the EDSDC table. Assign the following parameters for the customer number that sends the IDoc:  Sales organization, distribution channel, division, sales type. </li> </ol>"},{"location":"documentation/idocs/receive-an-idoc/","title":"Receive IDocs","text":"<p>This section shows how to receive and process an IDoc. To configure your SAP system to receive IDocs, see Set Up a Test Environment for IDocs.</p>"},{"location":"documentation/idocs/receive-an-idoc/#about","title":"About","text":"<p>The following sample receives a MATMAS IDoc that contains material descriptions.  The material descriptions are written into the console window to check the contents of the IDoc. </p> <p>The MATMAS IDoc is analyzed using the E2MARAM005 segment.  Within this segment, several E2MAKTM001 child segments contain material descriptions.</p> <p>Tip</p> <p>You can use the transaction WE60 to look up the structures of IDocs in SAP.</p>"},{"location":"documentation/idocs/receive-an-idoc/#receive-a-matmas-idoc","title":"Receive a MATMAS IDoc","text":"<p>Follow the steps below to receive a MATMAS IDoc:</p> <ol> <li>Create an RFC Server object to accept calls from SAP, see RFC Server for more information.</li> <li>To receive IDocs with the RFCServer object, set the property <code>CanReceiveIdocs</code> to true.</li> <li>When an IDoc is received by ERPConnect, the event <code>IncomingIdoc</code> is triggered and a reference to the RFCServer object and to the IDoc object is transferred. </li> <li>Use the <code>IncomingIdoc</code> event to read the data buffer of the child segment E2MAKTM001.  The description text is located at index 4 with a length of 40 in E2MAKTM001. </li> <li>Write the description texts into the console window.</li> <li>Run the program.</li> <li>Send an IDoc in SAP and check the result. </li> </ol> Receive a MATMAS IDoc<pre><code>using System;\nusing ERPConnect;\nusing ERPConnect.Idocs;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var server = new RFCServer();\nserver.Logging = true;\nserver.GatewayHost = \"hamlet\";\nserver.GatewayService = \"sapgw11\";\nserver.ProgramID = \"ERPTEST\";\nserver.CanReceiveIdocs = true;\n\nserver.InternalException += (_, exception) =&gt;\n{\n    Console.WriteLine($\"Internal error: {exception.Message}\");\n};\n\nserver.IncomingIdoc += (_, idoc) =&gt;\n{\n    Console.WriteLine(\"Received Idoc \" + idoc.IDOCTYP);\n    IdocSegment e1maram = idoc.Segments[\"E2MARAM005\", 0];\n    for (int i = 0; i &lt; e1maram.ChildSegments.Count; i++)\n    {\n        if (e1maram.ChildSegments[i].SegmentName != \"E2MAKTM001\")\n        {\n            continue;\n        }\n\n        string text = e1maram.ChildSegments[i].ReadDataBuffer(4, 40);\n        Console.WriteLine($\"Material text found: {text}\");\n    }\n};\n\nserver.Start();\n\nConsole.WriteLine(\"Server is running. Press any key to exit.\");\nConsole.ReadLine();\n\nserver.Stop();\n</code></pre> <p>Output:</p> <p>In this case, 5 E2MAKTM001 segments were found so 5 texts are passed.</p> <p></p> <p>Note</p> <p>If you do not want to read the data buffer with offset and length of the texts, you can load an XML Schema instead, see Templates.</p>"},{"location":"documentation/idocs/receive-an-idoc/#related-links","title":"Related Links","text":"<ul> <li>Setting Up a Test Environment for IDocs</li> <li>Set Up Receiving IDocs</li> </ul>"},{"location":"documentation/idocs/send-an-idoc/","title":"Send IDocs","text":"<p>This section shows how to send an IDoc. To configure your SAP system to send IDocs, see Set Up a Test Environment for IDocs.</p> <p>There are two ways to create an IDoc object: </p> <ul> <li><code>CreateIdoc</code> creates an IDoc with all segments located in the segment collections.  This is useful for sending simple IDocs. </li> <li><code>CreateEmptyIdoc</code> and <code>CreateSegment</code> create only the needed segments. </li> </ul>"},{"location":"documentation/idocs/send-an-idoc/#send-an-idoc","title":"Send an IDoc","text":"<p>Follow the steps below to send IDocs:</p> <ol> <li>Connect to the SAP system using <code>R3Connection</code>. </li> <li>Use <code>CreateIdoc</code> or <code>CreateEmptyIdoc</code> to instance a valid IDoc object. Provide an object type for the IDocs, e.g., \"SYSTAT01\", \"MATMAS01\", \"ORDERS01\", etc.</li> <li>Provide receiver and sender information. </li> <li>Fill in the fields in the IDoc segments.</li> <li>Send the IDoc using <code>Send</code>. </li> <li>Run the program and check the result.</li> </ol> <p>Tip</p> <p>Use SAP transaction WE60 to look up the segment documentation of IDocs.</p> <p>Note</p> <p>Make sure to configure your SAP system to receive IDocs.</p> <p>Examples:</p> Send a STATUS IDocSend a MATMAS IDocSend an ORDER IDoc <pre><code>using System;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\n// Inquire the IDoc number of the IDoc to be manipulated and read the input.    \nConsole.WriteLine(\"Which IDoc number would you like to manipulate?\");  \nstring IdocNo = Console.ReadLine(); \n\nIdoc i = connection.CreateIdoc(\"SYSTAT01\",\"\");\n\n// Fill Message Type \ni.MESTYP = \"STATUS\"; \n\n// Fill Information about IDoc Reciever \ni.RCVPRN = \"PT4_800\"; // Partner number \ni.RCVPRT = \"LS\"; // Partner type \n\n// Fill information about IDoc sender \ni.SNDPOR = \"ERPCONNECT\"; // Partner port \ni.SNDPRN = \"ERPCONNECT\"; // Partner number \ni.SNDPRT = \"LS\"; // Partner type\n\n// Fill the right fields in the segments \ni.Segments[\"E1STATS\",0].Fields[\"LOGDAT\"].FieldValue = \"20210901\";\ni.Segments[\"E1STATS\",0].Fields[\"LOGTIM\"].FieldValue = \"152301\"; \ni.Segments[\"E1STATS\",0].Fields[\"STATUS\"].FieldValue = \"12\"; \ni.Segments[\"E1STATS\",0].Fields[\"DOCNUM\"].FieldValue = IdocNo; \n\ni.Send(); \nConsole.WriteLine(\"IDoc sent\"); \nConsole.ReadLine();\n</code></pre> <p>Output:</p> <p>The status code of the manipulated IDoc increases from 3 (Data passed...) to 12 (Dispatch OK).  </p> <pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open(false);\n\nERPConnect.Idocs.Idoc id = con.CreateEmptyIdoc(\"MATMAS01\",\"\");\n\n// Fill header data\nid.SNDPRN = \"ERPCONNECT\";\nid.SNDPOR = \"ERPCONNECT\";\nid.SNDPRT = \"LS\";\n\nid.RCVPRN = \"ECW_00_800\";\nid.RCVPRT = \"LS\";\nid.MESTYP = \"MATMAS\";\n\n// Fill basic data\nERPConnect.Idocs.IdocSegment e1maram = id.CreateSegment(\"E1MARAM\");\ne1maram.Fields[\"MATNR\"].FieldValue = \"DEV003\"; // Material Number\ne1maram.Fields[\"MTART\"].FieldValue = \"FERT\"; // Material Type\ne1maram.Fields[\"MATKL\"].FieldValue = \"001\"; //  Material Group\ne1maram.Fields[\"MEINS\"].FieldValue = \"PCE\"; // Base Unit of Measure\ne1maram.Fields[\"MBRSH\"].FieldValue = \"M\"; // Industry sector\ne1maram.Fields[\"BRGEW\"].FieldValue = \"1\"; // Gross Weight\ne1maram.Fields[\"NTGEW\"].FieldValue = \"1\"; // Net Weight\ne1maram.Fields[\"GEWEI\"].FieldValue = \"KG\"; // Weight Unit\n\nid.Segments.Add(e1maram);\n\n// Fill text data\nERPConnect.Idocs.IdocSegment e1maktm = id.CreateSegment(\"E1MAKTM\");\ne1maktm.Fields[\"SPRAS\"].FieldValue = \"E\"; // Language Key\ne1maktm.Fields[\"MAKTX\"].FieldValue = \"my Article\"; // Description Text\n\ne1maram.ChildSegments.Add(e1maktm);\n\n// Send IDoc\nid.Send();\n\n\nConsole.WriteLine(\"Ready..\");\nConsole.ReadLine();\n</code></pre> <p>Output:</p> <p></p> <pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open(false);\n\nIdoc idoc = connection.CreateEmptyIdoc(\"ORDERS01\",\"\");\nidoc.MESTYP = \"ORDERS\";\n\n// Fill information about idoc sender\nidoc.SNDPRN = \"1172\"; // Partner number\nidoc.SNDPRT = \"KU\"; // Partner type\n\n// Create document header segment\nIdocSegment e1edk01 = idoc.CreateSegment(\"E1EDK01\");\nidoc.Segments.Add(e1edk01);\n\n// Create item segment\nIdocSegment e1edp01 = idoc.CreateSegment(\"E1EDP01\");\ne1edp01.Fields[\"MENGE\"].FieldValue = txtQty.Text;\nidoc.Segments.Add(e1edp01);\n\n// Create Object identification (material number in this case)\nIdocSegment e1edp19 = idoc.CreateSegment(\"E1EDP19\");\ne1edp19.Fields[\"QUALF\"].FieldValue = \"002\"; // 002 for material number\ne1edp19.Fields[\"IDTNR\"].FieldValue = txtMaterialNumber.Text; // material number\ne1edp01.ChildSegments.Add(e1edp19);\n\nidoc.Send();\nthis.lblInfo.Text = \"Idoc sent\";\n</code></pre> <p>Output:</p> <p></p>"},{"location":"documentation/idocs/send-an-idoc/#related-links","title":"Related Links","text":"<ul> <li>Send an ORDER IDoc</li> <li>Send a MATMAS IDoc</li> <li>Send a STATUS IDoc</li> <li>Resend IDocs which where set to CPICERR in SM58</li> <li>Set Up an RFC-Destination</li> </ul>"},{"location":"documentation/introduction/","title":"Introduction","text":"<ul> <li> This section contains a documentation that shows how to use ERPConnect.</li> </ul>"},{"location":"documentation/introduction/#about-erpconnect","title":"About ERPConnect","text":"<p>ERPConnect is a flexible and modular .NET library that has been certified by SAP for integration with SAP ECC and SAP S/4HANA.</p> <p></p>"},{"location":"documentation/introduction/#features","title":"Features","text":"Functionality / SAP Objects Description ABAP Code Generate and execute ABAP code on-the-fly. BAPIs and Function Modules Access BAPIs and RFC function modules to read and write data from and to SAP. BW Cube and BEx Queries Extract data from SAP BW InfoCubes and BEx Queries. IDocs Send and receive SAP IDocs. Queries Extract SAP queries (not BEx queries). RFC Server Functions Create, register and use RFC server functions. Tables Read SAP Tables directly via RFC. Transactions Execute SAP transactions via batch input."},{"location":"documentation/introduction/#tools","title":"Tools","text":"<p>The installation package of ERPConnect includes the following tools to make development easier and more efficient:</p> <ul> <li> <p>TransactionRecorder </p> <p>Records SAP transactions and generates C# or VB code for the transactions.</p> </li> <li> <p>IDoc-Schema-Generator </p> <p>Generates an XML file that can be used to load IDoc schemas with high performance.</p> </li> <li> <p>Function-Template-Generator </p> <p>Generates reusable XML templates for Function Modules and BAPIs.</p> </li> </ul>"},{"location":"documentation/introduction/installation/","title":"Installation","text":""},{"location":"documentation/introduction/installation/#prerequisites","title":"Prerequisites","text":"<p>Administrator permissions are required to install ERPConnect.</p>"},{"location":"documentation/introduction/installation/#setup","title":"Setup","text":"<p><code>ERPConnectSetup.exe</code> is an industry standard setup. Execute the <code>ERPConnectSetup.exe</code> file and follow the instructions of the setup.  The installation process copies the class library and all available tools into the program directory.</p> <p></p> <p>After the installation you are able to use ERPConnect in your .NET environment. The license installation procedure is described in the section Installing the license.</p>"},{"location":"documentation/introduction/installation/#program-directory-files","title":"Program Directory Files","text":"<p>The list below shows several most important files that are placed into the default directory <code>C:\\Program Files\\ERPConnect</code> after installation:</p> Files Description ERPConnect35.dll (*) The ERPConnect class library for .NET 3.5 SP1 or higher. ERPConnectStandard20.dll (*) The ERPConnect class library for .NET Standard 2.0. ERPConnect35.xml ERPConnectStandard20.xml Visual Studio documentation files. TransactionRecorder.exe Small tool to record batch sequences and create appropriate .NET code, see Transaction Templates. IdocSchemeGenerator.exe Small tool to generate XML schemas for IDocs, see IDocs Templates. FunctionTemplateGenerator.exe Small tool to generate XML templates for RFCFunction objects, see BAPI/Function Module Templates. <p>After the installation you are able to use ERPConnect in your .NET environment.  The files marked with (*) can be supplied as redistributables with your application.</p>"},{"location":"documentation/introduction/licensing/","title":"Licensing","text":"<p>A demo license is automatically installed with the installation of ERPConnect. A regular license is provided in the Theobald Software Customer Portal after purchasing the product. </p> <p>Note</p> <p>The standard demo license does not support working in web environments. To test ERPConnect with your ASP.NET project, apply for a test license number at sales@theobald-software.com.</p>"},{"location":"documentation/introduction/licensing/#installing-the-erpconnect-license","title":"Installing the ERPConnect License","text":"<p>After the end of the test period ERPConnect will not run without a valid license.</p> <p>Because ERPConnect checks the licence number on every call (client and server), you need to set your license number before the first connection to SAP is established. Set the license during runtime through the static class <code>ERPConnect.LIC</code> as shown in the code below.</p> <pre><code>ERPConnect.LIC.SetLic(\"XXXXXXXXXX\");\n</code></pre>"},{"location":"documentation/introduction/licensing/#maintenance","title":"Maintenance","text":"<p>Contact the sales department for information about available maintenance options. In case of technical difficulties, contact the support team: https://support.theobald-software.com.</p>"},{"location":"documentation/introduction/licensing/#technical-support","title":"Technical Support","text":"<p>How to contact the Theobald Software support team:</p> <ol> <li>Open a ticket in our Support Portal.</li> <li>Provide as much information as possible for the Theobald Software support team to understand and analyze the issue.</li> <li>If there is an error message, copy and paste the error message in the ticket.</li> </ol> <p>Disclaimer</p> <p>SAP versions that are no longer supported by the manufacturer are excluded from the Theobald Software support. Issues specific to custom BAPIs (Z function modules) or custom reports (Z reports) are also excluded from the scope of support.</p>"},{"location":"documentation/introduction/licensing/#related-links","title":"Related Links","text":"<ul> <li>Theobald Software Customer Portal</li> <li>Theobald Software Support Portal</li> </ul>"},{"location":"documentation/introduction/requirements/","title":"Requirements","text":""},{"location":"documentation/introduction/requirements/#net-framework","title":".NET Framework","text":"<p>ERPConnect (without LINQ to ERP) consists of two .NET assemblies that target different frameworks:</p> <ul> <li>ERPConnect35.dll (targets .NET Framework 3.5 SP1)</li> <li>ERPConnectStandard20.dll (targets .NET Standard 2.0)</li> </ul> <p>That results in the following compatibility matrix: </p> ERPConnectStandard20.dll ERPConnect35.dll .NET Framework 3.5 SP1 X .NET Framework 4.0 X .NET Framework 4.5 X .NET Framework 4.5.1 X .NET Framework 4.5.2 X .NET Framework 4.6 X .NET Framework 4.6.1 and newer X X .NET Core 2.0 and newer X X Universal Windows Platform 10.0.16299 and newer X"},{"location":"documentation/introduction/requirements/#sap-releases","title":"SAP Releases","text":"<p>All communication with SAP is performed via the RFC protocol. That means, the integration occurs at SAP application server level.  Therefore, the database used by the SAP system is irrelevant. SAP ABAP Systems on any Database (including HANA) are supported. This also means, that the operating system of the SAP system is irrelevant - all operating systems are supported. SAP Systems running on Big Endian and Little Endian hardware are supported.</p> <p>SAP Releases 4.6C and newer are supported. This includes:  </p> <ul> <li>SAP R/3 Version 4.6C and later</li> <li>mySAP</li> <li>SAP ERP / ECC 5.0 / ECC 6.0 (including all EhPs)</li> <li>SAP Business All-in-One</li> <li>SAP Business Suite 7</li> <li>SAP S/4HANA</li> <li>SAP BW 3.1 and later</li> <li>SAP BW/BI 7.x</li> <li>SAP BW/4HANA</li> <li>SAP Application Server ABAP, Message Server, Router, Standalone Gateway</li> </ul> <p>SAP Business One, SAP Business Objects and SAP Public Cloud Versions are not supported.</p> <p>Installation of custom function modules / transport requests is not required.</p>"},{"location":"documentation/introduction/requirements/#operating-systems","title":"Operating Systems","text":"<ul> <li>Windows 10</li> <li>Windows 11</li> <li>Windows Server 2019</li> <li>Windows 8.1 (until 10.01.2023)</li> <li>Windows Server 2016 (until 12.01.2027)</li> <li>Windows Server 2012 R2 (until 10.10.2023)</li> <li>Windows Server 2012 (until 10.10.2023)</li> </ul>"},{"location":"documentation/introduction/requirements/#visual-studio","title":"Visual Studio","text":"<ul> <li>Visual Studio 2022</li> <li>Visual Studio 2019</li> <li>Visual Studio 2017</li> <li>Visual Studio 2015 (until 14.10.2025)</li> <li>Visual Studio 2013 (until 09.04.2024)</li> </ul>"},{"location":"documentation/introduction/requirements/#other-applications-and-frameworks","title":"Other Applications and Frameworks","text":"<ul> <li>SAP NetWeaver RFC Library 7.50 </li> <li>Visual C++ 2013 Runtime</li> </ul>"},{"location":"documentation/introduction/requirements/#netweaver-rfc-library","title":"Netweaver RFC Library","text":"<p>ERPConnect supports the Netweaver RFC (SDK) as of version 4.6.0. To use it, set the Property Protocol of the R3Connection object to ClientProtocol.NWRFC before opening the connection (default setting). </p> <pre><code>R3Connection.Protocol = ClientProtocol.NWRFC;\n</code></pre> <p>For 64-Bit environments the following DLLs are required:</p> <ul> <li>ERPConnect35.dll or ERPConnectStandard20.dll</li> <li>sapnwrfc.dll</li> <li>icuucXX.dll</li> <li>icudtXX.dll</li> <li>icuinXX.dll </li> </ul> <p>XX can vary depending on the version of the NW RRC Libraries. The ERPConnect*.dll is delivered with ERPConnect. The other DLLs can be downloaded from the SAP web site.</p>"},{"location":"documentation/introduction/requirements/#memory","title":"Memory","text":"<ul> <li>2 GB or more recommended (depends on actual use case)</li> </ul>"},{"location":"documentation/introduction/requirements/#disk-space","title":"Disk Space","text":"<ul> <li>About 50 MB disk space are required for a full installation.</li> </ul>"},{"location":"documentation/introduction/requirements/#3264-bit-environment","title":"32/64-Bit Environment","text":"<ul> <li>Both x86 and x64 platforms are supported.</li> </ul> <p>Copy the 64-bit version of librfc32.dll to the <code>\\System32</code> folder.  Copy the 32-Bit Version of librfc32.dll to the <code>\\SysWoW64</code> folder.</p> <p>Warning! ERPConnect.ERPException: Cannot access librfc32.dll.</p> <p>To use ERPConnect in 64-Bit mode, you need a 64-Bit version of the SAP library librfc32.dll. Copy the 64-bit version of librfc32.dll to the direcory <code>C:\\Windows\\System32</code>. To use ERPConnect in 32-Bit mode, copy the 32-Bit version of the librfc32.dll to the directory <code>C:\\Windows\\SysWOW64</code>.</p> <p></p>"},{"location":"documentation/introduction/requirements/#security-settings","title":"Security Settings","text":"<ul> <li>For logging on to SAP, a system or dialog user with appropriate authority objects is required.</li> <li>Plain authentication (user/password), Secure Network Communications (SNC) with and without Single Sign-On (SSO) and SAP Logon Tickets (MYSAPSSO2) are supported.</li> </ul>"},{"location":"documentation/introduction/requirements/#network-settings","title":"Network Settings","text":"<p>Ports need to be opened depending on the SAP System connection technique. Details can be found in the knowledge base article How to check the accessibility to a SAP System.</p>"},{"location":"documentation/introduction/saplibraries/","title":"SAP Libraries","text":"<p>To use ERPConnect you need also the following SAP libraries. You can find the SAP Libraries in the SAP Marketplace download area.</p>"},{"location":"documentation/introduction/saplibraries/#client-protocol-rfc-librfc32dll","title":"Client Protocol RFC (librfc32.dll)","text":"<p>Copy the 64-bit version of librfc32.dll to the <code>\\System32</code> folder.  Copy the 32-Bit Version of librfc32.dll to the <code>\\SysWoW64</code> folder.</p> <p>Note that the files have the same file name, only the file size varies.</p> <p></p> <p>To use the Classic RFC Protocol, set the Property Protocol of the R3Connection object to ClientProtocol.RFC before you open the connection.</p> <pre><code>R3Connection.Protocol = ClientProtocol.RFC;\n</code></pre>"},{"location":"documentation/introduction/saplibraries/#netweaver-rfc-library","title":"Netweaver RFC Library","text":"<p>ERPConnect supports the Netweaver RFC (SDK) as of version 4.6.0.  For 64-Bit environments the following DLLs are required (XX can vary depending on the version of the NW RRC Libraries):</p> <ul> <li>sapnwrfc.dll</li> <li>icuucXX.dll</li> <li>icudtXX.dll</li> <li>icuinXX.dll </li> </ul> <p>Copy the 64-Bit Version of NW Libraries to the <code>\\System32</code> folder. Copy the 32-Bit Version of NW Libraries to the <code>\\SysWoW64</code> folder.</p> <p>To use the Netweaver RFC (SDK), set the Property Protocol of the R3Connection object to ClientProtocol.NWRFC before opening the connection. </p> <pre><code>R3Connection.Protocol = ClientProtocol.NWRFC;\n</code></pre>"},{"location":"documentation/queries/","title":"Queries","text":"<p>The following section describes how to control and extract SAP Queries with ERPConnect.</p> <p>Note</p> <p>SAP Queries refer to queries that can be created by the SAP transactions SQ02 and SQ01. If you want to use a BW Query as a data source, see BW Cube/Queries.</p>"},{"location":"documentation/queries/#about-sap-queries","title":"About SAP Queries","text":"<p>SAP Queries are used to access data sets, see SAP Help - Working with Queries for more information.</p> <p>The input image of a Query is filled using the SelectParameters collection.  Every input parameter can contain an arbitrary number of values.  The values are represented by ranges. In addition, a query object contains a Fields collection that in turn contains the output fields.</p> <p>The figure below shows the object hierarchy that is provided by the Queries classes in ERPConnect. </p> <p>More information on working with the ERPConnect Queries classes is provided in the following sections:</p>"},{"location":"documentation/queries/call-a-query/","title":"Call Queries","text":"<p>The following sample shows how to fetch data from an SAP Query using ERPConnect.</p> <p>Tip</p> <p>If you don't know the technical name of a Query parameter, you can look it up in your SAP-System. Use the transaction SQ01 or SQ02 to search a Query. Open the description of the Query and scroll to the section Selections. All parameter properties including the name are listed.</p>"},{"location":"documentation/queries/call-a-query/#call-queries","title":"Call Queries","text":"<ol> <li>Connect to the SAP system using <code>R3Connection</code>.</li> <li>Create a query object using <code>CreateQuery</code>. Each SAP query is defined by three descriptors: <ul> <li>the user workspace (local or global)</li> <li>the user group </li> <li>the name of the query</li> </ul> </li> <li>Define the parameters of the query. Every parameter has a distinctly technical name that can be looked up in the SAP.  Example: To create a selection criteria, access the parameter's range collection via the indexer and add a new range using <code>Add</code>. An individual range is defined by three descriptors:<ul> <li>a sign (include or exclude)</li> <li>an operator (e.g. equals for parity) </li> <li>a low or high value (LowValue and HighValue or only LowValue when using parity).  </li> </ul> </li> <li>Execute the query using <code>Execute</code>. </li> <li>The query returns a table of the DataTable type. Access the result table using <code>Result</code> attribute.</li> </ol> Fetch Data from SAP Query D3<pre><code>private void btnFetchQueryData_Click(object sender, System.EventArgs e)\n    {\n      using (R3Connection con = new R3Connection(\"SAPServer\", 00, \"SAPUser\", \"Password\", \"EN\", \"800\"))\n        { \n           con.Open();\n\n           // Create Query object Query q; \n           try\n           {\n               Query q = con.CreateQuery(WorkSpace.GlobalArea, \"BT\", \"D3\");\n\n               // Add a criteria (in this case the airline) \n               q.SelectionParameters[\"CARRID\"].Ranges.Add(\n                   Sign.Include, RangeOption.Equals, inputAirline.Text);\n               // Add a second criteria (in this case the date) \n               q.SelectionParameters[\"FLDATE\"].Ranges.Add(\n                   Sign.Include, RangeOption.Between, inputStartDate.Text, inputEndDate.Text);\n\n               // Run the Query \n               q.Execute();\n               // Bind result to datagrid \n               this.dataGridView1.DataSource = q.Result;\n           }\n           catch (Exception e1)\n           {\n            MessageBox.Show(e1.Message);\n            return;\n           }\n        }\n    }\n</code></pre>"},{"location":"documentation/queries/call-a-query/#related-links","title":"Related Links","text":"<ul> <li>Samples: Fetch Data from an SAP Query</li> </ul>"},{"location":"documentation/rfc-server/","title":"RFC Server Functions","text":"<p>The following sections show how to develop RFC server functions with ERPConnect.</p>"},{"location":"documentation/rfc-server/#about-rfc-server-functions","title":"About RFC Server Functions","text":"<p>RFC server functions are routines that can be called by ABAP programs, see SAP Help - Introduction to RFC Server Programs for more information. </p> <p>Apart from the client functionality that allows function modules or BAPIs to be accessed in the SAP system, ERPConnect also offers the development of a server function. ERPConnect supports Transactional RFC functions. </p>"},{"location":"documentation/rfc-server/connection-time-outs/","title":"Connection Timeouts","text":"<p>This section shows how to handle connection timeouts.</p> <p>In most cases, an RFC server is designed to run for long periods of time.  Because of this, the connection to the SAP system is bound to time out sooner or later e.g, when SAP is booted or when there is a disruption in the network connection.</p>"},{"location":"documentation/rfc-server/connection-time-outs/#check-connection-and-restart","title":"Check Connection and Restart","text":"<p>To ensure that the RFC server can handle connection timeouts, the following procedure is recommended:</p> <ol> <li>Start a timer object parallel to the RFC server. This will activate the Elapsed event every 30 or 60 seconds. </li> <li>Query the RFC server's attribute IsRunning, which checks the connection to SAP.  If the output of this function is false, relaunch the server object with <code>Start</code>.</li> <li>If a connection interruption is intercepted in the OnInternalException event,  do not call <code>Start</code> directly from within this event.  Do not reboot after an interruption, when the reason for the interruption has not been determined or debugged yet.</li> </ol>"},{"location":"documentation/rfc-server/create-rfc-functions/","title":"Create RFC Functions","text":"<p>This section shows how to create, register and use RFC server functions.</p>"},{"location":"documentation/rfc-server/create-rfc-functions/#register-the-rfc-server-function","title":"Register the RFC Server Function","text":"<ol> <li>Initialize an RFCServer object. Provide the gateway host, the gateway service and the program ID to register on the SAP gateway. The program ID must be available as a registered destination in SAP, see Set Up an RFC Destination. </li> <li>Register an RFCServerFunction object using <code>RegisteredFunctions.Add</code>. An RFCServer object can hold more than one RFCServerFunction object.  </li> <li>Add Imports and Exports. They are handled the same way as when calling RFC functions as a client. </li> <li>When an ABAP program calls the function, the event IncomingCall is triggered.  When using C#, the event call-back must be defined in a separate line of code.  </li> <li>Start the server using <code>Start</code>.</li> </ol> <p>Note</p> <p>If the RFC destination is set to Unicode (SAP transaction code SM59), the property IsUnicode of the RFCServer object must be set to true.</p> <p>In the following sample applications a simple RFC server function is created that allows ABAP programs to add numbers.</p> Example with Scalar ParametersTable ParametersStructure ParametersStructure Output <pre><code>using ERPConnect; \n\nstatic void Main(string[] args) \n{ \n   RFCServer s = new RFCServer();\n   s.GatewayHost = \"sap-erp-as05.example.com\"; \n   s.GatewayService = \"sapgw11\"; \n   s.ProgramID = \"ERPTEST\"; \n\n   s.IncomingCall+=new ERPConnect.RFCServer.OnIncomingCall(s_IncomingCall); \n\n   RFCServerFunction f = s.RegisteredFunctions.Add(\"Z_ADD\"); \n\n   f.Imports.Add(\"NUMBER1\",RFCTYPE.INT); \n   f.Imports.Add(\"NUMBER2\",RFCTYPE.INT); \n   f.Exports.Add(\"RES\",RFCTYPE.INT); \n\n   s.Start(); \n\n   Console.Write( \"Server is running. Press any key to exit.\"); \n   Console.ReadLine(); \n}\n</code></pre> <p>Two input parameters (NUMBER1 and NUMBER2) are added in a new function (Z_ADD).  The result (RES) is passed back to the calling ABAP program, see Call RFC Server Functions in ABAP. </p> <pre><code>using ERPConnect; \n\nstatic void Main(string[] args)\n{\n\n    static RFCServer s = new RFCServer();\n    s.GatewayHost = \"SAPServer\";\n    s.GatewayService = \"sapgw00\";\n    s.ProgramID = \"ERPConnectTEST\";\n\n    s.IncomingCall += new RFCServer.OnIncomingCall(s_IncomingCall);\n\n    RFCServerFunction f = s.RegisteredFunctions.Add(\"Z_ADD_2\");\n\n    f.Exports.Add(\"RES\", RFCTYPE.INT);\n\n    RFCTable numbertable = f.Tables.Add(\"NUMBERS\");\n    numbertable.Columns.Add(\"NUMB\", 10, 0, RFCTYPE.NUM); \n\n    s.Start();\n\n    Console.WriteLine(\"Press Enter to quit\");\n    Console.ReadLine();\n}\n</code></pre> <p>A table (NUMBERS) with a column (NUMB) is added to a table collection using <code>Add()</code>. The result (RES) is passed back to the calling ABAP program, see Call RFC Server Functions in ABAP. </p> <pre><code>using ERPConnect; \n\nstatic void Main(string[] args)\n{\n    static RFCServer s = new RFCServer();\n    s.GatewayHost = \"hamlet\";\n    s.GatewayService = \"sapgw11\";\n    s.ProgramID = \"ERPTEST\";\n\n    s.IncomingCall += new RFCServer.OnIncomingCall(s_IncomingCall);\n\n    RFCServerFunction f = s.RegisteredFunctions.Add(\"Z_ADD_3\");\n\n    RFCTableColumnCollection Columns = new RFCTableColumnCollection ();\n    Columns.Add(\"NUMB\", 10, 0, RFCTYPE.NUM);\n    Columns.Add(\"NUMB2\", 10, 0, RFCTYPE.NUM);\n\n    f.Imports.Add(\"NUMBERS\",Columns );\n    f.Exports.Add(\"RES\", RFCTYPE.INT);\n\n    s.Start();\n\n    Console.WriteLine(\"Press Enter to quit\");\n    Console.ReadLine();\n}\n</code></pre> <p>A structure (NUMBERS) with 2 columns (NUMB1 and NUMB2) is added to a column collection via <code>RFCTableColumnCollection()</code>.  The result (RES) is passed back to the calling ABAP program, see Call RFC Server Functions in ABAP. </p> <pre><code>using ERPConnect; \n\nstatic void Main(string[] args)\n{\n\n    static RFCServer s = new RFCServer();\n    s.GatewayHost = \"hamlet\";\n    s.GatewayService = \"sapgw11\";\n    s.ProgramID = \"ERPTEST\";\n\n    s.IncomingCall += new RFCServer.OnIncomingCall(s_IncomingCall);\n\n    RFCServerFunction f = s.RegisteredFunctions.Add(\"Z_ADD_4\");\n\n    RFCTableColumnCollection Columns = new RFCTableColumnCollection ();\n    Columns.Add(\"NUMB1\", 10, 0, RFCTYPE.NUM);\n    Columns.Add(\"NUMB2\", 10, 0, RFCTYPE.NUM);\n\n    RFCTableColumnCollection EXColumns = new RFCTableColumnCollection();\n    EXColumns.Add(\"NUMB1\", 10, 0, RFCTYPE.NUM);\n    EXColumns.Add(\"NUMB2\", 10, 0, RFCTYPE.NUM);\n\n    f.Imports.Add(\"NUMBERS\",Columns );\n    f.Exports.Add(\"EXNUMBERS\", EXColumns);\n\n    s.Start();\n\n    Console.WriteLine(\"Press Enter to quit\");\n    Console.ReadLine();\n}\n</code></pre> <p>Two structures (NUMBERS and EXNUMBERS) with 2 columns (NUMB1 and NUMB2) are added to column collections via <code>RFCTableColumnCollection()</code>.  One structure (NUMBERS) is used for import and the other (EXNUMBERS) is passed back to the calling ABAP program, see Call RFC Server Functions in ABAP.</p>"},{"location":"documentation/rfc-server/create-rfc-functions/#handle-incoming-calls","title":"Handle Incoming Calls","text":"<p>The following code shows how the IncomingCall event is handled:</p> Example with Scalar ParametersTable ParametersStructure ParametersStructure Output <pre><code>private static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction) \n{ \n   if (CalledFunction.FunctionName==\"Z_ADD\") \n   { \n      Int32 i1 = (Int32)CalledFunction.Imports[\"NUMBER1\"].ParamValue; \n      Int32 i2 = (Int32)CalledFunction.Imports[\"NUMBER2\"].ParamValue; \n      Int32 res = i1 + i2; \n      CalledFunction.Exports[\"RES\"].ParamValue = res; \n      Console.WriteLine(\"Incoming Call\"); \n   } \n   Else \n      throw new ERPConnect.ERPException(\"Function unknown\"); \n}\n</code></pre> <p>The result is returned in the scalar export parameter RES.</p> <pre><code>static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)\n{\n    Console.WriteLine(\"Incoming call!!\");\n\n    Int32 res = 0;\n\n    foreach (RFCStructure row in CalledFunction.Tables[\"NUMBERS\"].Rows)\n        res += Convert.ToInt32(row[\"NUMB\"]);\n\n    CalledFunction.Exports[\"RES\"].ParamValue = res;\n}\n</code></pre> <p>Use the object hierarchy to iterate through the rows and add the values.  The result is returned in the scalar export parameter RES.</p> <pre><code>static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)\n{\n    Console.WriteLine(\"Incoming call!!\");\n\n    Int32 res = 0;\n    RFCStructure numberstruc = CalledFunction.Imports[\"NUMBERS\"].ToStructure();\n\n    Int32 i1 = Convert.ToInt32(numberstruc[\"NUMB\"].ToString());\n    Int32 i2 = Convert.ToInt32(numberstruc[\"NUMB2\"].ToString());\n\n    res = i1 + i2;\n\n    CalledFunction.Exports[\"RES\"].ParamValue = res;\n}\n</code></pre> <p>The result is returned in the scalar export parameter RES.</p> <pre><code>static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)\n{\n    Console.WriteLine(\"Incoming call!!\");\n\n    RFCTableColumnCollection EXColumns = new RFCTableColumnCollection();\n    EXColumns.Add(\"NUMB1\", 10, 0, RFCTYPE.NUM);\n    EXColumns.Add(\"NUMB2\", 10, 0, RFCTYPE.NUM);\n\n    CalledFunction.Exports.Add(\"EXNUMBER\", EXColumns);\n    RFCStructure numberstruc = CalledFunction.Imports[\"NUMBERS\"].ToStructure();\n\n    Int32 i1 = Convert.ToInt32(numberstruc[\"NUMB1\"].ToString());\n    Int32 i2 = Convert.ToInt32(numberstruc[\"NUMB2\"].ToString());\n\n    RFCStructure EXnumbers = CalledFunction.Exports[\"EXNUMBERS\"].ToStructure();\n    EXnumbers[\"NUMB1\"] = i1 + 1;\n    EXnumbers[\"NUMB2\"] = i2 + 98;\n}\n</code></pre> <p>The values from the IMPORT collection (numberstruc) are set in variables.  Then different values are added to them and are written back to the EXPORT collection (EXnumbers).</p> <p>The import parameters are passed by the calling SAP system.  The export parameters are passed back to SAP.</p>"},{"location":"documentation/rfc-server/create-rfc-functions/#call-rfc-server-functions-in-abap","title":"Call RFC Server Functions in ABAP","text":"<p>The following ABAP code is used to call the new function Z_ADD in the remote destination ERPTEST.</p> Example with Scalar ParametersTable ParametersStructure ParametersStructure Output <pre><code>REPORT z_add_test \n\nDATA result TYPE i.\nCALL FUNCTION 'Z_ADD' DESTINATION 'ERPTEST' \n   EXPORTING \n      number1 = 26 \n      number2 = 25 \n   IMPORTING \n      res = result. \n   WRITE: / 'Result: ', result.  \n</code></pre> <p>The two numbers 26 and 25 are passed, and the result 51 is passed back. </p> <pre><code>REPORT  zaddtest2 \n\nDATA res TYPE i.\nDATA numbs LIKE zaddstruc OCCURS 0 WITH HEADER LINE.\n\nnumbs-numb = '1'.\nAPPEND numbs.\nnumbs-numb = '2'.\nAPPEND numbs.\nnumbs-numb = '3'.\nAPPEND numbs.\n\nCALL FUNCTION 'Z_ADD_2' DESTINATION 'ERPConnectTEST'\n  IMPORTING\n    res     = res\n  TABLES\n    numbers = numbs.\n\nWRITE: / 'Result: ', res.\n</code></pre> <p>The two numbers 1, 2 and 3 are passed, and the result 6 is passed back. </p> <pre><code>REPORT  ZADDTEST3\n\nDATA res TYPE i.\nDATA numbs LIKE zaddstruc2.\n\nnumbs-numb1 = '1'.\nnumbs-numb2 = '2'.\n\nCALL FUNCTION 'Z_ADD_3' DESTINATION 'ERPTEST'\n  EXPORTING\n    NUMBERS       = numbs\n IMPORTING\n   RES           = res.\n\nWRITE: / 'Result: ', res.\n</code></pre> <p>The two numbers 1 and 2 are passed, and the result 3 is passed back. </p> <pre><code>REPORT  ZADDTEST4                               .\n                            .\nDATA numbs LIKE zaddstruc2.\nDATA exnumbers like zaddstruc2.\n\nnumbs-numb1 = '1'.\nnumbs-numb2 = '2'.\n\nCALL FUNCTION 'Z_ADD_4' DESTINATION 'ERPTEST'\n  EXPORTING\n    NUMBERS       = numbs\n   IMPORTING\n   EXNUMBERS      = exnumbers.\n\nWRITE: / 'First result is (added 1): ', exnumbers-numb1 .\nWRITE: / 'Second result is (added 98): ', exnumbers-numb2 .\n</code></pre> <p>The two numbers 1 and 2 are passed, and the results 2 and 100 are passed back. </p>"},{"location":"documentation/rfc-server/create-rfc-functions/#related-links","title":"Related Links","text":"<ul> <li>Transactional RFC Server</li> <li>Calculate the length of the SAP type QUAN when setting up an RFC-Server</li> </ul>"},{"location":"documentation/rfc-server/prerequisites/","title":"Prerequisites","text":""},{"location":"documentation/rfc-server/prerequisites/#set-up-an-rfc-destination","title":"Set Up an RFC Destination","text":"<p>To enable calls from an SAP system to a subsystem, the subsystem must be known to SAP. This can be done with an RFC destination.</p> <p>An existing RFC destination is necessary for sending IDocs.</p> <ol> <li>Use the transaction SM59 to create a new RFC destination.</li> <li>Fill the following fields of the destination:  <ul> <li>Unique name of the new destination e.g., ERPTEST.</li> <li>Connection Type = T (for TCP/IP).</li> <li>Description.</li> <li>ProgramID: A unique name that the server program uses to register on the SAP gateway. </li> <li>Choose the option Registered Server Program.</li> </ul> </li> <li>Save the destination.</li> <li>To test the RFC-Destination, click the button [Test Connection] while the program is running.  If everything works well, you should see a screen like the one below: </li> </ol> <p>An example for a simple RFC server program can be found in section RFC-Server</p> <p>Note</p> <p>If the RFC Destination is set to Unicode, the property IsUnicode of the RFCServer object must be set to true.</p>"},{"location":"documentation/rfc-server/sap-connection-with-sso-and-snc/","title":"SSO and SNC","text":"<p>The RFCServer class supports SAP connection with SSO and SNC. The RFCServer class works similarly to the R3Connection class, see ERPConnect with SSO with SNC.</p> <p>Note</p> <p>Note the prerequisites described in SSO with SNC - Prerequisites beschrieben.</p>"},{"location":"documentation/rfc-server/sap-connection-with-sso-and-snc/#sap-connection-with-sso-and-snc","title":"SAP Connection with SSO and SNC","text":"<p>The RFCServer class provides the property SNCSettings.  Assign the partner name in the SAP transaction SM59 (e.g. p:RFCServerSNC@THEOBALD) to the property OwnName of SNCSettings.</p> SSO and SNC<pre><code>RFCServer rfcServer = new RFCServer();\nrfcServer.GatewayHost = \"sap-erp-as05.example.com\";\nrfcServer.GatewayService = \"sapgw00\";\nrfcServer.ProgramID = \"SNCTEST\";\nrfcServer.SNCSettings.Enabled = true;\nrfcServer.SNCSettings.Mechanism = SNCMechanism.Kerberos5;\nrfcServer.SNCSettings.OwnName = \"p:RFCServerSNC@THEOBALD\";\n\nrfcServer.Protocol = ClientProtocol.RFC;\nrfcServer.CanReceiveIdocs = true;\nrfcServer.IsUnicode = true;\n</code></pre> <p></p> <p>Note</p> <p>If SNC is used with Kerberos and Active Directory, the Active Directory account used for the RFC server must have a Service Principal Name corresponding to the partner name in SAP.</p> <p></p>"},{"location":"documentation/sap-connection/","title":"SAP Connection","text":"<p>This section contains information on how to connect to SAP systems.</p>"},{"location":"documentation/sap-connection/#prerequisites","title":"Prerequisites","text":"<p>ERPConnect requires an RFC library, see SAP Libraries.</p> <p>The RFC API (Remote Function Call) enables an RFC connection between an SAP system and an external system that can communicate with SAP as a client or server. The RFC API has two versions:</p> <ul> <li>classic RFC-API (classic RFC library).</li> <li>Netweaver-RFC-API (Netweaver RFC library). </li> </ul> <p>For more information on the RFC libraries, see SAP Help - RFC API: Classical &amp; NetWeaver.</p>"},{"location":"documentation/sap-connection/log-on-to-sap/","title":"Connect to SAP","text":"<p>ERPConnect supports the following connection methods to SAP systems:</p> <ul> <li>Connect to a single application server.</li> <li>Connect to a message server (Load Balancing).</li> <li>Connect to a single application server or public or private cloud instance via RFC over WebSocket.</li> </ul>"},{"location":"documentation/sap-connection/log-on-to-sap/#input-parameters","title":"Input Parameters","text":"<p>The connection methods require the following input:</p> Single Application Server Load Balancing RFC over WebSocket Name of the user (UserName property) Name of the user (UserName property) Name of the user (UserName property) Password (Password property) Password (Password property) Password (Password property) Language (Language property) Language (Language property) Language (Language property) Client (Client property) Client (Client property) Client (Client property) Name of the application server (Host property) Name of the message server (MessageServer property) WebSocket host (WebSocketHost property) System number between 0 and 99 (SystemNumber property) System ID (SID property e.g., MBS) WebSocket port (WebSocketPort property) Name of the group (LogonGroup property e.g., PUBLIC) AliasUser property instead of UserName for cloud systems Various TLS settings (TlsSettings property)"},{"location":"documentation/sap-connection/log-on-to-sap/#connect-to-sap","title":"Connect to SAP","text":"<ol> <li>Add the ERPConnect.dll class library as a reference to the project.</li> <li>Create a new R3Connection object and define all input parameters.</li> <li> <p>Establish the connection using <code>Open</code>. </p> Single Server loginLoad BalancingRFC via WebSocket <pre><code>using (R3Connection con = new R3Connection())\n{\n    con.UserName = \"SAPUser\";\n    con.Password = \"SAPPassword\";\n    con.Language = \"EN\";\n    con.Client = \"800\";\n    con.Host = \"sap-erp-as05.example.com\";\n    con.SystemNumber = 00;\n    con.Protocol = ClientProtocol.NWRFC; //use ClientProtocol.RFC for classic RFC library\n\n    con.Open();\n}\n</code></pre> <pre><code>using (R3Connection con = new R3Connection())\n{\n    con.UserName = \"SAPUser\";\n    con.Password = \"SAPPassword\";\n    con.Language = \"DE\";\n    con.Client = \"800\";\n    con.MessageServer = \"sap-erp-as05.example.com\";\n    con.LogonGroup = \"PUBLIC\";\n    con.SID = \"ECC\";\n    con.Protocol = ClientProtocol.NWRFC; //use ClientProtocol.RFC for classic RFC library\n    con.UsesLoadBalancing = true;\n\n    con.Open();\n}\n</code></pre> <pre><code>using (R3Connection con = new R3Connection())\n{\n    con.UsesWebSocket = true;\n    con.WebSocketHost = \"myinstance-api.s4hana.cloud.sap\";\n    con.WebSocketPort = 443;\n    con.TlsSettings = new TlsSettings\n    {\n        TrustAll = false,\n        CryptoLibrary = @\"C:\\lib\\sapcrypto.dll\",\n        ClientPse = \"CLIENT.PSE\"\n    };\n\n    con.AliasUser = \"TESTUSER\",\n    con.Password = \"Password\",\n\n    con.Open();\n}\n</code></pre> </li> </ol>"},{"location":"documentation/sap-connection/log-on-to-sap/#encoding","title":"Encoding","text":"<p>The default encoding for an SAP connection is SAP code page 1100 (iso-8859-1). When using the NW RFC protocol you can explicitly set an encoding. This is necessary if your SAP credentials contain characters that are not part of SAP code page 1100.</p> <pre><code>con.Protocol = ClientProtocol.NWRFC; \ncon.InitialEncoding = SAPEncodingInfo.UTF16LittleEndian;\n</code></pre>"},{"location":"documentation/sap-connection/log-on-to-sap/#client-protocol","title":"Client Protocol","text":"<p>The default client protocol is the NWRFC Protocol. To use the old RFC Protocol add the following command: <pre><code>con.Protocol = ClientProtocol.RFC;\n</code></pre></p> <p>Tip</p> <p>If you use the constructor of the R3Connection class to provide the login properties, you can save lines. Example: <code>R3Connection con = new R3Connection(\"SAPServer\",00,\"SAPUser\",\"Password\",\"EN\",\"800\");</code>.</p> <p>Note</p> <p>For more information on authentication, see SSO with Log On Tickets and SSO with SNC.</p>"},{"location":"documentation/sap-connection/log-on-to-sap/#connect-via-router","title":"Connect via Router","text":"<p>When accessing an SAP system via a Router, the router string must be set before the host name or the name of the message server. For more information on route strings, see SAP Help- Route String Entry for SAProuter.</p> Connect to SAP via Router<pre><code>using (R3Connection con = new R3Connection())\n{\n    con.UserName = \"SAPUser\";\n    con.Password = \"SAPPassword\";\n    con.Language = \"DE\";\n    con.Client = \"800\";\n    con.Host = \"SAPServer\";\n    con.SAProuterString = \"/H/SAProuter\";\n    con.SystemNumber = 00;\n    con.Protocol = ClientProtocol.NWRFC;\n\n    con.Open();\n}\n</code></pre>"},{"location":"documentation/sap-connection/log-on-to-sap/#related-links","title":"Related Links","text":"<ul> <li>SSO with Log On Tickets.</li> <li>SSO with SNC.</li> <li>Implement a connection pool</li> </ul>"},{"location":"documentation/sap-connection/sso-with-log-on-tickets/","title":"SSO with Log On Tickets","text":"<p>As of ERPConnect version 1.6 SSO scenarios are supported. There are several methods to get an SSO Ticket depending on the SAP Infrastructure in the company. </p> <p>Note</p> <p>To use SSO the SAP system must be configured as described in SAP Help - Single Sign-On Configuration.</p>"},{"location":"documentation/sap-connection/sso-with-log-on-tickets/#logon-with-sso-tickets","title":"Logon with SSO-Tickets","text":""},{"location":"documentation/sap-connection/sso-with-log-on-tickets/#create-an-sso-ticket","title":"Create an SSO-Ticket","text":"<p>To create an SSO ticket the R3Connection class provides the method <code>GetSSOTicket</code>.  All logon data must be provided once to create the ticket as shown in the code below.</p> Create SSO Ticket<pre><code>using(ERPConnect.R3Connection cont = new ERPConnect.R3Connection())\n{\n    cont.Host = \"sap-erp-as05.example.com\";\n    cont.SystemNumber = 7;\n    cont.Client = \"800\";\n    cont.Language = \"DE\";\n    cont.UserName = \"alice\";\n    cont.Password = \"pw\";\n\n    string ssoticket = cont.GetSSOTicket();\n}\n</code></pre>"},{"location":"documentation/sap-connection/sso-with-log-on-tickets/#logon","title":"Logon","text":"<p>If there is a ticket available, you can establish the connection without user credentials:</p> Connect to SAP via SSO Ticket<pre><code>using (ERPConnect.R3Connection conts = new ERPConnect.R3Connection())\n{\n    conts.Host = \"sap-erp-as05.example.com\";\n    conts.SystemNumber = 7;\n    conts.Client = \"800\";\n    conts.Language = \"EN\";\n    conts.LogonTicket = ssoticket;\n\n    conts.Open();\n}\n</code></pre> <p>For information on how to login to SAP using the cookie from the SAP Portal Ticketissuer, refer to Login to SAP with an SSO Logonticket.</p>"},{"location":"documentation/sap-connection/sso-with-log-on-tickets/#related-links","title":"Related Links","text":"<ul> <li>Login to SAP with an SSO Logonticket from the SAP Portal Ticketissuer</li> <li>SAP Help - Single Sign-On Configuration</li> <li>SSO with SNC</li> </ul>"},{"location":"documentation/sap-connection/sso-with-snc/","title":"SSO with SNC","text":"<p>Secure Network Communication (SNC) enables authentication and transport encryption between SAP systems and between SAP systems and third-party tools like Xtract Universal and Board Connector.  For more information on SNC, see SAP Documentation: SNC.</p> <p>When using SNC you can choose between the NTLM or the Kerberos5 mechanism. </p>"},{"location":"documentation/sap-connection/sso-with-snc/#prerequisites","title":"Prerequisites","text":"<p>The following DLLs from SAP need to be present in the <code>%SYSTEMROOT%\\System32</code> directory of your system:</p> <ul> <li> <p>For 32-bit:</p> <ul> <li>NTLM: gssntlm.dll</li> <li>Kerberos: gsskrb5.dll</li> </ul> </li> <li> <p>For 64-bit x86:</p> <ul> <li>NTLM:  gx64ntlm.dll</li> <li>Kerberos: gx64krb5.dll</li> </ul> </li> </ul> <p>The DLLs are available via the SNOTE 2115486. </p> <p>When using Kerberos authentication, apply the Kerberos SNC settings as described in the SAP Help - Single Sign-On with Microsoft Kerberos SSP to your SAP system. </p> <p>Note</p> <p>It is recommended to test the connection between SAP and the client before continuing.</p>"},{"location":"documentation/sap-connection/sso-with-snc/#snc-in-erpconnect","title":"SNC in ERPConnect","text":"<p>The R3Connection object automatically determines the needed SNC DLL based on the settings of SNCMechanism.  With the SNCLibraryPath property you can specify the path to the SNC DLL manually.  In this case the automatic detection of the DLL is disabled and the setting for SNCMechanism are ignored.</p> <p>If you specify the SNCMechanism, you can choose between the NTLM and the Kerberos mechanism. If the Kerberos authentication is not possible, NTLM is used automatically.</p> <p>If you do not want to use the SNC properties to create a connection, set SNCEnabled to false.  It disables all settings without changing the other SNC parameter. </p> <p>The following example codes show how to pass the necessary parameters for an SNC connection to an R3Connection object.</p> SNC MechanismIndividual SNC DLL path <pre><code>using (R3Connection con = new R3Connection())\n{\n    con.Host = \"sap-erp-as05.example.com\";\n    con.SystemNumber = 7;\n    con.Client = \"800\";\n    con.Language = \"DE\";\n    con.SNCSettings.Enabled = true;\n    con.SNCSettings.PartnerName = \"p:SAPServiceNSP@THEOBALD\";\n    con.SNCSettings.Mechanism = SNCMechanism.NTLM;\n    con.SNCSettings.QualityOfProtection = SNCQualityOfProtection.Maximum;\n\n    con.Open();\n    // define your application\n}\n</code></pre> <pre><code>using (R3Connection con = new R3Connection())\n{\n    con.Host = \"sap-erp-as05.example.com\";\n    con.SystemNumber = 7;\n    con.Client = \"800\";\n    con.Language = \"DE\";\n    con.SNCSettings.Enabled = true;\n    con.SNCSettings.PartnerName = \"p:SAPServiceNSP@THEOBALD\";\n    con.SNCSettings.LibraryPath = @\"C:\\Windows\\SysWOW64\\sncgss32.dll\";\n    con.SNCSettings.QualityOfProtection = SNCQualityOfProtection.Maximum;\n\n    con.Open();\n    // define your application\n}\n</code></pre> <p>Note</p> <p>As of ERP Connect version 4.2.3 you can set a security level with the property QualityOfProtection.</p>"},{"location":"documentation/sap-connection/sso-with-snc/#ntlm","title":"NTLM","text":"<p>NTLM (abbreviation for NT LAN Manager) is an authentication procedure for computer networks.  NTLM performs the SSO authentication via a challenge-response authentication between the client and the server. </p> <p>For more information on NTLM, see Microsoft Documentation - NTLM.</p>"},{"location":"documentation/sap-connection/sso-with-snc/#kerberos","title":"Kerberos","text":"<p>The Kerberos method uses a Kerberos server to authenticate the client.  The server creates so-called tickets and sends them to the client.  The client authenticates itself with this ticket to the server.</p> <p>For more information on Kerberos, see Microsoft Documentation - Kerberos Authentication.</p>"},{"location":"documentation/sap-connection/sso-with-snc/#double-hop-problem","title":"Double Hop Problem","text":"<p>Double hop describes the passing of authentication information across two or more computers (hops). For technical reasons NTLM only works with one hop.  For security reasons Kerberos transmits authentication data only in one hop by default, but it can be configured to send data over two or more hops. Examples:</p> Xtract PPV Server &amp; PowerPivot on the same machineXtract PPV Server &amp; PowerPivot on different machines <p>If you use Xtract PPV as the consumer of the SAP data, it has to run on the same computer that Xtract PPV Server and PowerPivot run on.  The domain controller and the SAP system can run on different computer. In this case you can also use NTML and Kerberos.</p> <p>If you use Xtract PPV as the comsumer for the SAP data and the Xtract PPV Server and PowerPivot run on different computers, you have  to use Kerberos which can be configured to handle the Double Hop Problem. For more information on the Kerberos configuration, see Microsoft Techcommunity - Understanding Kerberos Double Hop.</p> <p>For more information on the SSO configuration, see SAP Help - Single Sign-On Configuration</p>"},{"location":"documentation/sap-connection/sso-with-snc/#related-links","title":"Related Links","text":"<ul> <li>Knowledge Base Article - SNC/SSO User Rights.</li> <li>SAP Help - Secure Network Communications (SNC).</li> <li>SAP Help - Single Sign-On</li> </ul>"},{"location":"documentation/table/","title":"Tables","text":"<p>This section shows how to use the ReadTable class. A recurrent task when working with SAP and .NET applications is to read directly from tables of the SAP system.  The ReadTable class enables access to that data.</p> <p>Note</p> <p>The RFC_READ_TABLE function module for table extractions is not suitable for mass data extraction, see Restrictions.</p>"},{"location":"documentation/table/#restrictions","title":"Restrictions","text":"<p>When extracting tables from older SAP releases you may encounter several restrictions when using the SAP standard function module (RFC_READ_TABLE):</p> <ul> <li>The overall length of all columns to be extracted must not exceed 512 bytes.</li> <li>It is not possible to extract data from tables that contain one or more columns of the data type f (FLTP, floating point), DEC (decimal, e.g. for percentage) or x (RAW, LRAW).</li> <li>Poor extraction performance with larger tables.</li> </ul> <p>Warning! Error while converting value '*.0' of row 1530, column 3</p> <p>The SAP standard module RFC_READ_TABLE for table extraction can only extract the ABAP data type DEC to a limited extent. This leads to the mentioned example error during extraction.</p>"},{"location":"documentation/table/data-type-mapping/","title":"Data Type Mapping","text":"<p>The following table shows the data type mapping between ABAP / RFC and .NET.</p> ABAP ABAP Dictionary ERPConnect .NET Remarks b INT1 RFCTYPE INT1 System Byte s INT2, PREC RFCTYPE INT2 System Int16 i INT4 RFCTYPE INT System Int32 p DEC, CURR, QUAN RFCTYPE BCD System Decimal Max. supported length is 28 digits decfloat16 DF16_DEC, DF16_RAW, DF16_SCL RFCTYPE BYTE System Byte[] No ReadTable support decfloat34 DF34_DEC, DF34_RAW, DF34_SCL RFCTYPE BYTE System Byte[] No ReadTable support f FLTP RFCTYPE FLOAT System Double c CUKY, UNIT, CHAR, LCHR, CLNT, LANG RFCTYPE CHAR System String string STRING RFCTYPE STRING System String No ReadTable support n NUMC, ACCP RFCTYPE NUM System String Only characters 0_9 ACCP format is YYYYMM d DATS RFCTYPE DATE System String Format is YYYYMM t TIMS RFCTYPE TIME System String Format is HHMMSS x RAW, LRAW RFCTYPE BYTE System Byte[] xstring RAWSTRING RFCTYPE XSTRING System Byte[] No ReadTable support"},{"location":"documentation/table/read-table-class/","title":"Read Tables","text":"<p>The following sample shows how to use the ReadTable class to read data from an SAP table and how to process the ADO.NET result table object. </p>"},{"location":"documentation/table/read-table-class/#read-data-from-tables","title":"Read Data From Tables","text":"<p>Follow the steps below to read tables from SAP:</p> <ol> <li>Connect to the SAP system using <code>R3Connection</code>.</li> <li>Create a table object using <code>ReadTable()</code>.</li> <li>Specify the name of the SAP table using <code>TableName</code>.</li> <li>Specify the columns you want to read using <code>AddField()</code>.</li> <li>Optional: Specify additional parameters, e.g., WHERE Clause (<code>WhereClause</code> or maximum number of rows <code>RowCount</code>).</li> <li>Read the SAP table using <code>Run()</code>.</li> <li>Access the table using the <code>Result</code> attribute.</li> </ol> Table MAKT<pre><code>using System;\nusing System.Data;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\n// Open the connection to SAP\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nvar table = new ReadTable(connection)\n{\n    WhereClause = \"SPRAS = 'EN'\",\n    TableName = \"MAKT\",\n    RowCount = 10\n};\n\n// Select columns to read\ntable.AddField(\"MATNR\");\ntable.AddField(\"MAKTX\");\n\ntable.Run();\n\nDataTable result = table.Result;\nfor (int i = 0; i &lt; result.Rows.Count; i++)\n{\n    Console.WriteLine($\"{result.Rows[i][\"MATNR\"]} {result.Rows[i][\"MAKTX\"]}\");\n}\n\nConsole.ReadLine();\n</code></pre> <p>Output: <pre><code>000000000000000023 Pawan Kalyan_08\n000000000000000038 Test US colleagues upd4\n000000000000000043 English Check 25_01\n000000000000000058 Ventilation, complete build\n000000000000000059 Filter Ereteam\n000000000000000068 a portable 1 ton crane\n000000000000000078 Component Full Repair Service ...\n000000000000000088 AS-100 T-shirt XL\n000000000000000089 AS-100 T-shirt\n000000000000000098 PCB Subassembly\n</code></pre></p>"},{"location":"documentation/table/read-table-class/#related-links","title":"Related Links","text":"<ul> <li>Samples: Transfer data packets with ReadTable class</li> <li>Samples: Get meta data of a table</li> <li>Samples: Get CostCenter hierarchies</li> </ul>"},{"location":"documentation/transactions/","title":"Transactions","text":"<p>This section shows how to use the Transaction class to execute SAP transactions in the foreground as well as in a background process (Batch Input).</p> <p>When executing transactions in a background process, mass data can be processed and transferred to the SAP system.  This technique is often used if no suitable BAPI exists.</p> <p>For more information on SAP transactions, see SAP Documentation: Using Transaction Codes.</p>"},{"location":"documentation/transactions/execute-transactions/","title":"Execute Transactions","text":"<p>The following sample application shows how to use the Transaction class to execute an SAP transaction.</p>"},{"location":"documentation/transactions/execute-transactions/#execute-sap-transactions","title":"Execute SAP Transactions","text":"<p>Follow the steps below to run SAP transactions from ERPConnect:</p> <ol> <li>Connect to the SAP system using <code>R3Connection</code>. Set the <code>UseGui</code> property to true. </li> <li>Create a transaction object using <code>Transaction()</code>.</li> <li>Specify the SAP transaction code using <code>TCode</code>.</li> <li>Optional: add batch steps using <code>AddStep</code>.</li> <li>Launch the SAP GUI and execute the SAP transaction using <code>Execute</code>.</li> </ol> <p>Tip</p> <p>The installation package of ERPConnect includes the Transaction-Recorder tool. This tool records transactions and implements them to code, see Transaction-Recorder.</p> <p>The following sample code executes the SAP transaction MMBE (stock overview):</p> Execute SAP Transaction MMBE<pre><code>using System;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n    UseGui = true,\n};\n\nconnection.Open();\n\nConsole.Write(\"Material: \");\nstring material = Console.ReadLine();\n\nConsole.Write(\"Plant: \");\nstring plant = Console.ReadLine();\n\nvar transaction = new Transaction(connection)\n{\n    ExecutionMode = TransactionDialogMode.ShowAll,\n    TCode = \"MMBE\"\n};\n\ntransaction.AddStepSetNewDynpro(\"RMMMBEST\", \"1000\");\ntransaction.AddStepSetOKCode(\"ONLI\");\ntransaction.AddStepSetCursor(\"MS_WERKS-LOW\");\ntransaction.AddStepSetField(\"MS_MATNR-LOW\", material);\ntransaction.AddStepSetField(\"MS_WERKS-LOW\", plant);\n\n// run\ntransaction.Execute();\n</code></pre> <p>Input: <pre><code>Material: 100-100\nPlant: 1000\n</code></pre></p> <p>Output:</p> <p></p>"},{"location":"documentation/transactions/execute-transactions/#related-links","title":"Related Links","text":"<ul> <li>Samples: Access Stock Overview using Batch Input</li> <li>Samples: Create New Customers using Batch Input</li> <li>Samples: Create Purchase Orders using Batch Input and Background Processing</li> </ul>"},{"location":"documentation/transactions/transaction-recorder/","title":"Templates","text":"<p>The TransactionRecorder records SAP transactions and generates C# or VB code templates for the transactions.</p>"},{"location":"documentation/transactions/transaction-recorder/#create-templates","title":"Create Templates","text":"<ol> <li>Run the TransactionRecorder.exe in the ERPConnect directory <code>C:\\Program Files\\ERPConnect</code> to start the TransactionRecorder.</li> <li>Enter the transaction code you want to record in the text field Transaction Code for recording.</li> <li>Choose C# or VB as your target language for the generated code.</li> <li>Click [Generate Now] to acccess your SAP system. </li> <li>The window \"SAP Login\" opens. Enter your SAP credentials and click [OK].</li> <li>If prompted, allow acces to SAP. Your SAP GUI opens and executes the transaction code.</li> <li>Finish your transaction in SAP.  Once the transaction is finished, the code is generated and displayed in the Transaction-Recorder. </li> <li>Use [Ctrl+C] and [Ctrl+V] to copy the code to your program via the clipboard. </li> </ol>"},{"location":"samples/abap-interpreter/","title":"Create an ABAP Interpreter","text":"<p>The following sample shows how to create a simple ABAP interpreter that executes a dynamic SQL statement.</p>"},{"location":"samples/abap-interpreter/#create-an-abap-interpreter","title":"Create an ABAP Interpreter","text":"<p>Follow the steps below to create an ABAP interpreter:</p> <ol> <li>Connect to the SAP system using <code>R3Connection</code>.</li> <li>Add a new line of code to the dynamic report using <code>AddCodeLine</code>.</li> <li>Execute the report using <code>Execute</code>.</li> <li>Read the result set (regarding the ABAP list) using <code>GetResultLine</code>.</li> </ol>"},{"location":"samples/abap-interpreter/#create-an-abap-interpreter_1","title":"Create an ABAP Interpreter","text":"<p>The following sample shows how to create a simple ABAP interpreter that executes a dynamic SQL statement.</p> ABAP Interpreter<pre><code>using System;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\n// Open the connection to SAP\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nconst string code =\n    \"\"\"\n    REPORT ztestreport NO STANDARD PAGE HEADING.\n\n    TABLES kna1.\n\n    DATA c TYPE i.\n\n    SELECT COUNT(*) INTO c FROM kna1.\n\n    WRITE: /'System time ', sy-timlo.\n    WRITE: /'Number of rows in KNA1: ', c.\n    \"\"\";\n\nvar abapCode = new ABAPCode\n{\n    Connection = connection\n};\n\nstring[] lines = code.Split('\\n');\nforeach (string s in lines)\n{\n    abapCode.AddCodeLine(s.Trim());\n}\n\nif (abapCode.Execute())\n{\n    for (int i = 0; i &lt; abapCode.ResultLineCount; i++)\n    {\n        Console.WriteLine(abapCode.GetResultLine(i));\n    }\n}\nelse\n{\n    Console.WriteLine($\"ABAP Error: {abapCode.LastABAPSyntaxError}\");\n}\n</code></pre> <p>Output:</p> <pre><code>System time  11:17:46\nNumber of rows in KNA1:       7.705\n</code></pre> <p></p>"},{"location":"samples/access-stock-overview-using-batch-input/","title":"Access Stock Overview using Batch Input","text":"<p>This sample shows how to execute the SAP transaction MMBE (stock overview) using the Transaction class.</p>"},{"location":"samples/access-stock-overview-using-batch-input/#about","title":"About","text":"<p>In this application the user can enter a material number and the name of a plant.  By clicking a button, the SAP GUI is launched and the transaction MMBE (stock overview) is executed to list the entered materials and plants. </p> <p></p> <p>Tip</p> <p>The installation package of ERPConnect includes the Transaction-Recorder tool. This tool records transactions and implements them to code, see Transaction-Recorder.</p>"},{"location":"samples/access-stock-overview-using-batch-input/#call-transaction-mmbe","title":"Call Transaction MMBE","text":"<p>The following sample code executes the SAP transaction MMBE (stock overview):</p> Execute SAP Transaction MMBE<pre><code>using System;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n    UseGui = true,\n};\n\nconnection.Open();\n\nConsole.Write(\"Material: \");\nstring material = Console.ReadLine();\n\nConsole.Write(\"Plant: \");\nstring plant = Console.ReadLine();\n\nvar transaction = new Transaction(connection)\n{\n    ExecutionMode = TransactionDialogMode.ShowAll,\n    TCode = \"MMBE\"\n};\n\ntransaction.AddStepSetNewDynpro(\"RMMMBEST\", \"1000\");\ntransaction.AddStepSetOKCode(\"ONLI\");\ntransaction.AddStepSetCursor(\"MS_WERKS-LOW\");\ntransaction.AddStepSetField(\"MS_MATNR-LOW\", material);\ntransaction.AddStepSetField(\"MS_WERKS-LOW\", plant);\n\n// run\ntransaction.Execute();\n</code></pre> <p>Input: <pre><code>Material: 100-100\nPlant: 1000\n</code></pre></p> <p>Output:</p> <p></p>"},{"location":"samples/authority-objects-sap-user-rights/","title":"Authorization Objects - SAP User Rights","text":""},{"location":"samples/authority-objects-sap-user-rights/#about","title":"About","text":"<p>To use Theobald Software products you need an SAP connection user with sufficient authorization in SAP. Authorizations are assigned via authorization objects in SAP. </p> <p>The authorizations in the section General authorization objects are required to establish an SAP connection with the SAP application server.  The required authorizations for each extraction type are listed in their respective section.  </p> <p>Redirect this article to your SAP Basis administrators to get the relevant authorization objects for your SAP connection user.  </p>"},{"location":"samples/authority-objects-sap-user-rights/#sap-authorization-profiles","title":"SAP Authorization Profiles","text":"<p>Theobald Software collected and combined the necessary authorizations for all extraction types into corresponding SAP roles.  You can download the SAP profiles and upload them to your SAP system:</p> Component / Extraction Type SAP Role File General authorization objects ZXTGENERAL.SAP BAPI ZXTBAPI.SAP BW Cube ZXTQUERY.SAP Query ZXTQUERY.SAP Table ZXTABLE.SAP <p>Note</p> <p>If you still get an authorization error, ask SAP Basis to record an ST01-/ or SU53-authorization trace in SAP. This trace shows which authorizations objects are missing.</p>"},{"location":"samples/authority-objects-sap-user-rights/#general-authorization-objects","title":"General authorization objects","text":"<p>The following objects are required to establish a connection to SAP. </p> Necessary SAP authorizations<pre><code>S_RFC            RFC_TYPE=FUGR; RFC_NAME=SYST; ACTVT=16\nS_RFC            RFC_TYPE=FUGR; RFC_NAME=SRFC; ACTVT=16\nS_RFC            RFC_TYPE=FUGR; RFC_NAME=RFC1; ACTVT=16\n</code></pre> <p>Download the corresponding SAP role --- SAP profile for general authorization.</p>"},{"location":"samples/authority-objects-sap-user-rights/#bapi","title":"BAPI","text":"Necessary SAP authorizations<pre><code>S_RFC            ACTVT=16; RFC_TYPE=FUGR; RFC_NAME=DDIF_FIELDINFO_GET, SDIFRUNTIME     \n</code></pre> <p>Download the corresponding SAP role --- SAP profile for BAPI Extractions.</p>"},{"location":"samples/authority-objects-sap-user-rights/#bw-cube-bw-query","title":"BW Cube / BW Query","text":"<p>Authorizations for the underlying Queries, Cubes, InfoAreas and analysis need to be assigned via: </p> <ul> <li><code>S_RS_COMP</code></li> <li><code>S_RS_COMP1</code></li> <li><code>S_RS_AUTH</code></li> </ul> Authorization objectsBICS modeDate conversion (optional) Necessary SAP authorizations<pre><code>S_RFC            RFC_TYPE=FUGR; RFC_NAME=RSOB; ACTVT=16\nS_RFC            RFC_TYPE=FUGR; RFC_NAME=RRX1; ACTVT=16\nS_TABU_NAM       ACTVT=03; TABLE=RSRREPDIR\nS_TABU_NAM       ACTVT=03; TABLE=RSZGLOBV\n</code></pre> Necessary SAP authorizations<pre><code>S_RFC            RFC_TYPE=FUGR;RFC_NAME=SYST;ACTVT=16;type=RF;name=RFCPING;\nS_RFC            RFC_TYPE=FUGR; RFC_NAME=RSOBJS_RFC_INTERFACE; ACTVT=16; type=RF;name=RSOBJS_GET_NODES;\nS_RFC            RFC_TYPE=FUGR;RFC_NAME=RSAO_CORE;ACTVT=16;type=RF;name=RSAO_BICS_SESSION_INITIALIZE\nS_RFC            RFC_TYPE=FUGR;RFC_NAME=RSBOLAP_BICS_CONSUMER;ACTVT=16;type=RF;name=BICS_CONS_CREATE\nS_RFC            RFC_TYPE=FUGR;RFC_NAME=RSBOLAP_BICS_PROVIDER;ACTVT=16;type=RF;name=BICS_PROV_OPEN;\nS_RFC            RFC_TYPE=FUGR;RFC_NAME=RSBOLAP_BICS_PROVIDER_VAR;ACTVT=16;type=RF;name=BICS_PROV_VA\nS_ADMI_FCD       S_ADMI_FCD=PADM;\n</code></pre> Necessary SAP authorizations<pre><code>S_TABU_NAM       ACTVT=03; TABLE=DD03L\n</code></pre> <p>Alternatively, you can assign the SAP role template  <code>S_RS_RREPU</code>. </p> <p>Download the corresponding SAP role --- SAP profile for BW Cube / BW Query.</p>"},{"location":"samples/authority-objects-sap-user-rights/#query","title":"Query","text":"Necessary SAP authorizations<pre><code>S_RFC            RFC_TYPE=FUGR; RFC_NAME=AQRC; ACTVT=16 \n</code></pre> <p>Download the corresponding SAP role ---  SAP profile for SAP Query.</p>"},{"location":"samples/authority-objects-sap-user-rights/#table","title":"Table","text":"Necessary SAP authorizations<pre><code>S_RFC            ACTVT=16; RFC_TYPE=FUGR; RFC_NAME=SDTX, SDIFRUNTIME, /THEO/READ_TABLE                   \nS_TABU_DIS       ACTVT=03; DICBERCLS=XXXX\nS_TABU_NAM       ACTVT=03; TABLE=DD02V, DD17S, DD27S, ENLFDIR\nS_DSAUTH         ACTVT=16;    \n</code></pre> <p>XXXX (stands for a placeholder) is the authorization group for the table. To determine, which authorization group belongs to which table, check the table TDDAT - Maintenance Areas for Tables.  If the table is not listed, the authorization group is &amp;NC&amp;. For authorizing specific tables use authorization object S_TABU_NAM instead of S_TABU_DIS.</p>"},{"location":"samples/authority-objects-sap-user-rights/#related-links","title":"Related Links","text":"<ul> <li>SAP  Role Administration</li> <li>SAP ONE Support Launchpad</li> </ul>"},{"location":"samples/calculate-the-length-of-the-sap-type-quan--when-setting-up-an-rfc-server/","title":"Calculate the length of the SAP type QUAN when using an RFC-Server","text":"<p>This sample shows how to calculate the length of the SAP type QUAN in .NET.</p> <p>When defining the SAP type QUAN in your RFC Server you also have to define it as a BCD (binary coded decimal) in .NET.  The length in .NET is not the same as in SAP. Every digit from SAP needs a half byte. At the end you have to round up to a complete byte. </p> <p>Example:</p> <p>4 digits: 4 * 0.5 + 0.5 = 2.5 -&gt; 3 byte Length 13 digits: 13 * 0.5 + 0.5 = 7 -&gt; 7 byte Length</p> <p>The following code converts a QUAN field in SAP with the length 13,3:</p> <pre><code>MYRFCTable.Columns.Add(\"BREIT\", 7, 3, RFCTYPE.BCD);\n</code></pre>"},{"location":"samples/call-a-bapi-bapi_employee_getdata/","title":"Read Personnel Data","text":"<p>This sample shows how to query personnel data in ERPConnect using the BAPI BAPI_EMPLOYEE_GETDATA.</p>"},{"location":"samples/call-a-bapi-bapi_employee_getdata/#about","title":"About","text":"<p>BAPI_EMPLOYEE_GETDATA is an RFC-enabled function module that should be present in every SAP system.  The depicted sample programs use the last name / personnel number of an employee as an input parameter for the BAPI. The BAPI returns the employee's personnel data in table parameters.</p>"},{"location":"samples/call-a-bapi-bapi_employee_getdata/#read-personnel-data-using-names","title":"Read Personnel Data using Names","text":"<p>Follow the steps below to call the BAPI BAPI_EMPLOYEE_GETDATA:</p> <ol> <li>Connect to the SAP system using <code>R3Connection</code>.</li> <li>Create an RFCFunction object using <code>CreateFunction</code>.</li> <li>Assign a string via user input to the import parameter LASTNAME_M.</li> <li>Execute the function module using <code>Execute</code>.</li> <li>The function module returns the table parameter PERSONAL_DATA. The table fields PERNO (personnel number), LAST_NAME (last name) and FIRSTNAME (first name) are written to the console. </li> </ol> BAPI_EMPLOYEE_GETDATA<pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\n// Create a function object\nRFCFunction func = connection.CreateFunction(\"BAPI_EMPLOYEE_GETDATA\");\nConsole.WriteLine(\"Please enter Lastname of Employee...\");\nConsole.WriteLine(\"(you can also use Wildcard Characters * ...)\");\n\n// fill the export parameter\nstring employeeName = Console.ReadLine();\nfunc.Exports[\"LASTNAME_M\"].ParamValue = employeeName;\nfunc.Exports[\"DATE\"].ParamValue = DateTime.Now.ToString(\"yyyyMMdd\");\n\ntry\n{\n    func.Execute();\n}\ncatch (ERPException e)\n{\n    Console.WriteLine(e.Message);\n    Console.ReadLine();\n    return;\n}\n\n// Output the result of the function module\nRFCTable employeeDataTable = func.Tables[\"PERSONAL_DATA\"];\nif (employeeDataTable.RowCount &gt; 0)\n{\n    for (int i = 0; i &lt; employeeDataTable.RowCount; i++)\n    {\n        Console.WriteLine(\n            employeeDataTable.Rows[i][\"PERNO\"] + \" \" +\n            employeeDataTable.Rows[i][\"LAST_NAME\"] + \" \" +\n            employeeDataTable.Rows[i][\"FIRSTNAME\"]);\n    }\n}\nelse\n{\n    Console.WriteLine(\"No Employee found\");\n}\n</code></pre> <p>Output:</p> <p></p>"},{"location":"samples/call-a-bapi-bapi_employee_getdata/#read-personnel-data-using-personnel-numbers","title":"Read Personnel Data using Personnel Numbers","text":"<p>Follow the steps below to call the BAPI BAPI_EMPLOYEE_GETDATA:</p> <ol> <li>Connect to the SAP system using <code>R3Connection</code>.</li> <li>Create an RFCFunction object using <code>CreateFunction</code>.</li> <li>Assign a string via user input to the import parameter EmployeeID.</li> <li>Execute the function module using <code>Execute</code>.</li> <li>The function module returns the table parameter ORG_ASSIGNMENT. The table fields NAME (name of the employee), POSTXT (role), ORGTXT (department) and COSTCENTER (cost center) are written to the console. </li> <li>The function module returns the table parameter COMMUNICATION. The table fields USRID_LONG (email address) is written to the console. </li> <li>The function module returns the table parameter INTERNAL_CONTROL. The table fields PHONENO1 (phone number) is written to the console. </li> </ol> BAPI_EMPLOYEE_GETDATA<pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\n// Create a function object\nRFCFunction func = connection.CreateFunction(\"BAPI_EMPLOYEE_GETDATA\");\nConsole.WriteLine(\"Please enter Employee ID: \");\n\n// fill the export parameter \nstring EmployeeID = Console.ReadLine();\nfunc.Exports[\"EMPLOYEE_ID\"].ParamValue = EmployeeID;\nfunc.Exports[\"DATE\"].ParamValue = ERPConnect.ConversionUtils.NetDate2SAPDate(System.DateTime.Now);\n\nfunc.Execute();\n\nif (func.Imports[\"RETURN\"].ToStructure()[\"MESSAGE\"].ToString().Trim() != \"\")\n{\n    Console.WriteLine(func.Imports[\"RETURN\"].ToStructure()[\"MESSAGE\"].ToString());\n    return;\n}\n\nif (func.Tables[\"ORG_ASSIGNMENT\"].RowCount &gt; 0)\n{\n    Console.WriteLine(\"Name: \" + func.Tables[\"ORG_ASSIGNMENT\"].Rows[0, \"NAME\"].ToString());\n    Console.WriteLine(\"Role: \" + func.Tables[\"ORG_ASSIGNMENT\"].Rows[0, \"POSTXT\"].ToString());\n    Console.WriteLine(\"Dept: \" + func.Tables[\"ORG_ASSIGNMENT\"].Rows[0, \"ORGTXT\"].ToString());\n    Console.WriteLine(\"Costcenter: \" + func.Tables[\"ORG_ASSIGNMENT\"].Rows[0, \"COSTCENTER\"].ToString());\n}\n\nif (func.Tables[\"COMMUNICATION\"].RowCount &gt; 0)\n{\n    Console.WriteLine(\"Email: \" + func.Tables[\"COMMUNICATION\"].Rows[0, \"USRID_LONG\"].ToString());\n}\n\n if (func.Tables[\"INTERNAL_CONTROL\"].RowCount &gt; 0)\n{\n    Console.WriteLine(\"Phone: \" + func.Tables[\"INTERNAL_CONTROL\"].Rows[0, \"PHONENO1\"].ToString());\n}\n\nConsole.ReadKey();\n</code></pre> <p>Output:</p> <p></p>"},{"location":"samples/change-batch-value-of-an-outbound-delivery/","title":"Change Batch Value of an Outbound Delivery","text":"<p>This sample shows how to change the batch values in SAP in an outbound delivery using the BAPI BAPI_OUTB_DELIVERY_CHANGE. </p>"},{"location":"samples/change-batch-value-of-an-outbound-delivery/#call-bapi_outb_delivery_change","title":"Call BAPI_OUTB_DELIVERY_CHANGE","text":"<p>The following sample code changes the batch values in SAP in an outbound delivery:</p> BAPI_OUTB_DELIVERY_CHANGE<pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\ntry\n{\n\n    // Create a function object, fill parameters and execute\n    RFCFunction f = connection.CreateFunction(\"BAPI_OUTB_DELIVERY_CHANGE\");\n\n    //Fill in values for HEADER_DATA SAP Import Structure\n    RFCStructure fHeader = f.Exports[\"HEADER_DATA\"].ToStructure();\n    fHeader[\"DELIV_NUMB\"] = \"0080016236\";\n\n    f.Exports[\"DELIVERY\"].ParamValue = \"0080016236\";\n\n    // first Batch\n    RFCTable fPosT = f.Tables[\"ITEM_DATA\"];\n    RFCStructure fPos = fPosT.AddRow();\n    fPos[\"DELIV_NUMB\"] = \"0080016236\";\n    fPos[\"DELIV_ITEM\"] = \"000010\";\n    fPos[\"MATERIAL\"] = \"100-302\";\n    fPos[\"BATCH\"] = \"EIGEN_HALB\";\n    fPos[\"HIERARITEM\"] = \"10\";\n\n    fPos[\"USEHIERITM\"] = \"1\";\n\n    fPos[\"DLV_QTY\"] = 1;\n    fPos[\"DLV_QTY_IMUNIT\"] = 1;\n\n    fPos[\"FACT_UNIT_NOM\"] = \"1\";\n    fPos[\"FACT_UNIT_DENOM\"] = \"1\";\n\n    fPos[\"SALES_UNIT\"] = \"ST\";\n\n    //Second Batch\n    fPos = fPosT.AddRow();\n    fPos[\"DELIV_NUMB\"] = \"0080016236\";\n    fPos[\"DELIV_ITEM\"] = \"000010\";\n    fPos[\"MATERIAL\"] = \"100-302\";\n    fPos[\"BATCH\"] = \"FREMD_HALB\";\n\n    fPos[\"HIERARITEM\"] = \"10\";\n\n    fPos[\"USEHIERITM\"] = \"1\";\n    fPos[\"DLV_QTY\"] = 2;\n    fPos[\"DLV_QTY_IMUNIT\"] = 2;\n\n    fPos[\"FACT_UNIT_NOM\"] = \"1\";\n    fPos[\"FACT_UNIT_DENOM\"] = \"1\";\n\n    fPos[\"SALES_UNIT\"] = \"ST\";\n\n    //Fill in values for ITEM_CONTROL Table\n    RFCTable fPosCtrlT = f.Tables[\"ITEM_CONTROL\"];\n    RFCStructure fPosCtrl = fPosCtrlT.AddRow();\n\n    fPosCtrl[\"DELIV_NUMB\"] = \"0080016236\";\n    fPosCtrl[\"DELIV_ITEM\"] = \"000010\";\n\n    fPosCtrl[\"CHG_DELQTY\"] = \"X\";\n    // Execute function\n    f.Execute();\n\n    //Create commit function object\n    RFCFunction funcCommit = r3Connection1.CreateFunction(\"BAPI_TRANSACTION_COMMIT\");\n    funcCommit.Exports[\"WAIT\"].ParamValue = \"X\";\n\n    // Execute commit function\n    funcCommit.Execute();\n}\n\ncatch (Exception e1)\n{\n    Console.WriteLine(e1.Message);\n}\n\nconnection.Close();\n</code></pre>"},{"location":"samples/change-production-order/","title":"Change Production Order","text":"<p>This sample shows how to change a production order using the function module CLOI_CHANGES_UPL_31. </p>"},{"location":"samples/change-production-order/#about","title":"About","text":"<p>This sample can be used to send changes to SAP if an external program does the planning of the productions orders.</p> <p>To change the header data you need the production order number and the field name you are going to change.  For a complete list of all fields, refer to the SAP Documentation: Function Module CLOI_CHANGES_UPL_31</p> <p>Typical applications include:</p> <ul> <li>changing the start date (Field GSTRP)</li> <li>changing the end date (Field GLTRP)</li> <li>changing the quantity (Field BDMNG) </li> <li>changing the start time (Field GSUZP) </li> <li>rescheduling the production order using the field METHOD with the value \"SCHEDULE\"</li> </ul> <p>The table CLOI_MESSAGE_LOG_EXP contains the message codes of the function module. </p>"},{"location":"samples/change-production-order/#call-cloi_changes_upl_31","title":"Call CLOI_CHANGES_UPL_31","text":"<p>The following sample code changes the start date (Field GSTRP) and the end date (Field GLTRP) of a production order. To reschedule all item data of the production order the value of the field METHOD is set to \"DISPATCH\". </p> Change Start and End DateReschedule All Item Data <pre><code>public static string ChangeProductionOrder(string AUFNR, string VORNR, string APLFL)\n {\n   string rMessage = \"\";\n\n   RFCFunction func = connection.CreateFunction(\"CLOI_CHANGES_UPL_31\");\n\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"COMMITFLG\"] = \"C\";\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"R3_VERSION\"] = \"60\";   //SAP Version\n\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"MSG_FILTER\"] = \"\";     // Show All Messages\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"MSGLOG_REQ\"] = \"X\";    //Message Return Tables  \n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"MSGOBJ_REQ\"] = \"X\";\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"ORD_REQ\"] = \"X\";\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"ORDOPR_REQ\"] = \"X\";\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"METLOG_REQ\"] = \"X\";\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"ORDSEQ_REQ\"] = \"X\";\n\n   // Change Header Data\n\n   // Change Start Time\n   RFCStructure orduRow = func.Tables[\"CLOI_ORDU_IMP\"].Rows.Add();\n   orduRow[\"AUFNR\"] = AUFNR;\n   orduRow[\"FIELD\"] = \"GSTRP\";\n   orduRow[\"VALUE\"] = \"20080815\";\n\n   //Change Finish Time\n   orduRow = func.Tables[\"CLOI_ORDU_IMP\"].Rows.Add();\n   orduRow[\"AUFNR\"] = AUFNR;\n   orduRow[\"FIELD\"] = \"GLTRP\";\n   orduRow[\"VALUE\"] = \"20080815\";\n\n   orduRow = func.Tables[\"CLOI_ORDU_IMP\"].Rows.Add();\n   orduRow[\"AUFNR\"] = AUFNR;\n   orduRow[\"FIELD\"] = \"METHOD\";\n   orduRow[\"VALUE\"] = \"SCHEDULE\";       \n\n   func.Execute();\n\n   if (func.Tables[\"CLOI_MESSAGE_LOG_EXP\"].RowCount &gt; 0)\n    {\n      RFCStructure MyMessageRow = func.Tables[\"CLOI_MESSAGE_LOG_EXP\"].Rows[0];\n      rMessage = \"MessageType: \" + MyMessageRow[3].ToString() + \n      \" Message (Please Check SE91): \" + MyMessageRow[1].ToString() + \" - \" + \n      MyMessageRow[2].ToString();\n    }\n    else\n\n    {\n    rMessage = \"No Messages found\";\n    } \n     return rMessage;\n }\n</code></pre> <pre><code>public static string ChangeProductionOrderPos(string AUFNR, string VORNR, string APLFL)\n {\n   string rMessage = \"\";\n\n   RFCFunction func = connection.CreateFunction(\"CLOI_CHANGES_UPL_31\");\n\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"COMMITFLG\"] = \"C\";\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"R3_VERSION\"] = \"60\";   //SAP Version\n\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"MSG_FILTER\"] = \"\";     // Show All Messages\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"MSGLOG_REQ\"] = \"X\";    //Message Return Tables  \n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"MSGOBJ_REQ\"] = \"X\";\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"ORD_REQ\"] = \"X\";\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"ORDOPR_REQ\"] = \"X\";\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"METLOG_REQ\"] = \"X\";\n   func.Exports[\"CLOI_IF_PAR\"].ToStructure()[\"ORDSEQ_REQ\"] = \"X\";\n\n   // Change Position Data\n\n   RFCStructure opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n\n   // Changes the work center \n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"ARBPL\";\n   opruRow[\"VALUE\"] = \"1112\";      // Note : The internal ID of workcenter\n\n   //Earliest date when execution of operation can finish\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"FSEDD\";\n   opruRow[\"VALUE\"] = \"20080812\";\n\n   //Earliest time when execution of operation can finish\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"FSEDZ\";\n   opruRow[\"VALUE\"] = \"080000\";\n\n   //Earliest date when execution of operation can start\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"FSAVD\";\n            opruRow[\"VALUE\"] = \"20080812\";\n\n   //Earliest time when execution of operation can start\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"FSAVZ\";\n   opruRow[\"VALUE\"] = \"080000\";\n\n   //Earliest date when processing of operation can start\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"FSSBD\";\n   opruRow[\"VALUE\"] = \"20080812\";\n\n   //Earliest time when processing of operation can start\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"FSSBZ\";\n   opruRow[\"VALUE\"] = \"080000\";\n\n   //Earliest date when teardown of operation can start\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"FSSAD\";\n   opruRow[\"VALUE\"] = \"20080812\";\n\n   //Earliest time when teardown of operation can start\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"FSSAZ\";\n   opruRow[\"VALUE\"] = \"080000\";\n\n   //Latest date when execution of operation can finish\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"SSEDD\";\n   opruRow[\"VALUE\"] = \"20080813\";\n\n   //Latest time when execution of operation can finish\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"SSEDZ\";\n   opruRow[\"VALUE\"] = \"100000\";\n\n   //Latest date when execution of operation can start\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"SSAVD\";\n   opruRow[\"VALUE\"] = \"20080813\";\n\n   //Latest time when execution of operation can start\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"SSAVZ\";\n   opruRow[\"VALUE\"] = \"100000\";\n\n   //Latest date when teardown of operation can start\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"SSSAD\";\n   opruRow[\"VALUE\"] = \"20080813\";\n\n   //Latest time when teardown of operation can start\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"SSSAZ\";\n   opruRow[\"VALUE\"] = \"100000\";\n\n   //Latest date when processing of operation can start\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"SSSBD\";\n   opruRow[\"VALUE\"] = \"20080813\";\n\n   //Latest time when processing of operation can start\n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"SSSBZ\";\n   opruRow[\"VALUE\"] = \"100000\";\n\n   //Dispatches the Order. \n   opruRow = func.Tables[\"CLOI_ORD_OPRU_IMP\"].Rows.Add();\n   opruRow[\"AUFNR\"] = AUFNR;\n   opruRow[\"VORNR\"] = VORNR;\n   opruRow[\"APLFL\"] = APLFL;\n   opruRow[\"FIELD\"] = \"METHOD\";\n   opruRow[\"VALUE\"] = \"DISPATCH\";\n\n   func.Execute();\n\n   if (func.Tables[\"CLOI_MESSAGE_LOG_EXP\"].RowCount &gt; 0)\n    {\n      RFCStructure MyMessageRow = func.Tables[\"CLOI_MESSAGE_LOG_EXP\"].Rows[0];\n      rMessage = \"MessageType: \" + MyMessageRow[3].ToString() + \n      \" Message (Please Check SE91): \" + MyMessageRow[1].ToString() + \" - \" + \n      MyMessageRow[2].ToString();\n    }\n     return rMessage;\n }\n</code></pre> <p>Output:</p> <p></p> <p>Tip</p> <p>Use SAP transaction SE91 to look up all message codes. The Messagecode C7 - 071 means \"Operation has been scheduled\".</p>"},{"location":"samples/create-a-purchase-order/","title":"Create a Purchase Order","text":"<p>The following sample shows how to create a purchase order using the BAPI_PO_CREATE.</p>"},{"location":"samples/create-a-purchase-order/#call-bapi_po_create","title":"Call BAPI_PO_CREATE","text":"<p>To create a purchase order using the BAPI_PO_CREATE BAPI, follow the steps below:</p> <ol> <li>Establish a connection to the SAP system </li> <li>Create an RFC-Function object for the BAPI BAPI_PO_CREATE.</li> <li>Fill the structure PO_HEADER with the following values: <ul> <li>DOC_TYPE -&gt; Order type (NB normal order)</li> <li>PURCH_ORG -&gt; Purchasing organization</li> <li>PUR_GROUP -&gt; Purchasing group</li> <li>DOC_DATE -&gt; Date </li> <li>VENDOR -&gt; Vendor number</li> </ul> </li> <li>Define the items PLANT and PUR_MAT (material number) in the table PO_ITEMS. </li> <li>The values for the quantity (QUANTITY) and the delivery date (DELIV_DATE) must be placed in the table PO_ITEM_SHEDULES.</li> <li>Execute the BAPI and process the return messages.</li> </ol> <p>Input: <pre><code>Vendor: 0000001070\nMaterial: B-7000\nPlant: 1000\nQuantity: 10\n</code></pre></p> BAPI_PO_CREATE<pre><code>using System;\nusing ERPConnect;\n\nConsole.Write(\"Vendor: \");\nstring vendor = Console.ReadLine();\n\nConsole.Write(\"Material: \");\nstring material = Console.ReadLine();\n\nConsole.Write(\"Plant: \");\nstring plant = Console.ReadLine();\n\nConsole.Write(\"Quantity: \");\ndecimal quantity = decimal.Parse(Console.ReadLine() ?? string.Empty);\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\n// Create an RFC-Function object\nRFCFunction func = connection.CreateFunction(\"BAPI_PO_CREATE\");\n\n// Fill header structure\nRFCStructure header = func.Exports[\"PO_HEADER\"].ToStructure();\nheader[\"DOC_TYPE\"] = \"NB\";\nheader[\"PURCH_ORG\"] = \"1000\";\nheader[\"PUR_GROUP\"] = \"010\";\nheader[\"DOC_DATE\"] = DateTime.Now.ToString(\"yyyyMMdd\");\nheader[\"VENDOR\"] = vendor;\n\n// Create an Item\nRFCTable items = func.Tables[\"PO_ITEMS\"];\nRFCStructure item = items.AddRow();\nitem[\"PO_ITEM\"] = \"1\";\nitem[\"PUR_MAT\"] = material;\nitem[\"PLANT\"] = plant;\n\n// Create and fill schedules\nRFCTable schedules = func.Tables[\"PO_ITEM_SCHEDULES\"];\nRFCStructure schedule = schedules.AddRow();\nschedule[\"PO_ITEM\"] = \"1\";\nschedule[\"DELIV_DATE\"] = DateTime.Now.ToString(\"yyyyMMdd\");\nschedule[\"QUANTITY\"] = quantity;\n\n// Execute Bapi and process return messages\nfunc.Execute();\n\nvar returnMessage = func.Tables[\"RETURN\"].Rows[0, \"MESSAGE\"].ToString();\n\nConsole.WriteLine($\"Message: {returnMessage}\");\n</code></pre> <p>Output:</p> <pre><code>Message: Standard PO created under the number 4500018292\n</code></pre> <p></p>"},{"location":"samples/create-equipment/","title":"Create Equipment","text":"<p>This sample shows how to create equipment in SAP using the BAPI BAPI_EQMT_MODIFY.</p>"},{"location":"samples/create-equipment/#about","title":"About","text":"<p>The BAI BAPI_EQMT_MODIFY can be used to create or change equipment in SAP.</p> <p>To create equipment using the BAPI BAPI_EQMT_MODIFY the equipment name (equi_master[\"EQUIPMENT\"]) must be written in uppercase. The fields EQUITYPE,INVENTORY and MANFACTURE are optional.</p>"},{"location":"samples/create-equipment/#call-bapi_eqmt_modify","title":"Call BAPI_EQMT_MODIFY","text":"<p>The following sample code creates equipment in SAP using the BAPI BAPI_EQMT_MODIFY:</p> BAPI_EQMT_MODIFY<pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nRFCFunction func = connection.CreateFunction(\"BAPI_EQMT_CREATE\");\n\nRFCStructure equi_master = func.Exports[\"EQUIMASTER\"].ToStructure();\n\n    equi_master[\"EQUIPMENT\"] = \"TESTEQUIP04\"; //  Equipment\n    equi_master[\"EQUICATGRY\"] = \"M\"; //EquipmentCategory\n    equi_master[\"EQUITYPE\"] = \"5000\"; //ObjectType     optional\n    equi_master[\"INVENTORY\"] = \"123456\"; //Inventury No.  optional\n    equi_master[\"MANFACTURE\"] = \"TEST AG\"; //Manufacturer   optional\n\nRFCStructure equi_text = func.Exports[\"EQUITEXT\"].ToStructure();\n\n    equi_text[\"EQUIDESCR\"] = \"TestDescription\"; //Description\n\nRFCStructure equi_location = func.Exports[\"EQUILOCATION\"].ToStructure();\n\n    equi_location[\"MAINTPLANT\"] = \"1000\"; //Plant\n\nfunc.Execute();\n\n\n// ReturnMessage from BAPI\nRFCStructure funcRet = func.Imports[\"RETURN\"].ToStructure();\nif (funcRet[\"Type\"].ToString() == \"S\")\n    Console.WriteLine(\"Equipment was created succesfully\");\nelse\nConsole.WriteLine (funcRet[\"MESSAGE\"].ToString());\nConsole.WriteLine(\"Please Press Enter to continue\");\n\nConsole.ReadLine();\n</code></pre>"},{"location":"samples/create-functional-location/","title":"Create Functional Location","text":"<p>This sample shows how to create a Functional Location in SAP using the BAPI BAPI_FUNCLOC_CREATE. </p>"},{"location":"samples/create-functional-location/#about","title":"About","text":"<p>The Functional Location (External Number) must match the structure defined in the exporting parameter STRIND of BAPI_FUNCLOC_CREATE.  You can export the default value for the superior functional location under data_specific - SUPFLOC.</p> <p>Tip</p> <p>To change a Functional Location replace the function module \"BAPI_FUNCLOC_CREATE\" with the function module \"BAPI_FUNCLOC_CHANGE\".</p>"},{"location":"samples/create-functional-location/#call-bapi_funcloc_create","title":"Call BAPI_FUNCLOC_CREATE","text":"<p>The following sample code calls the BAPI BAPI_FUNCLOC_CREATE to create a Functional Location in SAP:</p> BAPI_FUNCLOC_CREATE<pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nRFCFunction func = connection.CreateFunction(\"BAPI_FUNCLOC_CREATE\");\nRFCStructure data_specific = func.Exports[\"DATA_SPECIFIC\"].ToStructure();\n\n    data_specific[\"STRIND\"] = \"A\"; //StrIndicator\n    data_specific[\"CATEGORY\"] = \"M\"; //Category\n    data_specific[\"SUPFLOC\"] = \"\"; //Superior Function Location\n\nRFCStructure data_general = func.Exports[\"DATA_GENERAL\"].ToStructure();\n\n    data_general[\"DESCRIPT\"] = \"My New Location2\"; //Description\n    data_general[\"MAINTPLANT\"] = \"1000\"; //Mainplant        \n\nfunc.Exports[\"LABELING_SYSTEM\"].ParamValue = \"A\"; //Labeling System\nfunc.Exports[\"EXTERNAL_NUMBER\"].ParamValue = \"1111-111-AA-15\";  //Functional Location\n\nfunc.Execute();\n\nRFCFunction funcCommit = connection.CreateFunction(\"BAPI_TRANSACTION_COMMIT\");\n\nfuncCommit.Exports[\"WAIT\"].ParamValue  = \"X\"; \nfuncCommit.Execute();\n\n // ReturnMessage from BAPI\nRFCStructure funcRet = func.Imports[\"RETURN\"].ToStructure();\n//strmessage = funcRet[\"MESSAGE\"].ToString();\n\nConsole.WriteLine (funcRet[\"MESSAGE\"].ToString());\nConsole.WriteLine (\"Please press a Key to continue\")\n\nConsole.ReadLine();\n</code></pre>"},{"location":"samples/create-new-customers-using-batch-input/","title":"Create New Customers using Batch Input","text":"<p>This sample shows how to use batch input with SAP transaction XD01 in ERPConnect to create new customers in SAP.</p> <p>Note</p> <p>Using the BAPI BAPI_CUSTOMER_CREATEFROMDATA1 is not recommended because it does not support some fields that are needed to create valid customer master data.</p>"},{"location":"samples/create-new-customers-using-batch-input/#create-a-code-template","title":"Create a Code Template","text":"<p>Use the transaction recorder tool located in the installation directory of ERPConnect (<code>C:\\Program Files\\ERPConnect</code>) to create a code template for the SAP transaction XD01:</p> <p></p>"},{"location":"samples/create-new-customers-using-batch-input/#call-transaction-xd01","title":"Call Transaction XD01","text":"<p>The following sample code calls SAP transaction XD01 to create new customers in SAP:</p> Transaction XD01<pre><code>using System;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nTransaction trans = new Transaction();\n\ntrans.Connection=connection;\ntrans.TCode=\"XD01\"; // Transaction XD01\n\n\n// First Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0100\");\ntrans.AddStepSetOKCode(\"/00\");\ntrans.AddStepSetField(\"RF02D-BUKRS\",\"1000\"); // Company Code\ntrans.AddStepSetField(\"RF02D-VKORG\",\"1000\"); // Sales Org\ntrans.AddStepSetField(\"RF02D-VTWEG\",\"10\"); // Distribution Channel\ntrans.AddStepSetField(\"RF02D-SPART\",\"00\"); // Division\ntrans.AddStepSetField(\"RF02D-KTOKD\",\"ZARG\"); // Account Group\n\n//Main Address\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0110\");\ntrans.AddStepSetOKCode(\"/00\");\ntrans.AddStepSetField(\"KNA1-NAME1\",\"C. Pimpelhuber\"); // Name 1\ntrans.AddStepSetField(\"KNA1-SORTL\",\"PIMPELH\"); // Search Term\ntrans.AddStepSetField(\"KNA1-ORT01\",\"Stuttgart\"); // City\ntrans.AddStepSetField(\"KNA1-STRAS\",\"Olgastr. 20\"); // City\ntrans.AddStepSetField(\"KNA1-PSTLZ\",\"70182\"); // Zip-Code\ntrans.AddStepSetField(\"KNA1-LAND1\",\"DE\"); // Country\ntrans.AddStepSetField(\"KNA1-SPRAS\",\"DE\"); // Language\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0120\");\ntrans.AddStepSetOKCode(\"/00\");\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0125\");\ntrans.AddStepSetOKCode(\"/00\");\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0130\");\ntrans.AddStepSetOKCode(\"=ENTR\");\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0340\");\ntrans.AddStepSetOKCode(\"=ENTR\");\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0370\");\ntrans.AddStepSetOKCode(\"=ENTR\");\ntrans.AddStepSetField(\"KNA1-CIVVE\",\"X\");\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0360\");\ntrans.AddStepSetOKCode(\"=ENTR\");\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0210\");\ntrans.AddStepSetOKCode(\"/00\");\ntrans.AddStepSetField(\"KNB1-AKONT\",\"140000\"); // Account\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0215\");\ntrans.AddStepSetOKCode(\"/00\");\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0220\");\ntrans.AddStepSetOKCode(\"/00\");\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0230\");\ntrans.AddStepSetOKCode(\"/00\");\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0310\");\ntrans.AddStepSetOKCode(\"/00\");\ntrans.AddStepSetField(\"KNVV-KALKS\",\"1\"); // Pricing Procedure\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0315\");\ntrans.AddStepSetOKCode(\"/00\");\ntrans.AddStepSetField(\"KNVV-VSBED\",\"01\"); // Shipping condition\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"0320\");\ntrans.AddStepSetOKCode(\"/00\");\n\n//Next Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"1350\");\ntrans.AddStepSetOKCode(\"=ENTR\");\ntrans.AddStepSetField(\"KNVI-TAXKD(01)\",\"1\"); // Tax classification\n\n//Begin a new Dynpro\ntrans.AddStepSetNewDynpro(\"SAPMF02D\",\"1350\");\ntrans.AddStepSetOKCode(\"=UPDA\");\n\ntrans.Execute();\n\nforeach(ERPConnect.Utils.BatchReturn ret in trans.Returns)\n    Console.WriteLine(ret.Message);\n\nConsole.WriteLine(\"Press Enter to exit\");\nConsole.ReadLine();\n</code></pre> <p>Output:</p> <p></p>"},{"location":"samples/create-purchase-orders-using-batch-input/","title":"Create Purchase Orders using Batch Input and Background Processing","text":"<p>This sample shows how to execute the SAP transaction ME21 (create purchase order) as a background process.</p> <p>Tip</p> <p>The installation package of ERPConnect includes the Transaction-Recorder tool. This tool records transactions and implements them to code, see Transaction-Recorder.</p>"},{"location":"samples/create-purchase-orders-using-batch-input/#call-transaction-me21","title":"Call Transaction ME21","text":"Transaction ME21<pre><code>using (R3Connection con = new R3Connection(\"SAPServer\", 00, \"SAPUser\", \"Password\", \"EN\", \"800\"))\n    {\n    con.Open();\n\n    Transaction trans = new Transaction();\n    trans.Connection = con;\n    trans.TCode = \"ME21\";\n\n    //Begin a new Dynpro\n    trans.AddStepSetNewDynpro(\"SAPMM06E\", \"0100\");\n    trans.AddStepSetCursor(\"EKKO-EKGRP\");\n    trans.AddStepSetOKCode(\"/00\"); // Enter\n    trans.AddStepSetField(\"EKKO-LIFNR\", \"1070\"); // Vendor\n    trans.AddStepSetField(\"RM06E-BSART\", \"NB\"); // Order Type\n    trans.AddStepSetField(\"RM06E-BEDAT\", \"01.01.2006\"); //Purch.Date\n    trans.AddStepSetField(\"EKKO-EKORG\", \"1000\"); // Purchase Org\n    trans.AddStepSetField(\"EKKO-EKGRP\", \"010\"); // Purchase Group\n    trans.AddStepSetField(\"RM06E-LPEIN\", \"T\");\n\n    //Begin a new Dynpro\n    trans.AddStepSetNewDynpro(\"SAPMM06E\", \"0120\");\n    trans.AddStepSetCursor(\"EKPO-WERKS(01)\");\n    trans.AddStepSetOKCode(\"=BU\");\n    trans.AddStepSetField(\"EKPO-EMATN(01)\", \"B-7000\"); // Material\n    trans.AddStepSetField(\"EKPO-MENGE(01)\", \"20\"); // Quantity\n    trans.AddStepSetField(\"EKPO-WERKS(01)\", \"1000\"); // Plant\n    trans.Execute();\n\n    foreach (ERPConnect.Utils.BatchReturn br in trans.Returns)\n        MessageBox.Show(br.Message);\n    if (trans.Returns.Count == 0)\n        MessageBox.Show(\"No Messages\");\n    }\n</code></pre> <p>At the end the code loops over the Returns collection to check the BatchReturn objects that contain the return messages of the Batch Input transaction. </p>"},{"location":"samples/download-business-object-attachments/","title":"Download Business Object Attachments","text":"<p>This sample shows how to download attached files from common business objects using the SAP tables SRGBTBREL and SOOD and the function module SO_DOCUMENT_READ_API1. </p>"},{"location":"samples/download-business-object-attachments/#about","title":"About","text":"<p>As of SAP rel. 4.6 users can attach documents to all common business objects, e.g., purchase orders:</p> <p></p> <p>This sample uses the following workflow to download attachment files:</p> <ol> <li>Read the table SRGBTBREL to get all object IDs that are attached to business objects.</li> <li>Read the table SOOD to get the corresponding file names and extensions of the object IDs.</li> <li>Use SO_DOCUMENT_READ_API1 to download an attachment with a given object ID.</li> </ol> <p>Note</p> <p>The function modules BDS_CONNECTIONS_GET and BDS_DOCUMENT_GET_TABLE can not be used in this scenario. Even if BDS_CONNECTIONS_GET delivers correct document IDs, the function module BDS_DOCUMENT_GET_TABLE throws an exception (NOTHING_FOUND).</p>"},{"location":"samples/download-business-object-attachments/#get-a-list-of-all-sap-attachments","title":"Get a List of all SAP Attachments","text":""},{"location":"samples/download-business-object-attachments/#get-a-list-of-object-ids","title":"Get a List of Object IDs","text":"<p>The following sample code reads the table SRGBTBREL to obtain all document IDs attached to a business object. </p> <ul> <li>The object key is the document number, e.g., the purchase number</li> <li>The object type is the name of the business object, e.g., BUS2012 for POs or BUS2010 for RFQs). </li> </ul> <p>The function returns an array of strings each representing a key to a downloadable attachment.</p> Table SRGBTBREL<pre><code>public static string[] GetAllAttachmentKeys(R3Connection connection, \n    string ObjectType, string ObjectKey)\n{\n    ReadTable read = new ReadTable(connection);\n    read.TableName = \"SRGBTBREL\";\n    read.AddField(\"INSTID_B\");\n    read.AddCriteria(\"RELTYPE = 'ATTA'\");\n    read.AddCriteria(\"AND INSTID_A = '\" + ObjectKey + \"'\");\n    read.AddCriteria(\"AND TYPEID_A = '\" + ObjectType + \"'\");\n    read.AddCriteria(\"AND CATID_A = 'BO'\");\n    read.Run();\n\n    string[] DocIDs = new string[read.Result.Rows.Count];\n\n    for (int i = 0; i &lt; read.Result.Rows.Count; i++)\n    {\n        DocIDs[i] = read.Result.Rows[i][\"INSTID_B\"].ToString();\n    }\n\n    return DocIDs;\n}\n</code></pre>"},{"location":"samples/download-business-object-attachments/#get-a-list-of-file-names","title":"Get a List of File Names","text":"<p>The following sample code reads the table SOOD to get the file name of each attachment.</p> <ul> <li>The primary key of the table entry is defined by parts of the document IDs provided by the function <code>GetAllAttachmentKeys</code> above. </li> <li>The file name of the attachment can be created by concatenating OBJDES and FILE_EXT.</li> </ul> Table SOOD<pre><code>public static string GetFileName(R3Connection connection, string DocID)\n{\n    string OBJTP = DocID.Substring(17, 3);\n    string OBJYR = DocID.Substring(20, 2);\n    string OBJNO = DocID.Substring(22, 12);\n    ReadTable readsood = new ReadTable(connection);\n    readsood.TableName = \"SOOD\";\n    readsood.AddField(\"OBJDES\");\n    readsood.AddField(\"FILE_EXT\");\n    readsood.AddCriteria(\"OBJTP = '\" + OBJTP + \"'\");\n    readsood.AddCriteria(\"AND OBJYR = '\" + OBJYR + \"'\");\n    readsood.AddCriteria(\"AND OBJNO = '\" + OBJNO + \"'\");\n    readsood.Run();\n    if (readsood.Result.Rows.Count == 0)\n    {\n        return \"\";\n    }\n    else\n    {\n        return readsood.Result.Rows[0][\"OBJDES\"].ToString() +\n            \".\" + readsood.Result.Rows[0][\"FILE_EXT\"].ToString();\n    }\n}\n</code></pre>"},{"location":"samples/download-business-object-attachments/#download-sap-attachment-files","title":"Download SAP Attachment Files","text":"<p>The following sample code downloads an attachment with a given object ID using the function module SO_DOCUMENT_READ_API1.</p> <ul> <li>The returning structure DOCUMENT_DATA contains information about the file, e.g., DOC_SIZE. </li> <li>The table OBJECT_CONTENT returns the binary content of the attachment as a string. </li> <li>The strings are converted into byte arrays and stored to the disk.</li> </ul> SO_DOCUMENT_READ_API1<pre><code>public static void DownloadDocument(R3Connection connection, string Path, string key)\n{\n    RFCFunction func = connection.CreateFunction(\"SO_DOCUMENT_READ_API1\");\n    func.Exports[\"DOCUMENT_ID\"].ParamValue = key;\n    func.Execute();\n\n    Int32 len = Convert.ToInt32(func.Imports[\"DOCUMENT_DATA\"].ToStructure()[\"DOC_SIZE\"]);\n\n\n    string strfile = \"\";\n    System.Text.Encoding enc = System.Text.Encoding.GetEncoding(1252);\n\n    if (len &gt; 0)\n    {\n        foreach (RFCStructure row in func.Tables[\"OBJECT_CONTENT\"].Rows)\n        {\n            string stline = row[\"LINE\"].ToString().PadRight(255);\n\n            if (len &lt; 255)\n                stline = stline.Substring(0, len);\n            else\n                len = len - 255;\n\n            strfile += stline;\n\n        }\n        byte[] bytesfile = enc.GetBytes(strfile);\n        System.IO.File.WriteAllBytes(Path, bytesfile);\n    }\n    else\n    {\n        throw new Exception(\"Length of file = 0\");\n    }\n\n}\n</code></pre>"},{"location":"samples/download-business-object-attachments/#read-and-download-attachment-files","title":"Read and Download Attachment Files","text":"<p>The following sample code queries a list of available attachments and downloads the attachments to the disk. To download attachments of other business objects, change the object type, e.g., BUS2010 for RFQ.</p> Read and Download Attachments<pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nstring[] DocIDs = GetAllAttachmentKeys(connection, \"BUS2012\", \"4500014561\");\n\nif (DocIDs.Length == 0)\n    Console.WriteLine(\"No attachments found\");\nelse\n{\n    for (int i=0; i &lt; DocIDs.Length ;i++)\n    {\n        string FileName = GetFileName(connection, DocIDs[i]);\n        Console.WriteLine(\"Now downloading \" + FileName);\n        DownloadDocument(connection, @\"c:\\\" + FileName, DocIDs[i]);\n    }\n}\n\nConsole.WriteLine(\"Press enter to exit\");\nConsole.ReadLine();\n</code></pre>"},{"location":"samples/execute-bw-queries/","title":"Fetch Data from a BW Query","text":"<p>The following sample shows how to fetch data from a BW Query using ERPConnect.</p>"},{"location":"samples/execute-bw-queries/#about","title":"About","text":"<p>This sample uses the BW query ZSIMPLEQUERY which is based on the cube 0D_DECU.  The following screenshot shows the query in the designer. </p> <p></p> <p>Note</p> <p>To allow external access to a BW Query the checkbox Allow external access has to be set to active in the preferences for the query.</p> <p>The dimensions Material and Sold-to party as well as the key figures Billed Quantity and Costs can be drawn into a DataGrid, see screenshot below.  The dimension has a variable called MAT01 that allows a limitation to the material number.</p> <p></p>"},{"location":"samples/execute-bw-queries/#call-zsimplequery","title":"Call ZSIMPLEQUERY","text":"<p>The following sample code calls the BW Query ZSIMPLEQUERY:</p> BW Query ZSIMPLEQUERY<pre><code>using System;\nusing System.Data;\nusing ERPConnect;\nusing ERPConnect.BW;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nBWCube cube = connection.CreateBWCube(\"0D_DECU/DECUQUERY1\");\n\ncube.Dimensions[\"0D_MATERIAL\"].SelectForFlatMDX = true;\ncube.Dimensions[\"0D_SOLD_TO\"].SelectForFlatMDX = true;\n\ncube.Measures[0].SelectForFlatMDX = true;\ncube.Measures[1].SelectForFlatMDX = true;\n\nDataTable result = cube.Execute();\nforeach (DataRow row in result.Rows)\n{\n    foreach (DataColumn column in result.Columns)\n    {\n        Console.WriteLine($\"{column.Caption}: {row[column]}\");\n    }\n\n    Console.WriteLine();\n}\n</code></pre> <p>Output:</p> <pre><code>Material (SAP Demo): M18\nSold-to-Party (SAP Demo): Thomas Bush Inc.\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 398403,00\nClearing value in document currency (SAP Demo): 328206,00\n\nMaterial (SAP Demo): M18\nSold-to-Party (SAP Demo): Toro Motor Company\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 234234,00\nClearing value in document currency (SAP Demo): 196959,00\n\nMaterial (SAP Demo): M18\nSold-to-Party (SAP Demo): Calorad Inc.\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 111921,00\nClearing value in document currency (SAP Demo): 96837,00\n\nMaterial (SAP Demo): PCSERVICEA\nSold-to-Party (SAP Demo): Infix Co.\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 84564,00\nClearing value in document currency (SAP Demo): 0,00\n\nMaterial (SAP Demo): PCSERVICEA\nSold-to-Party (SAP Demo): Lampen-Markt GmbH\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 2826,00\nClearing value in document currency (SAP Demo): 0,00\n\nMaterial (SAP Demo): PCSERVICEA\nSold-to-Party (SAP Demo): Minerva Industries\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 27759,00\nClearing value in document currency (SAP Demo): 0,00\n\nMaterial (SAP Demo): PCSERVICEA\nSold-to-Party (SAP Demo): Nobil North Sea Limi\nNet&amp;value of the invoice item in the docCurrency (SAP Demo): 11118,00\nClearing value in document currency (SAP Demo): 0,00\n</code></pre>"},{"location":"samples/fetch-data-from-an-sap-query/","title":"Fetch Data from an SAP Query","text":"<p>The following sample shows how to fetch flight information of airplanes from an SAP Query</p>"},{"location":"samples/fetch-data-from-an-sap-query/#about","title":"About","text":"<p>This sample uses the training Query D3 that contains flight information of airplanes.  Data that matches certain selection criteria (e.g. airline and date of flight) is fetched and drawn into a DataGrid, see screenshot below. </p> <p></p> <p>Tip</p> <p>If you don't know the technical name of a Query parameter, you can look it up in your SAP-System. Use the transaction SQ01 or SQ02 to search a Query. Open the description of the Query and scroll to the section Selections. All parameter properties including the name are listed.</p>"},{"location":"samples/fetch-data-from-an-sap-query/#call-d3","title":"Call D3","text":"<p>The Query D3 has the following properties:</p> <ul> <li>user workspace: global</li> <li>user group: BT</li> <li>parameters: \"CARRID\" (airline) and \"FLDATE\" (date)</li> </ul> Fetch Data from SAP Query D3<pre><code>private void btnFetchQueryData_Click(object sender, System.EventArgs e)\n    {\n      using (R3Connection con = new R3Connection(\"SAPServer\", 00, \"SAPUser\", \"Password\", \"EN\", \"800\"))\n        { \n           con.Open();\n\n           // Create Query object Query q; \n           try\n           {\n               Query q = con.CreateQuery(WorkSpace.GlobalArea, \"BT\", \"D3\");\n\n               // Add a criteria (in this case the airline) \n               q.SelectionParameters[\"CARRID\"].Ranges.Add(\n                   Sign.Include, RangeOption.Equals, inputAirline.Text);\n               // Add a second criteria (in this case the date) \n               q.SelectionParameters[\"FLDATE\"].Ranges.Add(\n                   Sign.Include, RangeOption.Between, inputStartDate.Text, inputEndDate.Text);\n\n               // Run the Query \n               q.Execute();\n               // Bind result to datagrid \n               this.dataGridView1.DataSource = q.Result;\n           }\n           catch (Exception e1)\n           {\n            MessageBox.Show(e1.Message);\n            return;\n           }\n        }\n    }\n</code></pre>"},{"location":"samples/get-a-list-of-all-users/","title":"Get a List of all SAP users","text":"<p>This sample shows how to read the user names and address data of all users in the SAP system using the function module BAPI_HELPVALUES_GET.</p>"},{"location":"samples/get-a-list-of-all-users/#call-bapi_helpvalues_get","title":"Call BAPI_HELPVALUES_GET","text":"<p>The following sample code reads user names and address data of SAP users using uses selection parameters for the import Table (SELECTION_FOR_HELPVALUES) of BAPI_HELPVALUES_GET.</p> BAPI_HELPVALUES_GET<pre><code>static ArrayList getUserList(string sign, string option, string low, string high)\n        { \n\n            // Set your ERPConnect license\n            LIC.SetLic(\"xxxx\");\n\n            // Open the connection to SAP\n            using var connection = new R3Connection(\n                host: \"server.acme.org\",\n                systemNumber: 00,\n                userName: \"user\",\n                password: \"passwd\",\n                language: \"EN\",\n                client: \"001\")\n            {\n                Protocol = ClientProtocol.NWRFC,\n            };\n\n            connection.Open();    \n\n            RFCFunction func = connection.CreateFunction(\"BAPI_HELPVALUES_GET\");\n\n            func.Exports[\"OBJTYPE\"].ParamValue = \"USER\";\n            func.Exports[\"METHOD\"].ParamValue = \"GETDETAIL\";\n            func.Exports[\"PARAMETER\"].ParamValue = \"USERNAME\";\n\n            RFCStructure shlp = func.Exports[\"EXPLICIT_SHLP\"].ToStructure();\n            shlp[\"SHLPNAME\"] = \"USER_ADDR\";\n            shlp[\"SHLPTYPE\"] = \"SH\";\n\n            RFCStructure sfh = func.Tables[\"SELECTION_FOR_HELPVALUES\"].AddRow(); ;\n            sfh[\"SELECT_FLD\"] = \"MC_NAMELAS\";\n            sfh[\"SIGN\"] = sign;\n            sfh[\"OPTION\"] = option;\n            sfh[\"LOW\"] = low;\n            sfh[\"HIGH\"] = high;\n\n            func.Execute();\n\n            connection.Close();\n\n            ArrayList user = new ArrayList();\n            for (int i = 0; i &lt; func.Tables[\"HELPVALUES\"].RowCount; i++)\n            {\n                user.Add(func.Tables[\"HELPVALUES\"].Rows[i, 0]);\n            }\n            if (user.Count == 0)\n            {\n                user.Add(\"No results matching criteria\");\n            }               \n\n            return user;                           \n        }\n</code></pre>"},{"location":"samples/get-a-list-of-all-users/#display-users","title":"Display Users","text":"<p>How to display all users, whose name start with M:</p> Display multiple users<pre><code>static void Main(string[] args)\n        {\n            ArrayList users = getUserList(\"I\",\"CP\",\"M*\",\"\");\n            foreach (object userdetail in users)\n            {\n                Console.WriteLine(userdetail);\n            }\n            Console.ReadLine();\n        }\n</code></pre>"},{"location":"samples/get-an-equipment-list/","title":"Get an Equipment List","text":"<p>This sample shows how to get a (filtered) equipment list using the function module BAPI_EQUI_GETLIST. </p>"},{"location":"samples/get-an-equipment-list/#about","title":"About","text":"<p>To get an equipment list you can use the function module BAPI_EQUI_GETLIST or the business object method <code>PieceOfEquipment.GetList</code>.</p> <p>The function module offers selection ranges to filter the equipment.  This sample shows how to use selection ranges for plants.  Selection ranges use the following properties:</p> <ul> <li>SIGN defines whether to include or exclude the defined selection. </li> <li>OPTION defines the operator. </li> <li>The columns LOW and HIGH define the filter values.</li> </ul>"},{"location":"samples/get-an-equipment-list/#call-bapi_equi_getlist","title":"Call BAPI_EQUI_GETLIST","text":"<p>The following sample code queries an equipment list of all plants between 1000 and 2000 and all equipment of plant 3000.</p> <pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\n// Create a function object\n// Alternatively the business object method can be created via \n// BusinessObjectMethod businessMethod = connection.CreateBapi(\"PieceOfEquipment\", \"GetList\")\nRFCFunction func = connection.CreateFunction(\"BAPI_EQUI_GETLIST\");\n\n// The table MAINTPLANT_RA contains a selection range for plants\nRFCStructure NewRow = func.Tables[\"MAINTPLANT_RA\"].Rows.Add();\nNewRow[\"SIGN\"] = \"I\"; // Include\nNewRow[\"OPTION\"] = \"EQ\"; // Equals\nNewRow[\"LOW\"] = \"3000\"; // Low value -&gt; Plant 3000\n// create a scond range row\nNewRow = func.Tables[\"MAINTPLANT_RA\"].Rows.Add();\nNewRow[\"SIGN\"] = \"I\"; // Include\nNewRow[\"OPTION\"] = \"BT\"; // Between\nNewRow[\"LOW\"] = \"1000\"; // Low value -&gt; Plant 1000\nNewRow[\"HIGH\"] = \"2000\"; // High value -&gt; Plant 2000\n\nfunc.Execute();\n\n// print out equipment list\nConsole.WriteLine(\"Found \" + func.Tables[\"EQUIPMENT_LIST\"].Rows.Count.ToString() + \" equipment rows\");\n\nforeach(RFCStructure row in func.Tables[\"EQUIPMENT_LIST\"].Rows)\n{\n    Console.WriteLine(\"EQUIPMENT / DESCRIPT: \" + \n        row[\"EQUIPMENT\"].ToString() + \" / \" + row[\"DESCRIPT\"].ToString());\n}\n</code></pre>"},{"location":"samples/get-costcenter-hierarchies/","title":"Get CostCenter Hierarchies","text":"<p>This sample shows how to build a treeview with cost centers of one selected standard hierarchy.</p>"},{"location":"samples/get-costcenter-hierarchies/#about","title":"About","text":"<p>Cost center hierarchies are stored in different tables in SAP.  Every controlling area has one standard hierarchy defined.  Cost centers belong to these standard hierarchies. </p>"},{"location":"samples/get-costcenter-hierarchies/#set-up-a-treeview-of-cost-centers","title":"Set Up a Treeview of Cost Centers","text":"<p>The Windows form for the treeview should contain following elements:</p> <ul> <li>One button: btnGetCC </li> <li>One DataGridView: dgContArea </li> <li>One TreeView: tvCC</li> </ul> <p></p> <p>Follow the steps below to build a treeview during FormLoad:</p> <ol> <li>Connect to the SAP system using <code>R3Connection</code>.</li> <li>Read the SAP table TKA01 that contains the controlling area standard hierarchy relations.</li> <li>Display the table in a DataGridView.</li> <li>When selecting a controlling area with a click in the DataGridView, the standard hierarchy is written into a variable.</li> <li>When clicking the button, the structure of the cost centers and the hierarchy are build and shown in the treeview.</li> </ol> Read Table TKA01dgContArea_ClickbtnGetCC_ClickPopulateTreeViewPopulateTreeViewKSTTreeViewKSTGroupTextTreeViewKSTText Table TKA01<pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nstring KOKRS;\nstring STDHIER;\n\nprivate void frmMain_Load(object sender, EventArgs e)\n{\n   try\n   {\n      connection.AskUserAndOpen (true);\n      ReadTable table = new ReadTable(connection);\n      table.AddField(\"KOKRS\");\n      table.AddField(\"BEZEI\");\n      table.AddField(\"KHINR\");\n      table.TableName = \"TKA01\";\n      table.Run();\n      DataTable resulttable = table.Result;\n      dgContArea.DataSource = resulttable;\n\n      dgContArea.Columns[\"KOKRS\"].HeaderText = \"Controlling Area\";\n      dgContArea.Columns[\"BEZEI\"].HeaderText = \"Name\";\n      dgContArea.Columns[\"KHINR\"].HeaderText = \"Std. Hierarchy\";\n      dgContArea.Columns[\"KOKRS\"].Width = 120;\n      dgContArea.Columns[\"BEZEI\"].Width = 150;\n}\n   catch (Exception e1)\n   {\n      MessageBox.Show(e1.Message);\n   }\n}\n</code></pre> <pre><code>private void dgContArea_Click(object sender, EventArgs e)\n{\n   STDHIER = dgContArea.CurrentRow.Cells[\"KHINR\"].Value.ToString();\n   KOKRS = dgContArea.CurrentRow.Cells[\"KOKRS\"].Value.ToString();\n}\n</code></pre> <pre><code>private void btnGetCC_Click(object sender, EventArgs e)\n{\n   tvCC.Nodes.Clear();\n   tvCC.Nodes.Add(STDHIER);\n   try\n   {\n      PopulateTreeView(STDHIER, tvCC.Nodes[0]);\n   }\n   catch (Exception e1)\n   {\n      MessageBox.Show(e1.Message);\n   }\n}\n</code></pre> <pre><code>public void PopulateTreeView(string Setname, TreeNode parentNode)\n{\n   try\n   {\n      ReadTable table = new ReadTable(connection);\n      table.AddField(\"SETCLASS\");\n      table.AddField(\"SUBCLASS\");\n      table.AddField(\"SETNAME\");\n      table.AddField(\"SUBSETNAME\");\n\n      table.TableName = \"SETNODE\";\n      table.WhereClause = \"SETCLASS = '0101' and SUBCLASS = '\" + KOKRS + \"' and SETNAME = '\" + Setname + \"'\";\n      table.Run();\n\n      DataTable ResultTable = table.Result;\n\n      if (ResultTable.Rows.Count != 0)\n      {\n         for (int i = 0; i &lt; ResultTable.Rows.Count; i++)\n         {\n            string Set = TreeViewKSTGroupText(ResultTable.Rows[i][\"SUBSETNAME\"].ToString());\n            Set = ResultTable.Rows[i][\"SUBSETNAME\"].ToString() + \" \" + Set;\n            TreeNode myNode = new TreeNode(Set);\n\n            parentNode.Nodes.Add(myNode);\n            PopulateTreeViewKST(ResultTable.Rows[i][\"SUBSETNAME\"].ToString(), myNode);\n            PopulateTreeView(ResultTable.Rows[i][\"SUBSETNAME\"].ToString(), myNode);\n         }\n      }\n   }\n\n   catch (UnauthorizedAccessException)\n   {\n      parentNode.Nodes.Add(\"Access denied\");\n   } \n}\n</code></pre> <pre><code>public void PopulateTreeViewKST(string Setname, TreeNode parentNode)\n   {\n   try\n   {\n      ReadTable table = new ReadTable(connection);\n      table.AddField(\"SETCLASS\");\n      table.AddField(\"SUBCLASS\");\n      table.AddField(\"SETNAME\");\n      table.AddField(\"VALFROM\");\n\n      table.TableName = \"SETLEAF\";\n      table.WhereClause = \"SETCLASS = '0101' and SUBCLASS = '\" + KOKRS + \"' and SETNAME = '\" + Setname + \"'\";\n      table.Run();\n\n      DataTable ResultTable = table.Result;\n\n      if (ResultTable.Rows.Count != 0)\n      {\n          for (int i = 0; i &lt; ResultTable.Rows.Count; i++)\n          {\n             string KST = TreeViewKSTText(ResultTable.Rows[i][\"VALFROM\"].ToString());\n             KST = ResultTable.Rows[i][\"VALFROM\"].ToString() + \" \" + KST;\n             TreeNode myNode = new TreeNode(KST);\n           \u00b4 myNode.ForeColor = Color.Red;\n             parentNode.Nodes.Add(myNode);\n          }\n       }\n   }\n   catch (UnauthorizedAccessException)\n   {\n      parentNode.Nodes.Add(\"Access denied\");\n   } \n}\n</code></pre> <pre><code>public string TreeViewKSTGroupText(string Setname)\n{\n   ReadTable tableKST = new ReadTable(connection);\n   tableKST.AddField(\"SETCLASS\");\n   tableKST.AddField(\"SUBCLASS\");\n   tableKST.AddField(\"SETNAME\");\n   tableKST.AddField(\"LANGU\");\n   tableKST.AddField(\"DESCRIPT\");\n\n   tableKST.TableName = \"SETHEADERT\";\n   tableKST.WhereClause = \"SETCLASS = '0101' and SUBCLASS = '\" + KOKRS + \"' and SETNAME = '\" + Setname + \"' and LANGU = 'EN'\";\n   tableKST.Run();\n\n   DataTable ResultTable = tableKST.Result;\n   if (ResultTable.Rows.Count &gt; 0)\n   {\n      return ResultTable.Rows[0][\"DESCRIPT\"].ToString();\n\n   }\n   else\n   {\n      return \" \";\n   }\n}\n</code></pre> <pre><code>public string TreeViewKSTText(string KST)\n{\n   ReadTable tableKST = new ReadTable(connection);\n   tableKST.AddField(\"KOKRS\");\n   tableKST.AddField(\"KOSTL\");\n\n   tableKST.AddField(\"SPRAS\");\n   tableKST.AddField(\"KTEXT\");\n\n   tableKST.TableName = \"CSKT\";\n   tableKST.WhereClause = \"KOKRS = '\" + KOKRS + \"' and KOSTL = '\" + KST + \"' and SPRAS = 'EN'\";\n   tableKST.Run();\n\n   DataTable ResultTable = tableKST.Result;\n\n   if (ResultTable.Rows.Count &gt; 0)\n   {\n      return ResultTable.Rows[0][\"KTEXT\"].ToString();\n   }\n   else\n   {\n   return \" \";\n   }\n}\n</code></pre>"},{"location":"samples/get-meta-data-of-a-table/","title":"Read meta data of a table","text":"<p>This sample shows how to read the meta data of an SAP table using the ReadTable class.</p> Table MKPF<pre><code>using System;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\n// Open the connection to SAP\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nReadTable read = new ReadTable(connection);\nread.TableName = \"MKPF\";\nread.RetrieveAllFieldsOfTable();\n\n// Fill the fields collection with detailed information on each column\nfor(int i=0; i &lt; read.Fields.Count; i++)\n    Console.WriteLine(read.Fields[i].FieldName + \" (\" +\n        read.Fields[i].ABAPType + \", \" + read.Fields[i].Length + \")\");\n\nconnection.Close();\n</code></pre>"},{"location":"samples/get-purchase-requisition-details/","title":"Get Purchase Requisition Details","text":"<p>This sample shows how to list detailed data of a purchase requisition using the BAPI BAPI_REQUISITION_GETDETAIL.</p>"},{"location":"samples/get-purchase-requisition-details/#about","title":"About","text":"<p>To get the processing status of a purchase requisition, send the purchase requisition number to the BAPI. If the call is successful, the item data is returned in the Table REQUISITION_ITEMS.</p> <p>Possible processing statuses returned by BAPI_REQUISITION_GETDETAIL:</p> <ul> <li>N - Not edited</li> <li>B - PO created</li> <li>A - RFQ created</li> <li>K - Contract created</li> <li>L - Scheduling agreement created</li> <li>S - Service entry sheet created</li> </ul>"},{"location":"samples/get-purchase-requisition-details/#call-bapi_requisition_getdetail","title":"Call BAPI_REQUISITION_GETDETAIL","text":"<p>The following sample code calls the BAPI BAPI_REQUISITION_GETDETAIL to get the processing status of a purchase requisition:</p> BAPI_REQUISITION_GETDETAIL<pre><code>public static void BanfStatus(string Banf_Number)\n{\n    RFCFunction func = connection.CreateFunction(\"BAPI_REQUISITION_GETDETAIL\");\n    func.Exports[\"NUMBER\"].ParamValue = Banf_Number; \n\n    func.Execute();\n\n    if (func.Tables[\"Return\"].RowCount &gt; 0)\n    {\n     string rMessage = func.Tables[\"Return\"].Rows[0, \"MESSAGE\"].ToString();\n     Console.WriteLine(rMessage);\n    }\n    if (func.Tables[\"REQUISITION_ITEMS\"].RowCount &gt; 0)\n    {\n\n     foreach (RFCStructure dr in func.Tables[\"REQUISITION_ITEMS\"].Rows)\n     {\n       Console.WriteLine(\"BelgNummer:\" + dr[\"PREQ_NO\"].ToString() + \" Pos: \" + \n       dr[\"PREQ_ITEM\"].ToString() + \" Status: \" + dr[\"PROC_STAT\"].ToString());\n     }\n}\n</code></pre> <p>Output:</p> <p></p>"},{"location":"samples/how-to-check-the-accessibility-to-a-sap-system/","title":"Check the Accessibility to an SAP System","text":"<p>The following sample shows how to check the accessibility of an SAP system using the paping.exe tool.</p> <p>Sometimes the firewall is blocking the traffic to the SAP System. This could be a local firewall, but also a firewall in the destination network. You can use the paping.exe tool to ping the port and to check if the firewall is open.</p>"},{"location":"samples/how-to-check-the-accessibility-to-a-sap-system/#ping-the-sap-system","title":"Ping the SAP System","text":"<p>Use the following syntax with paping.exe:</p> General SyntaxExample <pre><code>paping.exe SAPServer -p port -c 3*\n</code></pre> <pre><code>paping.exe 192.168.0.9 -p 3305 -c 3\n</code></pre> <p></p>"},{"location":"samples/how-to-check-the-accessibility-to-a-sap-system/#port-numbers","title":"Port Numbers","text":"<p>If an SAP-Router is used, the ports are 3299 and 3399.  If not, the ports are 32XX and 33XX. XX is usually the system number, e.g., 00, or 05.</p> <p>Some important port numbers:</p> <pre><code>sapdp00 3200/tcp # SAP Dispatcher. 3200 + Instance-Number\nsapgw00 3300/tcp # SAP Gateway. 3300 + Instance-Number\nsapsp00 3400/tcp # 3400 + Instance-Number\nsapms00 3500/tcp # 3500 + Instance-Number\nsapmsSID 3600/tcp # SAP Message Server. 3600 + Instance-Number\nsapgw00s 4800/tcp # SAP Secure Gateway 4800 + Instance-Number\n</code></pre>"},{"location":"samples/implement-a-connection-pool/","title":"Implement a connection pool","text":"<p>This sample shows how to implement a connection pool for SAP connections.</p>"},{"location":"samples/implement-a-connection-pool/#about","title":"About","text":"<p>In some situations it can be useful to use a connection pool.  This means that several processes or threads use a set of SAP connections together, e.g., in a web application: 30 users work with an application but there are only 10 concurrent connections to SAP.  Everytime an application process needs a connection a free connection is allocated by the pool.  After having used the connection it is freed by the process and can be used by another one.</p>"},{"location":"samples/implement-a-connection-pool/#prerequisites","title":"Prerequisites","text":"<p>Before the ConnectionPool class can be used, the R3Connection class must be extended by inheriting it. The two new properties <code>LastUsage</code> and <code>IsInUse</code> are used later.</p> Extend R3Connection Class<pre><code>class R3ConnectionEx : ERPConnect.R3Connection\n{\n    private DateTime _LastUsage = DateTime.Now;\n    public DateTime LastUsage\n    {\n        get { return _LastUsage; }\n        set { _LastUsage = value; }\n    }\n\n    private bool _IsInUse = false;\n    public bool IsInUse\n    {\n        get { return _IsInUse; }\n        set { _IsInUse = value; }\n    }\n}\n</code></pre>"},{"location":"samples/implement-a-connection-pool/#the-connectionpool-class","title":"The ConnectionPool Class","text":"<p>The following sample code shows how to use the methods of the ConnectionPool class.</p> Class R3ConnectionPoolMyTimer_ElapsedAllocConnection &amp; FreeConnectionCreateFunctionExecuteFunction <p>In the constructor of the class a timer is initialized.  The timer is responsible for closing connections that are not used for a certain period of time.</p> <pre><code>class R3ConnectionPool\n{\n\n    private System.Timers.Timer MyTimer = new System.Timers.Timer();\n    public R3ConnectionPool()\n    {\n        // When this static class is created\n        // initialize the timer and handle elapsed event\n        MyTimer.Interval = 1000;\n        MyTimer.Elapsed += new System.Timers.ElapsedEventHandler(MyTimer_Elapsed);\n        MyTimer.Enabled = true;\n    }\n\n    private Int32 _MaxNoOfConnection = 10;\n    public Int32 MaxNoOfConnection\n    {\n        get { return _MaxNoOfConnection; }\n        set { _MaxNoOfConnection = value; }\n    }\n\n    private string _ConnectionString = \"\";\n    public string ConnectionString\n    {\n        set { _ConnectionString = value; }\n    }\n\n    public Int32 CurrentNumberOfConnection\n    {\n        get { return MyConnectionList.Count; }\n    }\n</code></pre> <p>The generic list MyConnectionList holds all active connections.  When the last usage was more than 60 seconds ago and it is not currently in use, the connection is closed and removed from the list.</p> <pre><code>private System.Collections.Generic.List\n    MyConnectionList = new System.Collections.Generic.List();\n\nprivate void MyTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)\n{\n    // Loop through the list\n    // and check, if a connection is not used for more than 60 second,\n    // if so, close it an remove it from the list\n    lock (MyConnectionList)\n    {\n        foreach (R3ConnectionEx con in MyConnectionList)\n        {\n            if (!con.IsInUse &amp;&amp; con.LastUsage.AddSeconds(60) &lt; DateTime.Now)\n            {\n                con.Close();\n                MyConnectionList.Remove(con);\n                return;\n            }\n        }\n    }\n}\n</code></pre> <p>The two private functions <code>AllocConnection()</code> and <code>FreeConnection()</code> are for allocating and deallocating connections.  If there is no free connection available a new connection is created and added to the connection list.</p> <pre><code>private R3ConnectionEx AllocConnection()\n{\n    lock (MyConnectionList)\n    {\n        foreach (R3ConnectionEx con in MyConnectionList)\n        {\n            if (!con.IsInUse)\n            {\n                con.IsInUse = true;\n                return con;\n            }\n        }\n\n        if (MyConnectionList.Count &lt; this.MaxNoOfConnection)\n        {\n            R3ConnectionEx con = new R3ConnectionEx();\n            con.Open(this._ConnectionString);\n            this.MyConnectionList.Add(con);\n            con.IsInUse = true;\n            return con;\n        }\n\n        if (MyConnectionList.Count &gt;= this.MaxNoOfConnection)\n            throw new Exception(\"Maximun Number of connection exceeded\");\n        else\n            throw new Exception(\"Unable to allocate a new connection\");\n    }\n}\n\nprivate void FreeConnection(R3ConnectionEx con)\n{\n    con.LastUsage = DateTime.Now;\n    con.IsInUse = false;\n}\n</code></pre> <p>Without the pool you would call <code>CreateFunction()</code> directly, e.g., <code>con.CreateFunction()</code>.  When using the new pool class the <code>CreateFunction()</code> method is called by the pool after having allocated a connection dynamically.  The RFCFunction object is cashed with the help of XML serialization and deserialization.  This avoids retrieving the function's meta data from SAP every time <code>CreateFunction()</code> is called.</p> <pre><code>private Hashtable FunctionHash = new Hashtable();\npublic RFCFunction CreateFunction(string FunctionName)\n{\n\n    lock (FunctionHash)\n    {\n        string xml = (string)FunctionHash[FunctionName];\n\n        if (xml == null)\n        {\n            // The function has not been created yet in this pool\n            R3ConnectionEx con = this.AllocConnection();\n            try\n            {\n                RFCFunction func = con.CreateFunction(FunctionName);\n                FreeConnection(con);\n                // store in hash for later use\n                FunctionHash.Add(FunctionName, func.SaveToXML());\n                return func;\n            }\n            catch (Exception e1)\n            {\n                // Check if connection is still alive\n                // if not, remove it\n                if (!con.Ping())\n                    MyConnectionList.Remove(con);\n                else\n                    FreeConnection(con);\n                // rethrow exception\n                throw e1;\n            }\n\n        }\n        else\n        {\n            // We can create the function object without calling the CreateFunction method\n            RFCFunction func = new RFCFunction(FunctionName);\n            func.LoadFromXMLString(xml);\n            return func;\n        }\n    }\n}\n</code></pre> <p>The execution of the function uses the same principle as <code>CreateFunction()</code>: </p> <ul> <li>Allocate connection</li> <li>Execute</li> <li>Deallocate</li> </ul> <pre><code>public void ExecuteFunction(RFCFunction func)\n{\n    R3ConnectionEx con = this.AllocConnection();\n    try\n    {\n        func.Connection = (R3Connection)con;\n        func.Execute();\n\n    }\n    catch (Exception e1)\n    {\n        // Check if connection is still alive\n        // if not, remove it\n        if (!con.Ping())\n            MyConnectionList.Remove(con);\n        FreeConnection(con);\n        // rethrow exception\n        throw e1;\n    }\n\n    FreeConnection(con);\n}\n</code></pre>"},{"location":"samples/implement-a-connection-pool/#test-the-connection-pool","title":"Test the connection pool","text":"<p>The following console program shows how to test and apply the connection pool class.</p> <p>How it works:</p> <ul> <li>First 3 separate threads are started. </li> <li>After pressing [Enter] 3 more threads are started. </li> <li>The timer shows the current number of active connections.</li> <li>Depending on how many threads have already finished after the new ones have been started, the connections are recycled or newly connected.</li> </ul> <p>The output shows:</p> <ul> <li>3 threads are started</li> <li>2 have finished</li> <li>3 news threads are started</li> <li>Result: 4 active SAP connections, because after 2 have finished only 1 more is needed.</li> </ul> <p></p> <p>Source code of the sample program:</p> Use a Connection Pool<pre><code>class Program\n{\n    static R3ConnectionPool ConPool = new R3ConnectionPool();\n    static System.Timers.Timer timer = new System.Timers.Timer();\n\n    [STAThread]\n    static void Main(string[] args)\n    {\n        timer.Interval = 1500;\n        timer.Elapsed += new System.Timers.ElapsedEventHandler(timer_Elapsed);\n        timer.Enabled = true;\n\n        ConPool.ConnectionString = \"USER=Theobald LANG=DE CLIENT=XXX SYSNR=XX ASHOST=XXX PASSWD=XXX \";\n\n        Start3Threads(\"TH*\",\"H*\",\"X*\");\n\n        Console.WriteLine(\"3 threads started. Press enter to start 3 more threads\");\n        Console.Read();\n\n        Start3Threads(\"A*\", \"B*\", \"C*\");\n\n        Console.WriteLine(\"3 additional threads started. Press enter to quit.\");\n        Console.ReadLine();\n        Console.ReadLine();\n        Console.ReadLine();\n        Console.ReadLine();\n\n    }\n\n    static void Start3Threads(string SearchKey1, string SearchKey2, string SearchKey3)\n    {\n        System.Threading.Thread t4 = new System.Threading.Thread(\n          new System.Threading.ParameterizedThreadStart(Execut eALongRunningFunctionModule));\n        t4.Name = SearchKey1; t4.Start(SearchKey1);\n        System.Threading.Thread t5 = new System.Threading.Thread(\n           new System.Threading.ParameterizedThreadStart(Execut eALongRunningFunctionModule));\n        t5.Name = SearchKey2; t5.Start(SearchKey2);\n        System.Threading.Thread t6 = new System.Threading.Thread(\n           new System.Threading.ParameterizedThreadStart(Execut eALongRunningFunctionModule));\n        t6.Name = SearchKey3; t6.Start(SearchKey3);\n    }\n\n    static void timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)\n    {\n        Console.WriteLine(\"Current Number of connections: \" + ConPool.CurrentNumberOfConnection);\n    }\n\n    static void ExecuteALongRunningFunctionModule(object SearchTerm)\n    {\n        RFCFunction func = ConPool.CreateFunction(\"BAPI_EMPLOYEE_GETLIST\");\n\n        func.Exports[\"SUR_NAME_SEARK\"].ParamValue = SearchTerm.ToString();\n        func.Exports[\"SEARCH_DATE\"].ParamValue = \"20070101\";\n\n\n        ConPool.Execut eFunction(func);\n\n        Console.WriteLine(func.Tables[\"EMPLOYEE_LIST\"].Rows.Count.ToString()\n\n            + \" rows received -&gt; SearchKey: \" + System.Threading.Thread.CurrentThread.Name);\n\n    }\n\n}\n</code></pre>"},{"location":"samples/login-to-sap-with-an-sso-logonticket/","title":"Login to SAP with an SSO Logon Ticket","text":"<p>This sample shows how to login to SAP with an SSO Logon Ticket. The following sample code retrieves the cookie from the SAP Portal Ticketissuer that contains the SSO Ticket using an HTTP Request with a Basic Authentication:</p> Retrieve Cookie from the SAP Portal Ticketissuer<pre><code>using System;\nusing System.Net;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\nusing ERPConnect;\nusing ERPConnect.Utils;\n\nConsole.Write(\"User: \");\nstring user = Console.ReadLine();\n\nConsole.Write(\"Password: \");\nstring password = Console.ReadLine();\n\nstring cookie = RetrieveCookieBasic(user, password);\nstring ticket = ParseCookie(cookie);\n\nusing var connection = new R3Connection();\nconnection.Protocol = ClientProtocol.NWRFC;\nconnection.Host = \"sapserver\";\nconnection.Client = \"001\";\nconnection.Language = \"EN\";\nconnection.SystemNumber = 00;\nconnection.LogonTicket = ticket;\n\nconnection.Open();\nvar readTable = new ReadTable(connection)\n{\n    TableName = \"USR01\",\n    WhereClause = \"BNAME = SY-UNAME\"\n};\n\nConsole.WriteLine(\"Reading USR01...\");\nreadTable.Run();\n\nConsole.WriteLine($\"SAP user is {readTable.Result.Rows[0][\"BNAME\"]}\");\nreturn;\n\nstatic string RetrieveCookieBasic(string user, string password)\n{\n    var httpWebRequest = (HttpWebRequest) HttpWebRequest.Create(\"http://sapserver:50000/irj/portal\");\n    string userAndPass = user + \":\" + password;\n    byte[] codepoints = Encoding.UTF8.GetBytes(userAndPass);\n    string base64 = Convert.ToBase64String(codepoints);\n    httpWebRequest.Headers[HttpRequestHeader.Authorization] = \"Basic \" + base64;\n\n    using WebResponse webResponse = httpWebRequest.GetResponse();\n    return webResponse.Headers[HttpResponseHeader.SetCookie];\n}\n\nstatic string ParseCookie(string cookie)\n{\n    Match match = Regex.Match(\n        cookie,\n        \"MYSAPSSO2=([a-z0-9%]+);\",\n        RegexOptions.Compiled | RegexOptions.IgnoreCase);\n\n    return match.Groups[1].Captures[0].Value;\n}\n</code></pre>"},{"location":"samples/login-to-sap-with-an-sso-logonticket/#related-link","title":"Related Link:","text":"<ul> <li>Documentation: SSO with Logon Tickets. </li> </ul>"},{"location":"samples/look-up-purchase-orders/","title":"Look up Purchase Orders","text":"<p>This sample shows how to get a list of purchase orders using the BAPI BAPI_PO_GETITEMS. </p>"},{"location":"samples/look-up-purchase-orders/#call-bapi_po_getitems","title":"Call BAPI_PO_GETITEMS","text":"<p>The following sample code retrieves a list of purchase orders from SAP:</p> BAPI_PO_GETITEMS<pre><code>using System;\nusing System.Globalization;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nConsole.Write(\"Plant: \");\nstring plant = Console.ReadLine();\n\nConsole.Write(\"Purchase Order: \");\nstring purchaseOrder = Console.ReadLine();\n\nConsole.Write(\"Material: \");\nstring material = Console.ReadLine();\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nRFCFunction function = connection.CreateFunction(\"BAPI_PO_GETITEMS\");\nfunction.Exports[\"PLANT\"].ParamValue = plant;\nfunction.Exports[\"PURCHASEORDER\"].ParamValue = purchaseOrder;\nfunction.Exports[\"MATERIAL\"].ParamValue = material;\nfunction.Exports[\"ITEMS_OPEN_FOR_RECEIPT\"].ParamValue = \"X\";\nfunction.Exports[\"WITH_PO_HEADERS\"].ParamValue = \"X\";\nfunction.Execute();\n\nRFCTable headersTable = function.Tables[\"PO_HEADERS\"];\nRFCTable itemsTable = function.Tables[\"PO_ITEMS\"];\n\nfor (int i = 0; i &lt; itemsTable.RowCount; i++)\n{\n    var purchaseOrderNumber = (string) itemsTable.Rows[i, \"PO_NUMBER\"];\n    var item = (string) itemsTable.Rows[i, \"PO_ITEM\"];\n\n    var total = (decimal) itemsTable.Rows[i, \"DISP_QUAN\"];\n    decimal delivered = GetDeliveredQuantityForPurchaseOrder(\n        connection,\n        purchaseOrderNumber,\n        item);\n\n    Console.WriteLine(\"Purchase Order:\");\n    Console.WriteLine($\"  Number: {purchaseOrderNumber}\");\n    Console.WriteLine($\"  Item: {item}\");\n    Console.WriteLine($\"  Material: {itemsTable.Rows[i, \"PUR_MAT\"]}\");\n    Console.WriteLine($\"  Text: {itemsTable.Rows[i, \"SHORT_TEXT\"]}\");\n    Console.WriteLine($\"  Open: {total - delivered}\");\n\n    // Loop header table and find the right PO\n    for (int j = 0; j &lt; headersTable.RowCount; j++)\n    {\n        var headerNumber = (string) headersTable.Rows[j, \"PO_NUMBER\"];\n        if (headerNumber == purchaseOrderNumber)\n        {\n            var date = (string) headersTable.Rows[j, \"DOC_DATE\"];\n            DateTime parsedDate = DateTime.ParseExact(\n                date,\n                \"yyyyMMdd\",\n                CultureInfo.InvariantCulture);\n\n            Console.WriteLine($\"  Date: {parsedDate}\");\n            Console.WriteLine($\"  Vendor: {headersTable.Rows[i, \"VEND_NAME\"]}\");\n        }\n    }\n}\n\nreturn;\n\n// Determine the quantity that is already receipted\nstatic decimal GetDeliveredQuantityForPurchaseOrder(\n    R3Connection connection,\n    string purchaseOrder,\n    string item)\n{\n    RFCFunction func = connection.CreateFunction(\"BAPI_PO_GETDETAIL\");\n    func.Exports[\"PURCHASEORDER\"].ParamValue = purchaseOrder;\n    func.Exports[\"HISTORY\"].ParamValue = \"X\";\n    func.Exports[\"ITEMS\"].ParamValue = \" \";\n    func.Execute();\n\n    RFCTable table = func.Tables[\"PO_ITEM_HISTORY_TOTALS\"];\n    for (int i = 0; i &lt; table.RowCount; i++)\n    {\n        RFCStructure row = table.Rows[i];\n        var historyItem = (string) row[\"PO_ITEM\"];\n        if (historyItem == item)\n        {\n            return (decimal) row[\"DELIV_QTY\"];\n        }\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"samples/post-goods-movement/","title":"Post Goods Movement","text":"<p>This sample shows how to create a goods receipt for a goods movement using the BAPI BAPI_GOODSMVT_CREATE. </p>"},{"location":"samples/post-goods-movement/#about","title":"About","text":"<p>The BAPI BAPI_GOODSMVT_CREATE requires multiple parameters to create a goods receipt for a goods movement. The export parameter GM_CODE of BAPI_GOODSMVT_CREATE represents the transaction code that would be used to post the movement as a dialog user. Values for GM_CODE include: </p> <ul> <li>\u201c01\u201d is replaced by SAP with the transaction code MB01 that creates a goods receipt for purchase orders. </li> <li>\u201c02\u201d is replaced by SAP with the transaction code MB31 for goods receipt for production orders.</li> <li>\"05\" is replaced by SAP with the transaction code MB1C for other goods receipts.</li> </ul> <p>Other export parameters for BAPI_GOODSMVT_CREATE include:</p> <ul> <li>the Posting Date of the Document</li> <li>the Username</li> <li>the Document Date. </li> </ul> <p>The table parameters for BAPI_GOODSMVT_CREATE include:</p> <ul> <li>PLANT (Plant)</li> <li>PO_NUMBER (Purchase Order Number) </li> <li>PO_ITEM (Purchase Order Item)</li> <li>ENTRY_QNT (Quantity)</li> <li>MOVE_TYPE \"101\" is the Movement Type for the goods receipt for purchase order into warehouse/stores.</li> <li>MVT_IND is the Movement Indicator that specifies the type of document that constitutes the basis for the movement.</li> <li>STGE_LOC is the Storage Location for the goods. </li> </ul>"},{"location":"samples/post-goods-movement/#call-bapi_goodsmvt_create","title":"Call BAPI_GOODSMVT_CREATE","text":"<p>The following code sample calls the BAPI BAPI_GOODSMVT_CREATE. If a goods receipt is successfully created the function returns the material document number and the year.</p> BAPI_GOODSMVT_CREATE<pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\npublic bool GoodsReceipt101(string PO_Number, string PO_ITEM, string Plant, decimal Quantity)\n  {\n     string rMessage;\n     // Fill Export Structures for the FunctionModule\n     RFCFunction func = connection.CreateFunction(\"BAPI_GOODSMVT_CREATE\");\n     func.Exports[\"GOODSMVT_HEADER\"].ToStructure()[\"PSTNG_DATE\"] = \"20070921\"; //Posting Date in the Document\n     func.Exports[\"GOODSMVT_HEADER\"].ToStructure()[\"PR_UNAME\"] = \"HUGO\";       //UserName\n     func.Exports[\"GOODSMVT_HEADER\"].ToStructure()[\"HEADER_TXT\"] = \"XXX\";      //HeaderText\n     func.Exports[\"GOODSMVT_HEADER\"].ToStructure()[\"DOC_DATE\"] = \"20070921\";   //Document Date in Document\n\n     func.Exports[\"GOODSMVT_CODE\"].ToStructure()[\"GM_CODE\"] = \"01\";\n\n     // Fill Table Items \n     RFCStructure itemrow = func.Tables[\"GOODSMVT_ITEM\"].Rows.Add();\n     itemrow[\"PLANT\"] = Plant;                //Plant\n     itemrow[\"PO_NUMBER\"] = PO_Number;        //Purchase Order Number\n     itemrow[\"PO_ITEM\"] = PO_ITEM;            //Item Number of Purchasing Document  \n     itemrow[\"ENTRY_QNT\"] = Quantity;         //Quantity in Unit of Entry\n     itemrow[\"MOVE_TYPE\"] = \"101\";            //Movement Type\n     itemrow[\"MVT_IND\"] = \"B\";                //Movement Indicator\n     itemrow[\"STGE_LOC\"] = \"0001\";            //Storage Location\n\n     // Execute Function Module\n     func.Execute();\n\n     RFCFunction funcCommit = connection.CreateFunction(\"BAPI_TRANSACTION_COMMIT\");\n     funcCommit.Exports[\"WAIT\"].ParamValue = \"X\";\n\n     string MaterialDocument = func.Imports[\"MATERIALDOCUMENT\"].ParamValue.ToString();\n     string MatDocumentYear = func.Imports[\"MATDOCUMENTYEAR\"].ParamValue.ToString();\n\n     // Check Return-Table\n     if (func.Tables[\"RETURN\"].RowCount &gt; 0)\n      {\n        rMessage = func.Tables[\"RETURN\"].Rows[0, \"MESSAGE\"].ToString();\n        funcCommit.Execute();\n        return !func.Tables[\"RETURN\"].Rows[0, \"TYPE\"].ToString().Equals(\"E\");\n      }\n     else\n      {\n        funcCommit.Execute();\n        rMessage = \"\";\n        return true;\n      }\n }\n</code></pre>"},{"location":"samples/read-material-bom/","title":"Read Material BOM","text":"<p>This sample shows how to obtain the components of a material BOM using the function module CSAP_MAT_BOM_READ.</p> <p>Tip</p> <p>To change a material BOM use the function modules CSAP_MAT_BOM_OPEN, CSAP_MAT_BOM_MAINTAIN and CSAP_MAT_BOM_CLOSE. To create a new BOM use the function modules CSAP_MAT_BOM_ALLOC_CREATE and CSAP_MAT_BOM_CREATE.</p>"},{"location":"samples/read-material-bom/#call-csap_mat_bom_read","title":"Call CSAP_MAT_BOM_READ","text":"<p>The following sample code retrieves the components of a material BOM:</p> CSAP_MAT_BOM_READ<pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\n//Create function\nRFCFunction func = connection.CreateFunction(\"CSAP_MAT_BOM_READ\");\nfunc.Exports[\"MATERIAL\"].ParamValue = \"100-100\"; // Material\nfunc.Exports[\"PLANT\"].ParamValue = \"1000\"; // Plant\nfunc.Exports[\"BOM_USAGE\"].ParamValue = \"1\"; // Usage -&gt; 1 = Production\n\n//Execute\nfunc.Execute();\n\n// reading header\nif (func.Tables[\"T_STKO\"].Rows.Count &gt; 0)\n{\n    // print out BOM header\n    RFCStructure header = func.Tables[\"T_STKO\"].Rows[0];\n    Console.WriteLine(\"Base Quantity: \" + header[\"BASE_QUAN\"].ToString()\n\n        + \" \" + header[\"BASE_UNIT\"].ToString() + \"\\r\\n\");\n\n\n    Console.WriteLine(\"Items:\\r\\n\");\n\n    // print out components, quantity, item text\n    foreach (RFCStructure itemrow in func.Tables[\"T_STPO\"].Rows)\n    {\n        Console.WriteLine(itemrow[\"COMPONENT\"].ToString() + \" \" +\n            itemrow[\"COMP_QTY\"].ToString() + \" \" +\n            itemrow[\"ITEM_TEXT1\"].ToString());\n    }\n\n}\nelse\n{\n    Console.WriteLine(\"No BOM found\");\n}\n\nConsole.WriteLine(\"Ready\");\nConsole.ReadLine();\n</code></pre>"},{"location":"samples/read-sap-tables-directly/","title":"Read SAP Tables Directly","text":"<p>The following sample shows how to use the ReadTable class to select data from the SAP table MAKT and how to process the ADO.NET result table object. </p>"},{"location":"samples/read-sap-tables-directly/#about","title":"About","text":"<p>This sample reads the material description texts of the SAP table MAKT. </p> <ul> <li>Read the columns MATNR (material number) and MAKTX (material text).</li> <li>Add a corresponding WHERE statement <code>SPRAS='EN'</code> to make sure only the English language texts are read (SPRAS is the column that contains the language keys).</li> </ul>"},{"location":"samples/read-sap-tables-directly/#read-table","title":"Read Table","text":"Table MAKT<pre><code>using System;\nusing System.Data;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\n// Open the connection to SAP\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nvar table = new ReadTable(connection)\n{\n    WhereClause = \"SPRAS = 'EN'\",\n    TableName = \"MAKT\",\n    RowCount = 10\n};\n\n// Select columns to read\ntable.AddField(\"MATNR\");\ntable.AddField(\"MAKTX\");\n\ntable.Run();\n\nDataTable result = table.Result;\nfor (int i = 0; i &lt; result.Rows.Count; i++)\n{\n    Console.WriteLine($\"{result.Rows[i][\"MATNR\"]} {result.Rows[i][\"MAKTX\"]}\");\n}\n\nConsole.ReadLine();\n</code></pre> <p>Output: <pre><code>000000000000000023 Pawan Kalyan_08\n000000000000000038 Test US colleagues upd4\n000000000000000043 English Check 25_01\n000000000000000058 Ventilation, complete build\n000000000000000059 Filter Ereteam\n000000000000000068 a portable 1 ton crane\n000000000000000078 Component Full Repair Service ...\n000000000000000088 AS-100 T-shirt XL\n000000000000000089 AS-100 T-shirt\n000000000000000098 PCB Subassembly\n</code></pre></p>"},{"location":"samples/readwrite-material-master-data/","title":"Read/Write Material Master Data","text":"<p>This sample shows how to create and read material master data in SAP using the BAPI BAPI_MATERIAL_SAVEDATA. </p>"},{"location":"samples/readwrite-material-master-data/#about","title":"About","text":"<p>A material object consists of multiple layers or so called views.  Each view may exist multiple times, e.g., one plant view for plant 1000 and one for plant 2000 - both for the same material.  To keep it simple, the provided sample code only shows how to handle the basic views. The other views work the same way. </p> <p>The attributes of the basic view include:</p> <ul> <li>the Material Number</li> <li>the Old Material Number (which can come from a legacy system)</li> <li>the Industry Sector </li> <li>the Material Type (in this case HAWA - Trading Goods)</li> <li>the basic measure unit (mandatory).</li> </ul>"},{"location":"samples/readwrite-material-master-data/#write-material-master-data","title":"Write Material Master Data","text":"<p>The BAPI BAPI_MATERIAL_SAVEDATA can be used for both creating a new material or changing / extending an existing Material.  Aside from the regular structure for submitting data (CLIENTDATA) there is an additional checkbox structure called CLIENTDATAX.  Any data that is submitted in CLIENTDATA must be confirmed by an X value in the CLIENTDATAX structure.</p> <p>The following sample code adds material attributes:</p> BAPI_MATERIAL_SAVEDATA<pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nRFCFunction func = connection.CreateFunction(\"BAPI_MATERIAL_SAVEDATA\");\nRFCStructure header = func.Exports[\"HEADDATA\"].ToStructure();\nRFCStructure basedata = func.Exports[\"CLIENTDATA\"].ToStructure();\nRFCStructure basedatax = func.Exports[\"CLIENTDATAX\"].ToStructure();\n\nheader[\"MATERIAL\"] = \"SAMPLE001\";\nheader[\"IND_SECTOR\"] = \"M\"; // M stands for Mechanical Engineering\nheader[\"MATL_TYPE\"] = \"HAWA\"; // Type HAWA stands for Trading Goods\nheader[\"BASIC_VIEW\"] = \"X\"; // Just an X to indicate, that we want to create the basic view\n\nbasedata[\"OLD_MAT_NO\"] = \"4711\"; // Old material number\nbasedata[\"BASE_UOM\"] = \"MM\"; // Base Unit MM for milimeter\nbasedatax[\"OLD_MAT_NO\"] = \"X\"; // X indicates, that we want to set this value\nbasedatax[\"BASE_UOM\"] = \"X\"; // X indicates, that we want to set this value\n\n// Add a row to the description text tables\nRFCStructure descriptionrow = func.Tables[\"MATERIALDESCRIPTION\"].AddRow();\ndescriptionrow[\"LANGU\"] = \"EN\"; // Language of the text\ndescriptionrow[\"MATL_DESC\"] = \"My New Material\"; // Actual Text\n\nfunc.Execute();\n\n// process return message\nConsole.WriteLine(func.Imports[\"RETURN\"].ToStructure()[\"MESSAGE\"].ToString());\n\n// And Commit everything\nRFCFunction funccommit = connection.CreateFunction(\"BAPI_TRANSACTION_COMMIT\");\nfunccommit.Execute();\n\nConsole.WriteLine(\"\\r\\nPress Enter to exit\");\nConsole.ReadLine();\n</code></pre> <p>Output:</p> <pre><code>The material SAMPLE001 has been created or extended\n</code></pre> <p></p>"},{"location":"samples/readwrite-material-master-data/#read-material-master-data","title":"Read Material Master Data","text":"<p>The following sample code reads the material attributes used in Write Material Master Data:</p> <pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nRFCFunction func = connection.CreateFunction(\"BAPI_MATERIAL_GET_DETAIL\");\nfunc.Exports[\"MATERIAL\"].ParamValue = \"SAMPLE001\";\nfunc.Execute();\n\n// Read data\nRFCStructure basedata = func.Imports[\"MATERIAL_GENERAL_DATA\"].ToStructure();\n\nConsole.WriteLine(\"Description Text: \" + basedata[\"MATL_DESC\"].ToString());\nConsole.WriteLine(\"Old Material No: \" + basedata[\"OLD_MAT_NO\"].ToString());\nConsole.WriteLine(\"Industry Sector: \" + basedata[\"IND_SECTOR\"].ToString());\nConsole.WriteLine(\"Material Type: \" + basedata[\"MATL_TYPE\"].ToString());\n\nConsole.WriteLine(\"\\r\\nPress Enter to exit\");\nConsole.ReadLine();\n</code></pre> <p>Output:</p> <pre><code>Description Text: My New Material\nOld Material No: 4711\nIndustry Sector: M\nMaterial Type: HAWA\n</code></pre>"},{"location":"samples/receive-an-idoc/","title":"Receive an IDoc","text":"<p>This section shows how to receive and process a MATMAS IDoc. To configure your SAP system to send MATMAS IDocs, see Set Up a Test Environment for IDocs.</p>"},{"location":"samples/receive-an-idoc/#about","title":"About","text":"<p>The following sample receives a MATMAS IDoc that contains material descriptions.  The material descriptions are written into the console window to check the contents of the IDoc. </p> <p>The MATMAS IDoc is analyzed using the E2MARAM005 segment.  Within this segment, several E2MAKTM001 child segments contain material descriptions.</p> <p>Tip</p> <p>You can use the transaction WE60 to look up the structures of IDocs in SAP.</p>"},{"location":"samples/receive-an-idoc/#receive-a-matmas-idoc","title":"Receive a MATMAS IDoc","text":"<p>Follow the steps below to receive a MATMAS IDoc:</p> <ol> <li>Create an RFC Server object to accept calls from SAP, see RFC Server for more information.</li> <li>To receive IDocs with the RFCServer object, set the property <code>CanReceiveIdocs</code> to true.</li> <li>When an IDoc is received by ERPConnect, the event <code>IncomingIdoc</code> is triggered and a reference to the RFCServer object and to the IDoc object is transferred. </li> <li>Use the <code>IncomingIdoc</code> event to read the data buffer of the child segment E2MAKTM001.  The description text is located at index 4 with a length of 40 in E2MAKTM001. </li> <li>Write the description texts into the console window.</li> <li>Run the program.</li> <li>Send an IDoc in SAP and check the result. </li> </ol> Receive a MATMAS IDoc<pre><code>using System;\nusing ERPConnect;\nusing ERPConnect.Idocs;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var server = new RFCServer();\nserver.Logging = true;\nserver.GatewayHost = \"hamlet\";\nserver.GatewayService = \"sapgw11\";\nserver.ProgramID = \"ERPTEST\";\nserver.CanReceiveIdocs = true;\n\nserver.InternalException += (_, exception) =&gt;\n{\n    Console.WriteLine($\"Internal error: {exception.Message}\");\n};\n\nserver.IncomingIdoc += (_, idoc) =&gt;\n{\n    Console.WriteLine(\"Received Idoc \" + idoc.IDOCTYP);\n    IdocSegment e1maram = idoc.Segments[\"E2MARAM005\", 0];\n    for (int i = 0; i &lt; e1maram.ChildSegments.Count; i++)\n    {\n        if (e1maram.ChildSegments[i].SegmentName != \"E2MAKTM001\")\n        {\n            continue;\n        }\n\n        string text = e1maram.ChildSegments[i].ReadDataBuffer(4, 40);\n        Console.WriteLine($\"Material text found: {text}\");\n    }\n};\n\nserver.Start();\n\nConsole.WriteLine(\"Server is running. Press any key to exit.\");\nConsole.ReadLine();\n\nserver.Stop();\n</code></pre> <p>Output:</p> <p>In this case, 5 E2MAKTM001 segments were found so 5 texts are passed.</p> <p></p> <p>Note</p> <p>If you do not want to read the data buffer with offset and length of the texts, you can load an XML Schema instead, see Using XMLs for IDocs.</p>"},{"location":"samples/resend-idocs-which-where-set-to-cpicerr-in-sm58/","title":"Resend IDocs which where set to CPICERR in SM58","text":"<p>This sample shows how to resend IDocs that are flagged with an error in the tRFC monitor.</p>"},{"location":"samples/resend-idocs-which-where-set-to-cpicerr-in-sm58/#about","title":"About","text":"<p>When IDocs are sent by SAP while the external system is not available, the IDocs / calls are flagged with error in SM58 (tRFC monitor).  The calls are resent automatically after minutes depending on the system configuration.</p>"},{"location":"samples/resend-idocs-which-where-set-to-cpicerr-in-sm58/#force-resend-of-an-idoc","title":"Force Resend of an IDoc","text":"<p>The following code sample looks up all errors in the table ARFCSSTATE of a given destination and then calls ARFC_RUN_NOWAIT to resend each call.</p> ARFC_RUN_NOWAIT &amp; Table ARFCSSTATE<pre><code>using System;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\n// Look up errors in table ARFCSSTATE\nstring date = DateTime.Now.AddDays(-1).ToString(\"yyyyMMdd\");\nvar readTable = new ReadTable(connection)\n{\n    TableName = \"ARFCSSTATE\",\n    WhereClause = $\"ARFCDEST = 'DEST' AND ARFCDATUM &gt;= '{date}' AND ARFCSTATE = 'CPICERR'\"\n};\n\nreadTable.Run();\nif (readTable.Result.Rows.Count == 0)\n{\n    return;\n}\n\n// Execute ARFC_RUN_NOWAIT for each call\nRFCFunction function = connection.CreateFunction(\"ARFC_RUN_NOWAIT\");\nfunction.Exports[\"WITH_ENQ\"].ParamValue = \"X\";\n\nfor (int i = 0; i &lt; readTable.Result.Rows.Count; i++)\n{\n\n    function.Tables[\"DATA\"].Clear();\n    function.Tables[\"STATES\"].Clear();\n\n    var row = readTable.Result.Rows[i];\n    RFCStructure structure = function.Exports[\"TID\"].ToStructure();\n    structure[\"ARFCIPID\"] = row[\"ARFCIPID\"].ToString();\n    structure[\"ARFCPID\"] = row[\"ARFCPID\"].ToString();\n    structure[\"ARFCTIME\"] = row[\"ARFCTIME\"].ToString();\n    structure[\"ARFCTIDCNT\"] = row[\"ARFCTIDCNT\"].ToString();\n\n    function.Execute();\n}\n</code></pre>"},{"location":"samples/reset-users-password/","title":"Reset the Password of an SAP User","text":"<p>This sample shows how to reset the password of an SAP user using the BAPI BAPI_USER_CHANGE. </p> <p>Tip</p> <p>Resetting the password of SAP users can be useful in web portals with employee self services.</p> BAPI_USER_CHANGE<pre><code>using System;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\n// Open the connection to SAP\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\nRFCFunction func = connection.CreateFunction(\"BAPI_USER_CHANGE\");\n\nConsole.WriteLine(\"Please type user's name to reset password\");\nstring UserName = Console.ReadLine();\n\nfunc.Exports[\"USERNAME\"].ParamValue = UserName;\nfunc.Exports[\"PASSWORD\"].ToStructure()[\"BAPIPWD\"] = \"init01\";\nfunc.Exports[\"PASSWORDX\"].ToStructure()[\"BAPIPWD\"] = \"X\";\n\nfunc.Execute();\n\nforeach(RFCStructure retrow in func.Tables[\"RETURN\"].Rows)\n    Console.WriteLine(retrow[\"MESSAGE\"].ToString());\n\nconnection.Close();\n\nConsole.WriteLine(\"\");\nConsole.WriteLine(\"Press enter to quit.\");\nConsole.ReadLine();\n</code></pre>"},{"location":"samples/retrieve-stock-quantity/","title":"Retrieve Stock Quantity","text":"<p>This sample shows how to check the availability of materials using the BAPI BAPI_MATERIAL_AVAILABILITY.</p>"},{"location":"samples/retrieve-stock-quantity/#about","title":"About","text":"<p>BAPI_MATERIAL_AVAILABILITY shows the availability of a material.  This availability provides the so-called ATP (stock quantity Available To Promise).  BAPI_MATERIAL_AVAILABILITY requires at least three import parameters: </p> <ul> <li>the Plant (PLANT)</li> <li>the material number (MATERIAL) </li> <li>the unit (UNIT) </li> </ul> <p>The Windows form for the BAPI BAPI_MATERIAL_AVAILABILITY contains the following elements:</p> <ul> <li>Three text boxes for import parameters: txtPlant, txtMaterial and txtUnit </li> <li>One Button: btnGetQuantity </li> <li>Two text boxes to display results: txtStock and txtBAPIMessage</li> </ul> <p></p>"},{"location":"samples/retrieve-stock-quantity/#call-bapi_material_availability","title":"Call BAPI_MATERIAL_AVAILABILITY","text":"<p>Follow the steps below to call the BAPI API_MATERIAL_AVAILABILITY:</p> <ol> <li>Connect to the SAP system using <code>R3Connection</code>.</li> <li>Create an RFCFunction object using <code>CreateFunction</code>.</li> <li>Assign the import parameters to the RFCFunction object.</li> <li>Execute the function module using <code>Execute</code>.</li> <li>If the BAPI returns an error, display the error message in the Windows form.  If no error occurred, the BAPI returns the parameter AV_QTY_PLT that contains the stock quantity in the given unit.  Display the stock quantity in the Windows form.</li> </ol> BAPI_MATERIAL_AVAILABILITY<pre><code>private void btnGetQuantity_Click(object sender, System.EventArgs e)\n        {\n            try\n            {\n\n                // Set your ERPConnect license\n                LIC.SetLic(\"xxxx\");\n\n                // Open the connection to SAP\n                using var connection = new R3Connection(\n                    host: \"server.acme.org\",\n                    systemNumber: 00,\n                    userName: \"user\",\n                    password: \"passwd\",\n                    language: \"EN\",\n                    client: \"001\")\n                {\n                    Protocol = ClientProtocol.NWRFC,\n                };\n\n                connection.Open();\n\n                // Create a Bapi object, fill parameters and execute\n                RFCFunction f = connection.CreateFunction(\"BAPI_MATERIAL_AVAILABILITY\");\n                f.Exports[\"PLANT\"].ParamValue = txtPlant.Text;\n                f.Exports[\"MATERIAL\"].ParamValue = txtMaterial.Text;\n                f.Exports[\"UNIT\"].ParamValue = txtUnit.Text;\n                f.Execute();\n\n                // Read the import structure RETURN to provide possible Messages\n                RFCStructure BapiRet = f.Imports[\"RETURN\"].ToStructure();\n                txtBAPIMessage.Text = BapiRet[\"MESSAGE\"].ToString();\n\n                // Fill textbox with stock quantity\n                txtStock.Text = f.Imports[\"AV_QTY_PLT\"].ToString();\n            }\n            catch (ERPException e1)\n            { MessageBox.Show(e1.Message); }\n        }\n</code></pre> <p>Output:</p> <ul> <li>User enters a non-existing material number: </li> <li>User enters a valid material number: </li> </ul>"},{"location":"samples/retrieve-texts-from-a-sales-order/","title":"Retrieve Texts from a Sales Order","text":"<p>This sample shows how to get texts from sales orders using the function module RFC_READ_TEXT.</p>"},{"location":"samples/retrieve-texts-from-a-sales-order/#about","title":"About","text":"<p>Sales orders can store different kinds of texts. The texts can be attached to the order header or the order items. Use the SAP standard function module RFC_READ_TEXT to retrieve the texts. RFC_READ_TEXT requires the following table input (table TEXT_LINES) for each text you want to fetch:</p> <ul> <li>TDOBJECT is the name of the text object, e.g., VBBK for sales order header or VBBP for sales order item.</li> <li>TBNAME is the key, e.g., in case of VBBP it is the sales order number and the Sales order item number.</li> <li>TDID is the text ID that defines the text type, e.g., 0001 for Material sales text.</li> <li>TDSPRAS is the language key.</li> </ul>"},{"location":"samples/retrieve-texts-from-a-sales-order/#look-up-text-information-in-sap","title":"Look up Text Information in SAP","text":"<p>Follow the steps below to look up the correct text name, text object and text ID of a text in SAP:</p> <ol> <li>Open the sales order.</li> <li>Access item texts via More &gt; Goto &gt; Item &gt; Texts or access header texts via More &gt; Goto &gt; Header &gt; Texts.</li> <li>Click [Detail] (magnifying glass icon). The text editor opens.</li> <li>Navigate to Goto &gt; Header. The window \"Text Header\" opens. </li> </ol> <p>Tip</p> <p>Use SAP transaction SE75 to look up all available text objects and the underlying text IDs.</p>"},{"location":"samples/retrieve-texts-from-a-sales-order/#call-rfc_read_text","title":"Call RFC_READ_TEXT","text":"<p>The following sample code calls RFC_READ_TEXT to query the item text of a sales order:</p> RFC_READ_TEXT<pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing (R3Connection con = new R3Connection())\n{\n    con.UserName = \"SAPUser\";\n    con.Password = \"SAPPassword\";\n    con.Language = \"EN\";\n    con.Client = \"800\";\n    con.Host = \"sap-erp-as05.example.com\";\n    con.SystemNumber = 00;\n    con.Protocol = ClientProtocol.NWRFC; //use ClientProtocol.RFC for classic RFC library\n\n    con.Open();\n}\n\n// Create function object\nRFCFunction func = con.CreateFunction(\"RFC_READ_TEXT\");\n\n// Add a new table row and fill it\nRFCStructure newrow = func.Tables[\"TEXT_LINES\"].Rows.Add();\nnewrow[\"TDOBJECT\"] = \"VBBP\"; // Text object\nnewrow[\"TDNAME\"] = \"0000008221000010\"; // Key\nnewrow[\"TDID\"] = \"0001\"; // Text-ID\nnewrow[\"TDSPRAS\"] = \"EN\"; // Language\n\n//Execute the function          \nfunc.Execute();\n\n// Loop the table\nforeach(RFCStructure row in func.Tables[\"TEXT_LINES\"].Rows)\n    Console.WriteLine(row[\"TDLINE\"].ToString());\n\ncon.Close();\n\nConsole.WriteLine(\"\");\nConsole.WriteLine(\"Press enter to quit.\");\nConsole.ReadLine();\n</code></pre> <p>Output:</p> <p></p>"},{"location":"samples/retrieve-the-quantity-of-a-purchase-order-that-has-already-been-received/","title":"Retrieve the Quantity of a Purchase Order that has already been received","text":"<p>This sample shows how to get the history of a purchase order using BAPI_PO_GETDETAIL to find out which part of the quantity has already been received.</p> BAPI_PO_GETDETAIL<pre><code>public Decimal GetPODetail(string BestellNr, string BestellPos)\n{\n\n    RFCFunction func = connection.CreateFunction(\"BAPI_PO_GETDETAIL\");\n    func.Exports[\"PURCHASEORDER\"].ParamValue = BestellNr;\n    func.Exports[\"HISTORY\"].ParamValue = \"X\";\n    func.Exports[\"ITEMS\"].ParamValue = \" \";\n    func.Execute();\n\n     // Check Return-Table\n    for(int i=0; i &lt; func.Tables[\"PO_ITEM_HISTORY_TOTALS\"].RowCount; i++)\n    {\n        if (func.Tables[\"PO_ITEM_HISTORY_TOTALS\"].Rows[i,\"PO_ITEM\"].ToString().Equals(BestellPos))\n        {\n            return (decimal)func.Tables[\"PO_ITEM_HISTORY_TOTALS\"].Rows[i,\"DELIV_QTY\"];\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"samples/rfc-server-functions/","title":"RFC Server Functions","text":"<p>This sample shows how to create, register and use RFC server functions that add numbers.</p>"},{"location":"samples/rfc-server-functions/#initialize-rfc-server-functions","title":"Initialize RFC Server Functions","text":"<p>In the following sample applications a simple RFC server function is created that allows ABAP programs to add numbers.</p> Example with Scalar ParametersTable ParametersStructure ParametersStructure Output <pre><code>using ERPConnect; \n\nstatic void Main(string[] args) \n{ \n   RFCServer s = new RFCServer();\n   s.GatewayHost = \"sap-erp-as05.example.com\"; \n   s.GatewayService = \"sapgw11\"; \n   s.ProgramID = \"ERPTEST\"; \n\n   s.IncomingCall+=new ERPConnect.RFCServer.OnIncomingCall(s_IncomingCall); \n\n   RFCServerFunction f = s.RegisteredFunctions.Add(\"Z_ADD\"); \n\n   f.Imports.Add(\"NUMBER1\",RFCTYPE.INT); \n   f.Imports.Add(\"NUMBER2\",RFCTYPE.INT); \n   f.Exports.Add(\"RES\",RFCTYPE.INT); \n\n   s.Start(); \n\n   Console.Write( \"Server is running. Press any key to exit.\"); \n   Console.ReadLine(); \n}\n</code></pre> <p>Two input parameters (NUMBER1 and NUMBER2) are added in a new function (Z_ADD).  The result (RES) is passed back to the calling ABAP program, see Call RFC Server Functions in ABAP. </p> <pre><code>using ERPConnect; \n\nstatic void Main(string[] args)\n{\n\n    static RFCServer s = new RFCServer();\n    s.GatewayHost = \"SAPServer\";\n    s.GatewayService = \"sapgw00\";\n    s.ProgramID = \"ERPConnectTEST\";\n\n    s.IncomingCall += new RFCServer.OnIncomingCall(s_IncomingCall);\n\n    RFCServerFunction f = s.RegisteredFunctions.Add(\"Z_ADD_2\");\n\n    f.Exports.Add(\"RES\", RFCTYPE.INT);\n\n    RFCTable numbertable = f.Tables.Add(\"NUMBERS\");\n    numbertable.Columns.Add(\"NUMB\", 10, 0, RFCTYPE.NUM); \n\n    s.Start();\n\n    Console.WriteLine(\"Press Enter to quit\");\n    Console.ReadLine();\n}\n</code></pre> <p>A table (NUMBERS) with a column (NUMB) is added to a table collection using <code>Add()</code>. The result (RES) is passed back to the calling ABAP program, see Call RFC Server Functions in ABAP. </p> <pre><code>using ERPConnect; \n\nstatic void Main(string[] args)\n{\n    static RFCServer s = new RFCServer();\n    s.GatewayHost = \"hamlet\";\n    s.GatewayService = \"sapgw11\";\n    s.ProgramID = \"ERPTEST\";\n\n    s.IncomingCall += new RFCServer.OnIncomingCall(s_IncomingCall);\n\n    RFCServerFunction f = s.RegisteredFunctions.Add(\"Z_ADD_3\");\n\n    RFCTableColumnCollection Columns = new RFCTableColumnCollection ();\n    Columns.Add(\"NUMB\", 10, 0, RFCTYPE.NUM);\n    Columns.Add(\"NUMB2\", 10, 0, RFCTYPE.NUM);\n\n    f.Imports.Add(\"NUMBERS\",Columns );\n    f.Exports.Add(\"RES\", RFCTYPE.INT);\n\n    s.Start();\n\n    Console.WriteLine(\"Press Enter to quit\");\n    Console.ReadLine();\n}\n</code></pre> <p>A structure (NUMBERS) with 2 columns (NUMB1 and NUMB2) is added to a column collection via <code>RFCTableColumnCollection()</code>.  The result (RES) is passed back to the calling ABAP program, see Call RFC Server Functions in ABAP. </p> <pre><code>using ERPConnect; \n\nstatic void Main(string[] args)\n{\n\n    static RFCServer s = new RFCServer();\n    s.GatewayHost = \"hamlet\";\n    s.GatewayService = \"sapgw11\";\n    s.ProgramID = \"ERPTEST\";\n\n    s.IncomingCall += new RFCServer.OnIncomingCall(s_IncomingCall);\n\n    RFCServerFunction f = s.RegisteredFunctions.Add(\"Z_ADD_4\");\n\n    RFCTableColumnCollection Columns = new RFCTableColumnCollection ();\n    Columns.Add(\"NUMB1\", 10, 0, RFCTYPE.NUM);\n    Columns.Add(\"NUMB2\", 10, 0, RFCTYPE.NUM);\n\n    RFCTableColumnCollection EXColumns = new RFCTableColumnCollection();\n    EXColumns.Add(\"NUMB1\", 10, 0, RFCTYPE.NUM);\n    EXColumns.Add(\"NUMB2\", 10, 0, RFCTYPE.NUM);\n\n    f.Imports.Add(\"NUMBERS\",Columns );\n    f.Exports.Add(\"EXNUMBERS\", EXColumns);\n\n    s.Start();\n\n    Console.WriteLine(\"Press Enter to quit\");\n    Console.ReadLine();\n}\n</code></pre> <p>Two structures (NUMBERS and EXNUMBERS) with 2 columns (NUMB1 and NUMB2) are added to column collections via <code>RFCTableColumnCollection()</code>.  One structure (NUMBERS) is used for import and the other (EXNUMBERS) is passed back to the calling ABAP program, see Call RFC Server Functions in ABAP.</p>"},{"location":"samples/rfc-server-functions/#handle-incoming-calls","title":"Handle Incoming Calls","text":"<p>The following code shows how the IncomingCall event is handled:</p> Example with Scalar ParametersTable ParametersStructure ParametersStructure Output <pre><code>private static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction) \n{ \n   if (CalledFunction.FunctionName==\"Z_ADD\") \n   { \n      Int32 i1 = (Int32)CalledFunction.Imports[\"NUMBER1\"].ParamValue; \n      Int32 i2 = (Int32)CalledFunction.Imports[\"NUMBER2\"].ParamValue; \n      Int32 res = i1 + i2; \n      CalledFunction.Exports[\"RES\"].ParamValue = res; \n      Console.WriteLine(\"Incoming Call\"); \n   } \n   Else \n      throw new ERPConnect.ERPException(\"Function unknown\"); \n}\n</code></pre> <p>The result is returned in the scalar export parameter RES.</p> <pre><code>static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)\n{\n    Console.WriteLine(\"Incoming call!!\");\n\n    Int32 res = 0;\n\n    foreach (RFCStructure row in CalledFunction.Tables[\"NUMBERS\"].Rows)\n        res += Convert.ToInt32(row[\"NUMB\"]);\n\n    CalledFunction.Exports[\"RES\"].ParamValue = res;\n}\n</code></pre> <p>Use the object hierarchy to iterate through the rows and add the values.  The result is returned in the scalar export parameter RES.</p> <pre><code>static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)\n{\n    Console.WriteLine(\"Incoming call!!\");\n\n    Int32 res = 0;\n    RFCStructure numberstruc = CalledFunction.Imports[\"NUMBERS\"].ToStructure();\n\n    Int32 i1 = Convert.ToInt32(numberstruc[\"NUMB\"].ToString());\n    Int32 i2 = Convert.ToInt32(numberstruc[\"NUMB2\"].ToString());\n\n    res = i1 + i2;\n\n    CalledFunction.Exports[\"RES\"].ParamValue = res;\n}\n</code></pre> <p>The result is returned in the scalar export parameter RES.</p> <pre><code>static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)\n{\n    Console.WriteLine(\"Incoming call!!\");\n\n    RFCTableColumnCollection EXColumns = new RFCTableColumnCollection();\n    EXColumns.Add(\"NUMB1\", 10, 0, RFCTYPE.NUM);\n    EXColumns.Add(\"NUMB2\", 10, 0, RFCTYPE.NUM);\n\n    CalledFunction.Exports.Add(\"EXNUMBER\", EXColumns);\n    RFCStructure numberstruc = CalledFunction.Imports[\"NUMBERS\"].ToStructure();\n\n    Int32 i1 = Convert.ToInt32(numberstruc[\"NUMB1\"].ToString());\n    Int32 i2 = Convert.ToInt32(numberstruc[\"NUMB2\"].ToString());\n\n    RFCStructure EXnumbers = CalledFunction.Exports[\"EXNUMBERS\"].ToStructure();\n    EXnumbers[\"NUMB1\"] = i1 + 1;\n    EXnumbers[\"NUMB2\"] = i2 + 98;\n}\n</code></pre> <p>The values from the IMPORT collection (numberstruc) are set in variables.  Then different values are added to them and are written back to the EXPORT collection (EXnumbers).</p> <p>The import parameters are passed by the calling SAP system.  The export parameters are passed back to SAP.</p>"},{"location":"samples/rfc-server-functions/#call-rfc-server-functions-in-abap","title":"Call RFC Server Functions in ABAP","text":"<p>The following ABAP code is used to call the new function Z_ADD in the remote destination ERPTEST.</p> Example with Scalar ParametersTable ParametersStructure ParametersStructure Output <pre><code>REPORT z_add_test \n\nDATA result TYPE i.\nCALL FUNCTION 'Z_ADD' DESTINATION 'ERPTEST' \n   EXPORTING \n      number1 = 26 \n      number2 = 25 \n   IMPORTING \n      res = result. \n   WRITE: / 'Result: ', result.  \n</code></pre> <p>The two numbers 26 and 25 are passed, and the result 51 is passed back. </p> <pre><code>REPORT  zaddtest2 \n\nDATA res TYPE i.\nDATA numbs LIKE zaddstruc OCCURS 0 WITH HEADER LINE.\n\nnumbs-numb = '1'.\nAPPEND numbs.\nnumbs-numb = '2'.\nAPPEND numbs.\nnumbs-numb = '3'.\nAPPEND numbs.\n\nCALL FUNCTION 'Z_ADD_2' DESTINATION 'ERPConnectTEST'\n  IMPORTING\n    res     = res\n  TABLES\n    numbers = numbs.\n\nWRITE: / 'Result: ', res.\n</code></pre> <p>The two numbers 1, 2 and 3 are passed, and the result 6 is passed back. </p> <pre><code>REPORT  ZADDTEST3\n\nDATA res TYPE i.\nDATA numbs LIKE zaddstruc2.\n\nnumbs-numb1 = '1'.\nnumbs-numb2 = '2'.\n\nCALL FUNCTION 'Z_ADD_3' DESTINATION 'ERPTEST'\n  EXPORTING\n    NUMBERS       = numbs\n IMPORTING\n   RES           = res.\n\nWRITE: / 'Result: ', res.\n</code></pre> <p>The two numbers 1 and 2 are passed, and the result 3 is passed back. </p> <pre><code>REPORT  ZADDTEST4                               .\n                            .\nDATA numbs LIKE zaddstruc2.\nDATA exnumbers like zaddstruc2.\n\nnumbs-numb1 = '1'.\nnumbs-numb2 = '2'.\n\nCALL FUNCTION 'Z_ADD_4' DESTINATION 'ERPTEST'\n  EXPORTING\n    NUMBERS       = numbs\n   IMPORTING\n   EXNUMBERS      = exnumbers.\n\nWRITE: / 'First result is (added 1): ', exnumbers-numb1 .\nWRITE: / 'Second result is (added 98): ', exnumbers-numb2 .\n</code></pre> <p>The two numbers 1 and 2 are passed, and the results 2 and 100 are passed back. </p>"},{"location":"samples/send-a-matmas-idoc/","title":"Send a MATMAS IDoc","text":"<p>This sample shows how to create and send a MATMAS IDoc.</p> <p>Note</p> <p>This sample only creates basic data. To add more sophisticated data, look up the IDoc documentation via SAP transaction WE60 to find out more about the segments.</p>"},{"location":"samples/send-a-matmas-idoc/#send-a-matmas-idocs","title":"Send a MATMAS IDocs","text":"<p>Follow the steps below to send a MATMAS IDoc:</p> <ol> <li>Connect to the SAP system using <code>R3Connection</code>. </li> <li>Use <code>CreateEmptyIdoc</code> to instance an empty IDoc.</li> <li>Provide receiver and sender information. </li> <li>Use `CreateSegment create the needed segments.</li> <li>Fill in the fields in the IDoc segments.</li> <li>Send the IDoc using <code>Send</code>. </li> <li> <p>Run the program and check the result.</p> <pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open(false);\n\nERPConnect.Idocs.Idoc id = con.CreateEmptyIdoc(\"MATMAS01\",\"\");\n\n// Fill header data\nid.SNDPRN = \"ERPCONNECT\";\nid.SNDPOR = \"ERPCONNECT\";\nid.SNDPRT = \"LS\";\n\nid.RCVPRN = \"ECW_00_800\";\nid.RCVPRT = \"LS\";\nid.MESTYP = \"MATMAS\";\n\n// Fill basic data\nERPConnect.Idocs.IdocSegment e1maram = id.CreateSegment(\"E1MARAM\");\ne1maram.Fields[\"MATNR\"].FieldValue = \"DEV003\"; // Material Number\ne1maram.Fields[\"MTART\"].FieldValue = \"FERT\"; // Material Type\ne1maram.Fields[\"MATKL\"].FieldValue = \"001\"; //  Material Group\ne1maram.Fields[\"MEINS\"].FieldValue = \"PCE\"; // Base Unit of Measure\ne1maram.Fields[\"MBRSH\"].FieldValue = \"M\"; // Industry sector\ne1maram.Fields[\"BRGEW\"].FieldValue = \"1\"; // Gross Weight\ne1maram.Fields[\"NTGEW\"].FieldValue = \"1\"; // Net Weight\ne1maram.Fields[\"GEWEI\"].FieldValue = \"KG\"; // Weight Unit\n\nid.Segments.Add(e1maram);\n\n// Fill text data\nERPConnect.Idocs.IdocSegment e1maktm = id.CreateSegment(\"E1MAKTM\");\ne1maktm.Fields[\"SPRAS\"].FieldValue = \"E\"; // Language Key\ne1maktm.Fields[\"MAKTX\"].FieldValue = \"my Article\"; // Description Text\n\ne1maram.ChildSegments.Add(e1maktm);\n\n// Send IDoc\nid.Send();\n\n\nConsole.WriteLine(\"Ready..\");\nConsole.ReadLine();\n</code></pre> </li> </ol> <p>Output:</p> <p></p>"},{"location":"samples/send-a-matmas-idoc/#related-links","title":"Related Links","text":"<ul> <li>Prerequisites for working with IDocs</li> <li>Reveive an IDoc</li> <li>Send an ORDER IDoc</li> <li>Send a STATUS IDoc</li> </ul>"},{"location":"samples/send-a-simple-status-idoc/","title":"Send a STATUS IDoc","text":"<p>The example below shows how to send a STATUS IDoc. </p>"},{"location":"samples/send-a-simple-status-idoc/#about","title":"About","text":"<p>The STATUS message type is used to manipulate the status of another outbound IDoc e.g.,  when a subsystem receives an IDoc and acknowledges the receive with a status change. STATUS is a simple IDoc that contains only one data record.</p> <p>Note</p> <p>Make sure to configure your SAP system to receive IDocs.</p>"},{"location":"samples/send-a-simple-status-idoc/#send-a-status-idoc","title":"Send a STATUS IDoc","text":"<p>Follow the steps below to send a STATUS IDoc:</p> <ol> <li>Connect to the SAP system using <code>R3Connection</code>. </li> <li>Inquire the IDoc number of the IDoc to be manipulated and read the input.</li> <li>Use <code>CreateIdoc</code> to instance a valid IDoc object.  \"SYSTAT01\" is the IDoc type for the appropriate message type STATUS. </li> <li>Provide receiver and sender information. </li> <li>Fill in the following fields in segment E1STATS: <ul> <li>the new status code (STATUS)</li> <li>date and time (LOGDAT, LOGTIM) </li> <li>the number of the IDoc to be manipulated</li> </ul> </li> <li>Send the IDoc using the <code>Send</code>.  </li> <li> <p>Run the program using and check the result.</p> <pre><code>using System;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\n// Inquire the IDoc number of the IDoc to be manipulated and read the input.    \nConsole.WriteLine(\"Which IDoc number would you like to manipulate?\");  \nstring IdocNo = Console.ReadLine(); \n\nIdoc i = connection.CreateIdoc(\"SYSTAT01\",\"\");\n\n// Fill Message Type \ni.MESTYP = \"STATUS\"; \n\n// Fill Information about IDoc Reciever \ni.RCVPRN = \"PT4_800\"; // Partner number \ni.RCVPRT = \"LS\"; // Partner type \n\n// Fill information about IDoc sender \ni.SNDPOR = \"ERPCONNECT\"; // Partner port \ni.SNDPRN = \"ERPCONNECT\"; // Partner number \ni.SNDPRT = \"LS\"; // Partner type\n\n// Fill the right fields in the segments \ni.Segments[\"E1STATS\",0].Fields[\"LOGDAT\"].FieldValue = \"20210901\";\ni.Segments[\"E1STATS\",0].Fields[\"LOGTIM\"].FieldValue = \"152301\"; \ni.Segments[\"E1STATS\",0].Fields[\"STATUS\"].FieldValue = \"12\"; \ni.Segments[\"E1STATS\",0].Fields[\"DOCNUM\"].FieldValue = IdocNo; \n\ni.Send(); \nConsole.WriteLine(\"IDoc sent\"); \nConsole.ReadLine();\n</code></pre> </li> </ol> <p>Output:</p> <p>The status code of the manipulated IDoc increases from 3 (Data passed...) to 12 (Dispatch OK).  </p>"},{"location":"samples/send-a-simple-status-idoc/#related-links","title":"Related Links","text":"<ul> <li>Prerequisites for working with IDocs</li> <li>Reveive an IDoc</li> <li>Send an ORDER IDoc</li> <li>Send a MATMAS IDoc</li> </ul>"},{"location":"samples/send-an-order-idoc/","title":"Send an ORDER IDoc","text":"<p>This sample shows to create a sales order in the SAP system using the IDoc type ORDERS01.</p>"},{"location":"samples/send-an-order-idoc/#about","title":"About","text":"<p>An IDoc to create sales orders requires three different kinds of segment types:</p> <ul> <li>E1EDK01 is the main segment of an ORDERS01 IDoc.  We leave it empty, but it must be provided by the calling program to pass the SAP IDoc syntax check.</li> <li>E1EDP01 is the segment for a single order position. The field MENGE contains the quantity.  This segment can occur more than once.</li> <li>E1EDP19 represents an object definition and is a child of E1EDP01. In this case the object is a material number.  The field QUALF is therefore set to \"002\" and the material number is written into the IDTNR field. </li> </ul> <p>Tip</p> <p>Use SAP transaction WE60 to look up the segment documentation of IDoc type ORDERS01.</p>"},{"location":"samples/send-an-order-idoc/#prerequisites","title":"Prerequisites","text":"<p>Set up an RFC destination to enable calls from an SAP system to a subsystem, see Documentation: IDocs Prerequisites. If there is no partner profile found for an incoming IDoc, no order will be created.</p>"},{"location":"samples/send-an-order-idoc/#send-an-order-idoc","title":"Send an ORDER IDoc","text":"<p>The Windows form for the sales order contains the following elements:</p> <ul> <li>Two text boxes for input: txtMaterialNumber (material number) and txtQty (quantity).</li> <li> <p>One button: button1</p> <pre><code>using System;\nusing ERPConnect;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open(false);\n\nIdoc idoc = connection.CreateEmptyIdoc(\"ORDERS01\",\"\");\nidoc.MESTYP = \"ORDERS\";\n\n// Fill information about idoc sender\nidoc.SNDPRN = \"1172\"; // Partner number\nidoc.SNDPRT = \"KU\"; // Partner type\n\n// Create document header segment\nIdocSegment e1edk01 = idoc.CreateSegment(\"E1EDK01\");\nidoc.Segments.Add(e1edk01);\n\n// Create item segment\nIdocSegment e1edp01 = idoc.CreateSegment(\"E1EDP01\");\ne1edp01.Fields[\"MENGE\"].FieldValue = txtQty.Text;\nidoc.Segments.Add(e1edp01);\n\n// Create Object identification (material number in this case)\nIdocSegment e1edp19 = idoc.CreateSegment(\"E1EDP19\");\ne1edp19.Fields[\"QUALF\"].FieldValue = \"002\"; // 002 for material number\ne1edp19.Fields[\"IDTNR\"].FieldValue = txtMaterialNumber.Text; // material number\ne1edp01.ChildSegments.Add(e1edp19);\n\nidoc.Send();\nthis.lblInfo.Text = \"Idoc sent\";\n</code></pre> </li> </ul> <p>Output:</p> <p></p>"},{"location":"samples/send-an-order-idoc/#related-links","title":"Related Links","text":"<ul> <li>Prerequisites for working with IDocs</li> <li>Reveive an IDoc</li> <li>Send an MATMAS IDoc</li> <li>Send a STATUS IDoc</li> </ul>"},{"location":"samples/transactional-rfc-server/","title":"Transactional RFC Server","text":"<p>This sample shows how to build an RFC server that supports transactional RFCs.</p>"},{"location":"samples/transactional-rfc-server/#about","title":"About","text":"<p>How it works:</p> <ul> <li>An ABAP program sends two strings as export parameters to .NET. </li> <li>The strings are merged in .NET and inserted into an SQL server table. </li> <li>Within a tRFC context only export parameters and tables are sent to the RFC server. </li> </ul> <p>For more information on how to create RFC functions, see Documentation: RFC Server.</p> <p>Note</p> <p>A transactional RFC call cannot receive results.</p>"},{"location":"samples/transactional-rfc-server/#build-an-rfc-server-in-erpconnect","title":"Build an RFC Server in ERPConnect","text":"<p>The following code creates an RFC function Z_TRFC that reads two strings provided by an ABAP program:</p> Transactional RFCs<pre><code>static RFCServer s = new RFCServer();\n        static SqlConnection SQLConn = null;\n\nstatic void Main(string[] args)\n {\n  RFCServer s = new RFCServer();\n  s.GatewayHost = \"hamlet\";\n  s.GatewayService = \"sapgw11\";\n  s.ProgramID = \"ERPTEST\";\n  s.IncomingCall += new ERPConnect.RFCServer.OnIncomingCall(s_IncomingCall);\n  s.TRFCCheckTID += new RFCServer.OnTRFCCheckTID(s_TRFCCheckTID);\n  s.TRFCCommit += new RFCServer.OnTRFCCommit(s_TRFCCommit);\n  s.TRFCConfirm += new RFCServer.OnTRFCConfirm(s_TRFCConfirm);\n  s.TRFCRollback += new RFCServer.OnTRFCRollback(s_TRFCRollback);\n\n  // Add and register function module\n  RFCServerFunction f = s.RegisteredFunctions.Add(\"Z_TRFC\");\n  f.Imports.Add(\"STRING1\", RFCTYPE.CHAR,10 );\n  f.Imports.Add(\"STRING2\", RFCTYPE.CHAR,10 );\n\n  // start server\n  s.Start();\n  Console.Write(\"Server started. Please press any key to stop\");\n  Console.ReadLine();\n  s.Stop();        \n}\n</code></pre> <p>The following events are fired from the client within the server program:</p> <ul> <li>TRFCCheckTID</li> <li>IncomingCall</li> <li>TRFCCommit</li> <li>TRFCConfirm</li> <li>TRFCRollback</li> </ul> <pre><code>static void s_TRFCCheckTID(RFCServer Sender, string TID, ref bool OK)\n {\n  DataTable DtTID = GetDataTableBySQL(\"Select * from TransactionID \n  where TID = '\" + TID + \"' and XExecuted = 'False'\");\n\n  if (DtTID.Rows.Count &gt; 0)\n  {\n    Console.WriteLine(\"TransactionalID \" + TID + \" is already executed\");\n    OK = false;\n  }\n  else\n  {\n    Console.WriteLine(\"TRFCCheckTID is OK\");\n    InsertUpdateBySQL(\"Insert TransactionID (TID) Values ('\" + TID + \"')\");\n    OK = true;\n  }\n }\n\nstatic void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)\n {\n  if (CalledFunction.FunctionName == \"Z_TRFC\")\n  {\n   string string1 = CalledFunction.Imports[\"STRING1\"].ToString();\n   string string2 = CalledFunction.Imports[\"STRING2\"].ToString();\n   string string3 = string1 +  \" \" + string2 ;\n\n   InsertUpdateBySQL(\"Update TransactionID set Result = '\" + string3 + \"',\n   XExecuted = 'True' where TID = '\" + Sender.LastTID.ToString() + \"'\");\n\n  }\n  else\n  throw new ERPConnect.ERPException(\"Function unknown\");\n\n }\n\nstatic void s_TRFCCommit(RFCServer Sender, string TID, ref bool OK)\n {\n  Console.WriteLine(\"TransactionalID \" + TID + \" is committed\");\n  InsertUpdateBySQL(\"Update TransactionID set XCommit = 'True' where TID = '\" + TID + \"'\");\n  OK = false;\n }\n\nstatic void s_TRFCConfirm(RFCServer Sender, string TID, ref bool OK)\n {\n   Console.WriteLine(\"TransactionalID \" + TID + \" was confirmed\");\n   InsertUpdateBySQL(\"Update TransactionID set XConfirm = 'True' where TID = '\" + TID + \"'\");\n   OK = true;\n }\n\nstatic void s_TRFCRollback(RFCServer Sender, string TID)\n {\n   Console.WriteLine(\"TransactionalID \" + TID + \" is rolled back\");\n   InsertUpdateBySQL(\"Update TransactionID set XRolledBack = 'True' where TID = '\" + TID + \"'\");\n }\n</code></pre>"},{"location":"samples/transactional-rfc-server/#function-call-in-abap","title":"Function Call in ABAP","text":"<p>In the ABAP program the RFC function is called with the ABAP function CALL FUNCTION \u201cZ_TRFC\u201d IN BACKGROUND TASK for the asynchronous execution:</p> <pre><code>REPORT  ZTESTTRFC                             .\n\nCALL FUNCTION 'Z_TRFC' in background task DESTINATION 'ERPTEST'\n  EXPORTING\n    STRING1  = 'Hello'\n    STRING2  = 'World'.\n\nCommit Work.\n\nWRITE: / 'strings sent'.\n</code></pre>"},{"location":"samples/transactional-rfc-server/#workflow","title":"Workflow","text":"<ul> <li>The ABAP statement is not executed immediately, but with the EXPORTING and/or TABLES content stored in a SAP database table. </li> <li>COMMIT WORK starts the processing of the function</li> <li>.NET fires the event TRFCCheckTID.</li> <li>The transaction ID in the depicted example is checked to see if it can be found in the table on the SQL server. </li> <li>If the transaction ID is missing, or available but not executed yet, TRFCCheckTID returns True. </li> <li>The IncomingCall event is fired. </li> <li>If the processing is successful, the Commit event is fired, which confirms the execution. </li> <li>The Confirm event is fired to tidy up the transaction management.</li> </ul> <p>With tRFC the remote function is processed, even if at the time of the call the remote partner is not available or the connection was lost.</p> <p>Contrary to the synchronous RFC you can combine different functions for the remote processing into a logical unit or work (SAP-LUW).  Rollback on the whole unit is then possible. </p> <p>Tip</p> <p>Tools for monitoring and administration are available with SAP transaction SM58.</p>"},{"location":"samples/transactional-rfc-server/#table-on-the-sql-server","title":"Table on the SQL Server","text":"<p>The depicted example requires a table on the SQL server (TransactionID). The table includes: </p> <ul> <li>4 flags (XCommit, XConfirm, XRollback and XExecuted)</li> <li>a field with the transaction ID (TID) </li> <li>a field for the result (Result).</li> </ul>"},{"location":"samples/transfer-data-packets-with-readtable-class/","title":"Transfer data packets with ReadTable","text":"<p>This sample shows how to use the data packaging mechanism of the ReadTable class.</p>"},{"location":"samples/transfer-data-packets-with-readtable-class/#about","title":"About","text":"<p>Table extractions have a limit of table rows that can be extracted at once (between 100,000 and 1,000,000 depending on the system). To avoid this limitation, the ReadTable class offers a packaging mechanism to extract a huge number of table rows.</p> <p>Note</p> <p>The SAP standard function module RFC_READ_TABLE is not suited for mass data extraction.</p>"},{"location":"samples/transfer-data-packets-with-readtable-class/#set-up-data-packaging","title":"Set Up Data Packaging","text":"<p>Follow the steps below to set up data packaging:</p> <ol> <li>Set the ReadTable property <code>PackageSize</code> to a value greater than 0 to enable packaging.</li> <li>Set the ReadTable property <code>RaiseIncomingPackageEvent</code> to true to raise an event <code>IncomingPackage</code> when a new data packet is processed.</li> <li>Implement the <code>IncomingPackage</code> event to process each data packet. The packet is provided as a Datatable object.</li> </ol> Table MKPF<pre><code>using System;\nusing System.Data;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\nusing (R3Connection con = new R3Connection())\n{\n    con.UserName = \"SAPUser\";\n    con.Password = \"SAPPassword\";\n    con.Language = \"EN\";\n    con.Client = \"800\";\n    con.Host = \"sap-erp-as05.example.com\";\n    con.SystemNumber = 00;\n    con.Protocol = ClientProtocol.NWRFC; //use ClientProtocol.RFC for classic RFC library\n\n    con.Open();\n}\n\nvar read = new ReadTable(con)\n{\n    PackageSize = 10000,\n    RaiseIncomingPackageEvent = true,\n    TableName = \"MKPF\"\n};\n\nread.IncomingPackage += OnIncomingPackage;\n\nread.Run();\n\nConsole.WriteLine(\"Press enter to exit\");\nConsole.ReadLine();\nreturn;\n\nstatic void OnIncomingPackage(ReadTable sender, DataTable packageResult)\n{\n    Console.WriteLine($\"Processing data package with {packageResult.Rows.Count} rows\");\n}\n</code></pre> <p>Output:</p> <pre><code>Processing data package with 10000 rows\nProcessing data package with 10000 rows\nProcessing data package with 10000 rows\nProcessing data package with 10000 rows\nProcessing data package with 10000 rows\nProcessing data package with 10000 rows\nProcessing data package with 10000 rows\nProcessing data package with 798 rows\nPress enter to exit\n</code></pre>"},{"location":"samples/upload-documents-to-the-bds/","title":"Upload Documents to the BDS","text":"<p>This sample shows how to upload documents to the BDS (Business Document Service) using the function module BDS_BUSINESSDOCUMENT_CREA_TAB.</p>"},{"location":"samples/upload-documents-to-the-bds/#about","title":"About","text":"<p>Upload documents like excel sheets, word documents or images to the BDS by reading the file into a byte array and sending the array line after line to the function module BDS_BUSINESSDOCUMENT_CREA_TAB.</p> <p>The depicted example uploads an excel sheet to the BDS.  With small code changes to the document class, the document and MIME-type you can upload other document types.</p> <p>Tip</p> <p>You can look up the relevant document classes and types in SAP IMG &gt; Basis Services &gt; Archive Link &gt; Basic Customizing.</p> <p>In the sample code the class name (BKPF) represents the Accounting document type. You can find other classes in the Document Navigator (TA OAOR). The object key (100000000115642009) for BKPF is build from the company code, document number and the fiscal year.</p> <p></p>"},{"location":"samples/upload-documents-to-the-bds/#upload-an-excel-file-to-the-bds","title":"Upload an Excel File to the BDS","text":"<p>The following sample code uploads an excel sheet to the BDS:</p> BDS_BUSINESSDOCUMENT_CREA_TAB<pre><code>static void Main(string[] args)\n        {\n\n            try\n            {\n                string sPath = System.IO.Path.GetDirectoryName(@\"C:\\temp\\Material.xlsx\");\n                string sFile = System.IO.Path.GetFileName(@\"C:\\temp\\Material.xlsx\");\n                byte[] bytes;\n                R3Connection con = new R3Connection(\"ptmalg\", 05, \"xxx\", \"xxx\", \"en\", \"800\");\n                con.Open(false);\n\n                RFCFunction func = con.CreateFunction(\"BDS_BUSINESSDOCUMENT_CREA_TAB\");\n\n                RFCTable tbData = func.Tables[\"CONTENT\"];\n                RFCTable tbSig = func.Tables[\"SIGNATURE\"];\n                RFCTable tbComp = func.Tables[\"COMPONENTS\"];\n\n                func.Exports[\"CLASSNAME\"].ParamValue = \"BKPF\";\n                func.Exports[\"CLASSTYPE\"].ParamValue = \"BO\";\n                func.Exports[\"OBJECT_KEY\"].ParamValue = \"100000000115642009\";\n                func.Exports[\"BINARY_FLAG\"].ParamValue = \"X\";\n\n                bytes = System.IO.File.ReadAllBytes(@\"C:\\temp\\Material.xlsx\");\n\n                RFCStructure Content = new RFCStructure();\n\n                for (int offset = 0; offset &lt; bytes.Length; offset += 1022)\n                {\n                    byte[] ExportBytes = new byte[1022]; // In VB change the value of this array to 1021\n                    if (offset + 1022 &gt; bytes.Length)\n                        Array.Copy(bytes, offset, ExportBytes, 0, bytes.Length - offset);\n                    else\n                        Array.Copy(bytes, offset, ExportBytes, 0, 1022);\n                    Content = tbData.AddRow();\n                    Content[\"LINE\"] = ExportBytes;\n                }\n\n                RFCStructure recComp = tbComp.AddRow();\n\n                recComp[\"DOC_COUNT\"] = 1;\n                recComp[\"COMP_COUNT\"] = 1;\n                recComp[\"COMP_ID\"] = sFile;\n                recComp[\"MIMETYPE\"] = \"application/vnd.ms-excel\";\n                recComp[\"COMP_SIZE\"] = bytes.Length;\n\n                RFCStructure recSig = tbSig.AddRow();\n\n                recSig[\"DOC_COUNT\"] = 1;\n                recSig[\"DOC_ID\"] = \"\";\n                recSig[\"DOC_VER_NO\"] = 1;\n                recSig[\"DOC_VAR_ID\"] = 1;\n                recSig[\"DOC_VAR_TG\"] = \"OR\";\n                recSig[\"COMP_COUNT\"] = 1;\n                recSig[\"PROP_NAME\"] = \"BDS_DOCUMENTTYPE\";\n                recSig[\"PROP_VALUE\"] = \"BDS_SHEET\";\n\n                recSig = tbSig.AddRow();\n\n                recSig[\"DOC_COUNT\"] = 1;\n                recSig[\"DOC_ID\"] = \"\";\n                recSig[\"DOC_VER_NO\"] = 1;\n                recSig[\"DOC_VAR_ID\"] = 1;\n                recSig[\"DOC_VAR_TG\"] = \"OR\";\n                recSig[\"COMP_COUNT\"] = 1;\n                recSig[\"PROP_NAME\"] = \"BDS_DOCUMENTCLASS\";\n                recSig[\"PROP_VALUE\"] = \"XLS\";\n\n                recSig = tbSig.AddRow();\n\n                recSig[\"DOC_COUNT\"] = 1;\n                recSig[\"DOC_ID\"] = \"\";\n                recSig[\"DOC_VER_NO\"] = 1;\n                recSig[\"DOC_VAR_ID\"] = 1;\n                recSig[\"DOC_VAR_TG\"] = \"OR\";\n                recSig[\"COMP_COUNT\"] = 1;\n                recSig[\"PROP_NAME\"] = \"DESCRIPTION\";\n                recSig[\"PROP_VALUE\"] = sFile;\n\n                recSig = tbSig.AddRow();\n\n                recSig[\"DOC_COUNT\"] = 1;\n                recSig[\"DOC_ID\"] = \"\";\n                recSig[\"DOC_VER_NO\"] = 1;\n                recSig[\"DOC_VAR_ID\"] = 1;\n                recSig[\"DOC_VAR_TG\"] = \"OR\";\n                recSig[\"COMP_COUNT\"] = 1;\n                recSig[\"PROP_NAME\"] = \"LANGUAGE\";\n                recSig[\"PROP_VALUE\"] = \"EN\"; \n                func.Execute();\n                Console.WriteLine(\"Upload OK\");\n                Console.ReadLine();\n            }\n            catch (Exception e1)\n            {\n                Console.WriteLine(e1.Message);\n                Console.ReadLine();\n            }\n        }\n</code></pre> <p>Output:</p> <p></p>"},{"location":"samples/use-erpconnect-in-powershell/","title":"Use ERPConnect in PowerShell","text":"<p>This sample shows how to use ERPConnect in Windows PowerShell to connect to SAP, extract data from a table (MAKT) and print it to the console.</p>"},{"location":"samples/use-erpconnect-in-powershell/#prerequisites","title":"Prerequisites","text":"<ul> <li>The librfc32.dll has to be registered: <code>regsvr32 c:\\windows\\system32\\librfc32.dll</code></li> <li>The PowerShell script uses the file extension *** .PS1</li> </ul>"},{"location":"samples/use-erpconnect-in-powershell/#extract-sap-table-data-in-powershell","title":"Extract SAP Table Data in PowerShell","text":"<p>The following sample code calls connects to SAP and extracts the data of SAP table MAKT directly in Powershell or within the Powershell ISE:</p> Table MAKT<pre><code>$ErrorActionPreference = \"Stop\"\n\n# If ERPConnect is registered in the GAC then use the following line\n# [Reflection.Assembly]::LoadWithPartialName(\"ERPConnectStandard20.dll\")\n\n# If no is it also possible to load ERPConnect directly\n[Reflection.Assembly]::LoadFile(\"C:\\Program Files\\ERPConnect\\ERPConnectStandard20.dll\")\n\n# Set your ERPConnect license\n[ERPConnect.LIC]::SetLic(\"xxxx\")\n\n$hostname = \"server.acme.org\"\n$systemid = 00\n$username = \"user\"\n$password = \"passwd\"\n$lang     = \"EN\"\n$client   = \"001\"\n\n$connection = new-object ERPConnect.R3Connection($hostname, $systemid, $username, $password, $lang, $client)\n\n$connection.Protocol = [ERPConnect.ClientProtocol]::NWRFC\n$connection.Open()\n\n$readTable = new-object ERPConnect.Utils.ReadTable($connection)\n$readTable.AddField(\"MATNR\")\n$readTable.AddField(\"MAKTX\")\n$readTable.AddField(\"SPRAS\")\n$readTable.RowCount = 10\n$readTable.WhereClause = \"SPRAS = 'EN'\"\n$readTable.TableName = \"MAKT\"\n\n$readTable.Run()\n\n$result = $readTable.Result\n\n$result\n</code></pre> <p>Output:</p> <p></p>"},{"location":"samples/use-the-archivelink-bapi-to-send-barcodes-to-sap/","title":"Use the ArchiveLink BAPI to send Barcodes to SAP","text":"<p>This sample shows how to use the BAPI BAPI_BARCODE_SENDLIST to send a list of barcodes to SAP.  BAPI_BARCODE_SENDLIST is part of the ArchiveLink BAPI.</p>"},{"location":"samples/use-the-archivelink-bapi-to-send-barcodes-to-sap/#call-bapi_barcode_sendlist","title":"Call BAPI_BARCODE_SENDLIST","text":"<p>The following sample code sends a list of barcodes to SAP:</p> BAPI_BARCODE_SENDLIST<pre><code>using System;\nusing ERPConnect;\nusing ERPConnect.Utils;\n\n// Set your ERPConnect license\nLIC.SetLic(\"xxxx\");\n\n// Open the connection to SAP\nusing var connection = new R3Connection(\n    host: \"server.acme.org\",\n    systemNumber: 00,\n    userName: \"user\",\n    password: \"passwd\",\n    language: \"EN\",\n    client: \"001\")\n{\n    Protocol = ClientProtocol.NWRFC,\n};\n\nconnection.Open();\n\n// create the function\nRFCFunction barfunc = connection.CreateFunction(\"BAPI_BARCODE_SENDLIST\");\n\n// Create and fill the frist row\nRFCStructure row = barfunc.Tables[\"BARCODETABLE\"].AddRow();\nrow[\"BARCODE\"] = \"4711\"; \nrow[\"CONTREP\"] = \"Content Repository\"; \nrow[\"DOCID\"] = \"0045935682\"; \nrow[\"ARDATE\"] = \"20070701\"; \nrow[\"DOCTYPE\"] = \"ZTA\";\n\n// Create and fill the second row\nrow = barfunc.Tables[\"BARCODETABLE\"].AddRow();\nrow[\"BARCODE\"] = \"4713\";\nrow[\"CONTREP\"] = \"Content Repository\";\nrow[\"DOCID\"] = \"0045935683\";\nrow[\"ARDATE\"] = \"20070702\";\nrow[\"DOCTYPE\"] = \"ZTA\"; \n\n// Execute the function\nbarfunc.Execute();\n\n// process return structure\nRFCStructure ret = barfunc.Imports[\"RETURN\"].ToStructure();\n\nif (ret[\"TYPE\"].ToString().Equals(\"\"))\n    Console.WriteLine(\"No error reported\");\nelse\n    Console.WriteLine(\"Message: \" + ret[\"MESSAGE\"]);\n\nConsole.WriteLine(\"Press Enter to exit\");\nConsole.ReadLine();\n</code></pre>"}]}