# ERPConnect HelpCenter

> Develop your own SAP interfaces using our .NET programming library ERPConnect. Learn how to use ERPConnect by browsing our documentation, API reference, sample codes and more.

Full: https://helpcenter.theobald-software.com/erpconnect/llms-full.txt

# Getting Started

This section shows how to install and set up ERPConnect for the first time.

### Installation

1. [Download](https://theobald-software.com/en/download-trial/) a 30 day trial version of ERPConnect or download the latest version from the [customer portal](https://my.theobald-software.com/).
1. Run the ERPConnect executable (ERPConnectSetup.exe) to install ERPConnect. For information on system requirements, see [Requirements](../documentation/introduction/requirements/).
1. Download one of the following SAP libraries from the SAP Marketplace download area:
   - [Classic RFC library](../documentation/introduction/saplibraries/#client-protocol-rfc-librfc32dll)
   - [Netweaver RFC library](../documentation/introduction/saplibraries/#netweaver-rfc-library)
1. When using a 64-bit system, copy the 64-bit version of the library to the `C:\Windows\System32` folder.\
   When using a 32-bit system, copy the 32-Bit Version of librfc32.dll to the `C:\Windows\SysWoW64` folder.
1. Add the ERPConnect.dll class library as a reference to your project.\
   The library is located in the ERPConnect installation directory, e.g., `C:\Program Files\ERPConnect`.

For more information, see [Installation](../documentation/introduction/installation/#setup).

### Connect to SAP

1. Set the (demo) license **before** connecting to SAP.

   The demo license is provided as a .json file that is located in the installation directory of ERPConenct, e.g., `C:\Program Files\ERPConnect\ERPConnectLicense.json`. Use one of the following methods to set the license.

   - Read the license file and apply the license:

     ```csharp
     ERPConnect.LIC.LoadJsonLicense(string filename);

     ```

   - Copy and paste the content of the `ERPConnectLicense.json` file into a constant string in the code and use the string to set the license:

     ```text
     ERPConnect.LIC.SetJsonLicense(string json); 

     ```

   The demo license is provided in the `ERPConnectTrialKey.txt` file in the installation directory of ERPConenct, e.g., `C:\Program Files\ERPConnect\ERPConnectTrialKey.txt`. Use the following command to set the license number:

   ```csharp
   ERPConnect.LIC.SetLic("XXXXXXXXXX");

   ```

   Tip

   You can also provide the path to the ERPConnectTrialKey.txt file to set the license. Example:

   ```csharp
   ERPConnect.LIC.SetLic(File.ReadAllText("C:\\Program Files\\ERPConnect\\ERPConnectTrialKey.txt"));

   ```

1. Create an `R3Connection` object and define all [input parameters](../documentation/sap-connection/log-on-to-sap/#input-parameters).\
   Make sure to use an SAP dialog user with sufficient SAP authorization, see [Authorization Objects - SAP User Rights](../documentation/sap-authority-objects/).

   ```csharp
   using (R3Connection con = new R3Connection())
   {
       con.UserName = "SAPUser";
       con.Password = "SAPPassword";
       con.Language = "EN";
       con.Client = "800";
       con.Host = "sap-erp-as05.example.com";
       con.SystemNumber = 00;
       con.Protocol = ClientProtocol.NWRFC; //use ClientProtocol.RFC for classic RFC library

       con.Open();
   }

   ```

   ```csharp
   using (R3Connection con = new R3Connection())
   {
       con.UserName = "SAPUser";
       con.Password = "SAPPassword";
       con.Language = "DE";
       con.Client = "800";
       con.MessageServer = "sap-erp-as05.example.com";
       con.LogonGroup = "PUBLIC";
       con.SID = "ECC";
       con.Protocol = ClientProtocol.NWRFC; //use ClientProtocol.RFC for classic RFC library
       con.UsesLoadBalancing = true;

       con.Open();
   }

   ```

   ```csharp
   using (R3Connection con = new R3Connection())
   {
       con.UsesWebSocket = true;
       con.WebSocketHost = "myinstance-api.s4hana.cloud.sap";
       con.WebSocketPort = 443;
       con.TlsSettings = new TlsSettings
       {
           TrustAll = false,
           CryptoLibrary = @"C:\lib\sapcrypto.dll",
           ClientPse = "CLIENT.PSE"
       };

       con.AliasUser = "TESTUSER",
       con.Password = "Password",

       con.Open();
   }

   ```

1. Establish the connection using `Open()`.

1. Run the program to test the SAP connection.

For more information, see [Connect to SAP](../documentation/sap-connection/log-on-to-sap/).

### Next Steps

ERPConnect offers the following features for reading and writing data from and to SAP:

| Functionality / SAP Objects | Description | | --- | --- | | [**ABAP Code**](/erpconnect/documentation/abap) | Generate and execute ABAP code on-the-fly. | | [**BAPIs and Function Modules**](/erpconnect/documentation/bapis-and-function-modules) | Access BAPIs and RFC function modules to read and write data from and to SAP. | | [**BW Cube and BEx Queries**](/erpconnect/documentation/bw-cubes-and-bw-queries) | Extract data from SAP BW InfoCubes and BEx Queries. | | [**IDocs**](/erpconnect/documentation/idocs) | Send and receive SAP IDocs. | | [**Queries**](/erpconnect/documentation/queries) | Extract SAP queries (not BEx queries). | | [**RFC Server Functions**](/erpconnect/documentation/rfc-server) | Create, register and use RFC server functions. | | [**Tables**](/erpconnect/documentation/table) | Read SAP Tables directly via RFC. | | [**Transactions**](/erpconnect/documentation/transactions) | Execute SAP transactions via batch input. |
# User Documentation

The user documentation of Theobald Software is designed to introduce readers to the main functions of ERPConnect.

Theobald Software's claim is to keep the user documentation up to date according to the latest product version. Information concerning the older version is removed gradually from the documentation content. It is generally recommended to always install the latest version of the product.

Theobald Software's claim is to always update all the used screenshots of other software vendors, nevertheless this cannot be guaranteed.

©2024 Theobald Software GmbH. All rights reserved.

### Target group and audience

This documentation is created for all users of ERPConnect. The user documentation offers an overview of the interface, of the navigation and of the basic information to the users who never or rarely worked with the product. Experienced users can find more detailed information on more complex topics and use the user documentation for reference.

Reading the "Getting Started" section is the prerequisite for working with the product. The documentation can also be useful during the evaluation phase.

### Typographical conventions

| Convention | Used for marking: | Example | | --- | --- | --- | | bold & square brackets | Buttons | **[Edit]** | | bold | URL buttons | **Subscriptions** | | bold | Fields within a window, tab names | **Name** | | italics | Input values | *MATNR* | | italics | Drop-down menu options | *TextAndCode* |

#### Notes and warning messages

There are three main types of warning messages with the corresponding colors.

| Signal word | Color | Severity and meaning | | --- | --- | --- | | Note | Blue | Additional information | | Warning | Yellow | Information that is important for executing an error free procedure | | Tip | Green | Tips | | Recommendation | Green | Theobald Software recommendations and best practices advice |

Warning Messages comply with EN 82079 and formulated according the SAFE-method that is derived from German. The SAFE method is a procedure for systematically designing safety instructions. The severity of the danger as well as the source of the danger.

**"SAFE"** stands for:

**S**chwere der Gefahr (Signalwort) **A**rt und Quelle der Gefahr **F**olgen bei Missachtung der Gefahr **E**ntkommen (Maßnahmen zur Abwehr der Gefahr)

Translation: Severity of the danger (Signal word) Type and source of the danger Consequences of disregarding the danger Escape (measures to avert the danger)

Example:

Warning

**RFC_ERROR_SYSTEM_FAILURE - No more storage space available for extending an internal table**\
To avoid a memory overflow on the SAP source system and to avoid huge overheads, choose a package size that suits your memory capacity.

Note

The corresponding SQL command is generated dynamically and executed on the SAP server.

To use ERPConnect you need an SAP connection user with sufficient authorization in SAP. Authorizations are assigned via authorization objects in SAP. Redirect this page to your SAP Basis administrators to get the relevant authorization objects for your SAP connection user.

The authorizations in the section [General authorization objects](#general-authorization-objects) are required to establish an SAP connection with the SAP application server. The required authorizations for each feature / SAP object are listed in their respective section.

### SAP Authorization Profiles

Theobald Software collected and combined the necessary authorizations for all features / SAP objects into SAP roles. You can download the SAP profiles and upload them to your SAP system:

| Feature / SAP Object | SAP Role File | | --- | --- | | [General Authorization Objects](#general-authorization-objects) | [ZXTGENERAL.SAP](/erpconnect/assets/files/sap_roles/ZXTGENERAL.SAP) | | [BAPI](#bapi) | [ZXTBAPI.SAP](/erpconnect/assets/files/sap_roles/ZXTBAPI.SAP) | | [BW Cube](#bw-cube-bw-query) | [ZXTBWCUBE.SAP](/erpconnect/assets/files/sap_roles/ZXTBWCUBE.SAP) | | [Query](#query) | [ZXTQUERY.SAP](/erpconnect/assets/files/sap_roles/ZXTQUERY.SAP) | | [Table](#table) | [ZXTABLE.SAP](/erpconnect/assets/files/sap_roles/ZXTABLE.SAP) |

Note

If you still get an authorization error, ask SAP Basis to record an ST01-/ or SU53-authorization trace in SAP. This trace shows which authorizations objects are missing.

### General Authorization Objects

The following authorization objects are required to establish a connection to SAP.

Necessary SAP authorizations

```text
S_RFC           RFC_TYPE=FUGR; RFC_NAME=SYST; ACTVT=16
S_RFC           RFC_TYPE=FUGR; RFC_NAME=SRFC; ACTVT=16
S_RFC           RFC_TYPE=FUGR; RFC_NAME=RFC1; ACTVT=16
S_RFC           RFC_TYPE=FUGR; RFC_NAME=OCS_CRM; ACTVT=16

```

[Download SAP profile for general authorization](/erpconnect/assets/files/sap_roles/ZXTGENERAL.SAP)

### BAPI

Necessary SAP authorizations

```text
S_RFC            ACTVT=16; RFC_TYPE=FUGR; RFC_NAME=DDIF_FIELDINFO_GET, SDIFRUNTIME     

```

[Download SAP profile for BAPI Extractions](/erpconnect/assets/files/sap_roles/ZXTBAPI.SAP)

### BW Cube / BW Query

Authorizations for the underlying Queries, Cubes, InfoAreas and analysis need to be assigned via:

- `S_RS_COMP`
- `S_RS_COMP1`
- `S_RS_AUTH`

Necessary SAP authorizations

```text
S_RFC            RFC_TYPE=FUGR; RFC_NAME=RSOB; ACTVT=16
S_RFC            RFC_TYPE=FUGR; RFC_NAME=RRX1; ACTVT=16
S_TABU_NAM       ACTVT=03; TABLE=RSRREPDIR
S_TABU_NAM       ACTVT=03; TABLE=RSZGLOBV
S_TABU_NAM       ACTVT=03; TABLE=RSADMINC

```

Necessary SAP authorizations

```text
S_TABU_NAM       ACTVT=03; TABLE=DD03L

```

Alternatively, you can assign the SAP role template `S_RS_RREPU`.

[Download SAP profile for BW Cube / BW Query](/erpconnect/assets/files/sap_roles/ZXTBWCUBE.SAP)

### Query

Necessary SAP authorizations

```text
S_RFC            RFC_TYPE=FUGR; RFC_NAME=AQRC; ACTVT=16 

```

[Download SAP profile for SAP Query](/erpconnect/assets/files/sap_roles/ZXTQUERY.SAP)

### Table

Necessary SAP authorizations

```text
S_RFC            ACTVT=16; RFC_TYPE=FUGR; RFC_NAME=SDTX, SDIFRUNTIME, /THEO/READ_TABLE                   
S_TABU_DIS       ACTVT=03; DICBERCLS=XXXX
S_TABU_NAM       ACTVT=03; TABLE=DD02V, DD17S, DD27S, ENLFDIR
S_DSAUTH         ACTVT=16;    

```

XXXX (stands for a placeholder) is the authorization group for the table. To determine, which authorization group belongs to which table, check the table TDDAT - Maintenance Areas for Tables. If the table is not listed, the authorization group is &NC&. For authorizing specific tables use authorization object S_TABU_NAM instead of S_TABU_DIS.

[Download SAP profile for Table](/erpconnect/assets/files/sap_roles/ZXTABLE.SAP)

______________________________________________________________________

#### Related Links

- [SAP Help: Role Administration](https://help.sap.com/doc/saphelp_nw74/7.4.16/en-us/52/6714a9439b11d1896f0000e8322d00/content.htm)
- [SAP ONE Support Launchpad](https://launchpad.support.sap.com/#/notes/2855052)

The following section contains information on how to use the ABAP code class.

### About ABAP Code

The ABAPCode class offers nearly unlimited possibilities. You can execute ABAP code on the fly and retrieve the result in a string array.

For more information about the ABAP programming language, see [SAP Help: ABAP-Programming Language](https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abenabap_reference.htm).

The following section shows how to execute ABAP code and retrieve the result in a string array.

### How to Use the ABAP Code Class

Follow the steps below to create an ABAP interpreter:

1. Connect to the SAP system using `R3Connection`.
1. Add a new line of code to the dynamic report using `AddCodeLine`.
1. Execute the report using `Execute`.
1. Read the result set (regarding the ABAP list) using `GetResultLine`.

### Create an ABAP Interpreter

The following sample shows how to create a simple ABAP interpreter that executes a dynamic SQL statement.

```csharp
using System;
using ERPConnect;
using ERPConnect.Utils;

// Set your ERPConnect license
LIC.SetLic("xxxx");

// Open the connection to SAP
using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

const string code =
    """
    REPORT ztestreport NO STANDARD PAGE HEADING.

    TABLES kna1.

    DATA c TYPE i.

    SELECT COUNT(*) INTO c FROM kna1.

    WRITE: /'System time ', sy-timlo.
    WRITE: /'Number of rows in KNA1: ', c.
    """;

var abapCode = new ABAPCode
{
    Connection = connection
};

string[] lines = code.Split('\n');
foreach (string s in lines)
{
    abapCode.AddCodeLine(s.Trim());
}

if (abapCode.Execute())
{
    for (int i = 0; i < abapCode.ResultLineCount; i++)
    {
        Console.WriteLine(abapCode.GetResultLine(i));
    }
}
else
{
    Console.WriteLine($"ABAP Error: {abapCode.LastABAPSyntaxError}");
}

```

Output:

```text
System time  11:17:46
Number of rows in KNA1:       7.705

```

Function modules are single functions managed by the SAP Function Builder (transaction **SE37**) and developed in SAP's programming language ABAP.

Note

A BAPI/Function Module must have the attribute **Remote Enabled** to be called from outside the SAP system via the RFC protocol.

### About BAPIs/Function Modules

Every BAPI/Function Module provides import and export parameters. These parameters are used to pass or get scalar values. An exchange of tables is also possible.

The figure below shows the object hierarchy that is provided by ERPConnect to manage the exchange of imports, exports and table parameters.

This section contains a list of available resources for the BAPI/Function Module classes.

### Call BAPIs/Function Modules

Follow the steps below to call BAPIs/Function Modules:

1. Connect to the SAP system using `R3Connection`.
1. Create an RFCFunction object using `CreateFunction`.
1. Provide values to export parameters, table parameters or import parameters for the RFCFunction objects.
   - Export parameters:\
     `Exports["parameter_name"].ParamValue` or\
     `Exports["structure_name"].ToStructure()["parameter:name"]`.
   - Table parameters: `Tables["table_name"]["parameter_name"].ParamValue`
   - Import parameters:\
     `Imports["parameter_name"].ParamValue` or\
     `Imports["structure_name"].ToStructure()["parameter:name"]`.
1. Execute the BAPIs/function modules using `Execute`.

The following sample code calls the BAPI BAPI_REQUISITION_GETDETAIL to get the processing status of a purchase requisition:

```csharp
public static void BanfStatus(string Banf_Number)
{
    RFCFunction func = connection.CreateFunction("BAPI_REQUISITION_GETDETAIL");
    func.Exports["NUMBER"].ParamValue = Banf_Number; 

    func.Execute();

    if (func.Tables["Return"].RowCount > 0)
    {
     string rMessage = func.Tables["Return"].Rows[0, "MESSAGE"].ToString();
     Console.WriteLine(rMessage);
    }
    if (func.Tables["REQUISITION_ITEMS"].RowCount > 0)
    {

     foreach (RFCStructure dr in func.Tables["REQUISITION_ITEMS"].Rows)
     {
       Console.WriteLine("BelgNummer:" + dr["PREQ_NO"].ToString() + " Pos: " + 
       dr["PREQ_ITEM"].ToString() + " Status: " + dr["PROC_STAT"].ToString());
     }
}

```

Output:

### Samples

For a list of sample applications and sample codes refer to [Samples: BAPIs and Function Modules](../../../samples/#bapis-and-function-modules).

The *Function-Template-Generator* provided by ERPConnect generates reusable XML templates for Function Modules and BAPIs.

### Create XML Templates

1. Run the *FunctionTemplateGenerator.exe* in the ERPConnect directory `C:\Program Files\ERPConnect` to start the *Function-Template-Generator*.
1. Enter the name of a BAPI/Function Module that you want to use as a template.
1. Click **[Generate XML Template]**.
1. The window "SAP Login" opens. Enter your SAP credentials and click **[OK]**.
1. Save the XML file to your local hard drive.

### Use XML Templates

1. Create an XML template using the tool *FunctionTemplateGenerator.exe* located in the ERPConnect installation directory.
1. Add the XML file to your project as a resource.
1. Load the XML file into your program as shown in the sample code below.\
   Now you can use the RFCFunction-object instead of the `CreateFunction` / `CreateBAPI` methods.

```csharp
using (R3Connection con = new R3Connection("SAPServer", 00, "SAPUser", "Password", "EN", "800"))
{
    RFCFunction f = new RFCFunction("BAPI_CUSTOMER_GETDETAIL");
    f.Connection = con;

    StreamReader reader = new StreamReader(
        System.Reflection.Assembly.GetExecutingAssembly().
            GetManifestResourceStream
                ("PocketGetCustomer.BAPI_CUSTOMER_GETDETAIL.xml"));
    f.LoadFromXML(reader);
}

```

The following section shows the development process for an ASP.NET/ERPConnect project.

### Prerequisites

- Add the ERPConnect.dll class library as a reference to the project (the .dll is copied to the bin directory when compiling the project).
- Add the librfc32.dll to your bin directory, see [Requirements - 32/64-Bit Environment](../../introduction/requirements/#3264-bit-environment).

Warning

**The standard trial license does not support working in web environments.**\
To test ERPConnect with your ASP.NET project, apply for a test license number at [sales@theobald-software.com](mailto:sales@theobald-software.com).

### ASP.NET

The following sample shows how to create a purchase order using the *BAPI_PO_CREATE*. The sample uses an ASP page to enter data for a purchase order, see screenshot below.

Input:

```text
Vendor: 0000001070
Material: B-7000
Plant: 1000
Quantity: 10

```

#### Call BAPI_PO_CREATE

To create a purchase order using the *BAPI_PO_CREATE* BAPI, follow the steps below:

1. Establish a connection to the SAP system
1. Create an RFC-Function object for the BAPI *BAPI_PO_CREATE*.
1. Fill the structure *PO_HEADER* with the following values:
1. DOC_TYPE -> Order type (NB normal order)
1. PURCH_ORG -> Purchasing organization
1. PUR_GROUP -> Purchasing group
1. DOC_DATE -> Date
1. VENDOR -> Vendor number
1. Define the items *PLANT* and *PUR_MAT* (material number) in the table *PO_ITEMS*.
1. The values for the quantity (*QUANTITY*) and the delivery date (*DELIV_DATE*) must be placed in the table *PO_ITEM_SHEDULES*.
1. Execute the BAPI and process the return messages.

```csharp
private void Button1_Click(object sender, System.EventArgs e)
{
   // Set your ERPConnect license
    LIC.SetLic("xxxx");

    using var connection = new R3Connection(
        host: "server.acme.org",
        systemNumber: 00,
        userName: "user",
        password: "passwd",
        language: "EN",
        client: "001")
    {
        Protocol = ClientProtocol.NWRFC,
    };

    connection.Open();

   // Create a RFC-Function object
   RFCFunction func = connection.CreateFunction("BAPI_PO_CREATE");

   // Fill header structure
   RFCStructure Header = func.Exports["PO_HEADER"].ToStructure();
   Header["DOC_TYPE"]= "NB";
   Header["PURCH_ORG"] = "1000";
   Header["PUR_GROUP"] = "010";
   Header["DOC_DATE"]= ERPConnect.ConversionUtils.NetDate2SAPDate(DateTime.Now);
   Header["VENDOR"]= this.txtVendor.Text

   // Create an Item
   RFCTable items = func.Tables["PO_ITEMS"];
   RFCStructure item = items.AddRow();
   item["PO_ITEM"] = "1";
   item["PUR_MAT"] = this.txtMaterial.Text;
   item["PLANT"] = this.txtPlant.Text;

   // Create and fill shedules
   RFCTable shedules = func.Tables["PO_ITEM_SCHEDULES"];
   RFCStructure shedule = shedules.AddRow();
   shedule["PO_ITEM"] = "1";
   shedule["DELIV_DATE"] = ERPConnect.ConversionUtils.NetDate2SAPDate(DateTime.Now);
   shedule["QUANTITY"] = Convert.ToDecimal(this.txtQuan.Text);

   // Exceute BAPI and process return messages
   func.Execute();
   this.txtReturn.Text = "";
   this.txtReturn.Text += func.Tables["RETURN"].Rows[0, "MESSAGE"] + "\r\n";
}

```

Output:

```text
Message: Standard PO created under the number 4500018292

```

______________________________________________________________________

#### Related Links

- [Implement a connection pool](../../../samples/implement-a-connection-pool/)

The following section contains information on how to extract data from a Business Warehouse (BW) system.

The *BW* class was developed to extract data from SAP BW InfoCubes and QueryCubes (also known as BEx Queries). A common approach for using the *BW* class is to build and extract a BEx query that meets your business requirements.

Note

This section refers to BW Queries, for information on queries created by the SAP transactions **SQ02** and **SQ01**, see [SAP Query](../queries/).

### About BEx Queries and InfoCubes

BEx queries filter data to create reporting objects or views called InfoProviders for analyzing purposes. One type of InfoProviders are InfoCubes.

InfoCubes are multidimensional datasets that are used to store data e.g., characteristics (dimensions), key figures (measures or facts), units, time characteristics, or technical characteristics.\
You can add data from one or more InfoSource or InfoProviders to an InfoCube.

The following sample shows how to fetch data from a BW Query using ERPConnect.\
To allow external access to a BW Query the checkbox **Allow external access** has to be set to active in the preferences for the query.

### Call BW Queries

1. Connect to the SAP system using `R3Connection`.
1. Create a BWCube object using `CreateCube`. Its name is made up of the cube name and query name. The cube object offers a collection for all contained dimensions (Dimensions) and key figures (Measures).
1. Set the attribute `SelectForFlatMDX` of a cube component to *true* to add it to the query output.
1. To pass values, address the variables via the variables collection. There are range tables behind each variable.
1. Execute the BW query using `Execute`. The output is a table of the *DataTable* type.

Note

The denomination of the key figures via the query generation in the designer does not conform to the original technical name. That means key figures are addressed by the ordinal number, not the name.

```csharp
using System;
using System.Data;
using ERPConnect;
using ERPConnect.BW;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

BWCube cube = connection.CreateBWCube("0D_DECU/DECUQUERY1");

cube.Dimensions["0D_MATERIAL"].SelectForFlatMDX = true;
cube.Dimensions["0D_SOLD_TO"].SelectForFlatMDX = true;

cube.Measures[0].SelectForFlatMDX = true;
cube.Measures[1].SelectForFlatMDX = true;

DataTable result = cube.Execute();
foreach (DataRow row in result.Rows)
{
    foreach (DataColumn column in result.Columns)
    {
        Console.WriteLine($"{column.Caption}: {row[column]}");
    }

    Console.WriteLine();
}

```

Output:

```text
Material (SAP Demo): M18
Sold-to-Party (SAP Demo): Thomas Bush Inc.
Net&value of the invoice item in the docCurrency (SAP Demo): 398403,00
Clearing value in document currency (SAP Demo): 328206,00

Material (SAP Demo): M18
Sold-to-Party (SAP Demo): Toro Motor Company
Net&value of the invoice item in the docCurrency (SAP Demo): 234234,00
Clearing value in document currency (SAP Demo): 196959,00

Material (SAP Demo): M18
Sold-to-Party (SAP Demo): Calorad Inc.
Net&value of the invoice item in the docCurrency (SAP Demo): 111921,00
Clearing value in document currency (SAP Demo): 96837,00

Material (SAP Demo): PCSERVICEA
Sold-to-Party (SAP Demo): Infix Co.
Net&value of the invoice item in the docCurrency (SAP Demo): 84564,00
Clearing value in document currency (SAP Demo): 0,00

Material (SAP Demo): PCSERVICEA
Sold-to-Party (SAP Demo): Lampen-Markt GmbH
Net&value of the invoice item in the docCurrency (SAP Demo): 2826,00
Clearing value in document currency (SAP Demo): 0,00

Material (SAP Demo): PCSERVICEA
Sold-to-Party (SAP Demo): Minerva Industries
Net&value of the invoice item in the docCurrency (SAP Demo): 27759,00
Clearing value in document currency (SAP Demo): 0,00

Material (SAP Demo): PCSERVICEA
Sold-to-Party (SAP Demo): Nobil North Sea Limi
Net&value of the invoice item in the docCurrency (SAP Demo): 11118,00
Clearing value in document currency (SAP Demo): 0,00

```

______________________________________________________________________

#### Related Links

- [Execute BW Queries](../../../samples/execute-bw-queries/)

IDocs are electronic documents that can be sent from or to SAP systems.\
You can exchange IDocs between SAP systems or between one SAP system and an external application. ERPConnect provides a set of classes to send, receive and construct IDocs.

### About IDocs

An IDoc consists of one control record and several data records. The control record contains routing data and information about the sending and the receiving system. The data records are arranged hierarchically. A single data record is also called segment. One segment itself consists of several fields. For more information, see [SAP Help: Structure, Documentation, and Definition of IDoc Types](https://help.sap.com/viewer/8f3819b0c24149b5959ab31070b64058/7.40.18/en-US/4aa93e5005e24458e10000000a42189b.html).

Tip

You can use the transaction **WE60** to look up the structures of IDocs in SAP.

The figure below shows the IDoc object structure of ERPConnect.\
Each segment can contain child segments and every segment contains several field objects.

The IDoc class of ERPConnect offers support for both the IDoc schema and IDoc data located in XML-files.

The *IDoc-Schema-Generator* provided by ERPConnect generates an XML file that can be used to load IDoc schemas.\
Loading IDoc schemas via XML usually has higher performance than loading them via `CreateIdoc` or `CreateEmptyIdoc`, because no SAP connection is necessary.

Note

IDoc schema files contain the structure of an IDoc while IDoc data files contain the actual content of the IDoc.

### Create XML Templates

1. Run the *IdocSchemaGenerator.exe* in the ERPConnect directory `C:\Program Files\ERPConnect` to start the *IDoc-Schema-Generator*.
1. Enter the IDoc type you want to generate. If needed, enter enhancements.
1. Click **[Generate Now!]**.
1. The window "SAP Login" opens. Enter your SAP credentials and click **[OK]**.
1. Save the XML file to your local hard drive.

Example of an \*ORDERS01\* IDoc schema

```xml
xml version="1.0" encoding="ISO-8859-1" ?>

- <ORDERS01>
- <IDOC>
- <EDI_DC40>
<TABNAM>EDI_DC40TABNAM>
<IDOCTYP>ORDERS01IDOCTYP>
<MESTYP>ORDERS>MESTYP>
<SNDPRT>KUSNDPRT>
EDI_DC40>
<E1EDK01 />
- <E1EDK01>
<MENGE>10MENGE>
- <E1EDP10>
<QUALF>002QUALF>
<IDTNR>100-100IDTNR>
E1EDP19>

```

### Use XML Templates

1. Create an XML template using the tool *IDocSchemaGenerator.exe* located in the ERPConnect installation directory.
1. Use the method `LoadIdocSchema` tool to create an IDoc object from a schema file.
1. Load the IDoc data from a data file with the method `LoadXMLData`.

```csharp
using (R3Connection con = new R3Connection("SAPServer", 00, "SAPUser", "Password", "EN", "800"))
{ 
    Idoc i = new Idoc();  
    i.Connection = con; 

    i.LoadIdocSchema(@"ORDERS01.xsd");        
    i.LoadXMLData(@"OrderIdoc.xml");

    i.Send();
}

```

### Set Up an RFC Destination

To enable calls from an SAP system to a subsystem, the subsystem must be known to SAP.\
This can be done with an RFC destination.

An existing RFC destination is necessary for sending IDocs.

1. Use the transaction **SM59** to create a new RFC destination.
1. Fill the following fields of the destination:
   - Unique name of the new destination e.g., ERPTEST.
   - Connection Type = T (for TCP/IP).
   - Description.
   - ProgramID: A unique name that the server program uses to register on the SAP gateway.
   - Choose the option *Registered Server Program*.
1. Save the destination.
1. To test the RFC-Destination, click the button **[Test Connection]** while the program is running.\
   If everything works well, you should see a screen like the one below:

An example for a simple RFC server program can be found in section [RFC-Server](/erpconnect/documentation/rfc-server/create-rfc-functions/)

Note

If the RFC Destination is set to Unicode, the property *IsUnicode* of the RFCServer object must be set to *true*.

### Set Up a Test Environment for IDocs

To receive test IDocs, you can set up a test environment in your SAP system.\
Follow the steps below to set up a test environment that can send *MATMAS* IDocs for distributing material master data:

1. Define a Logical System to which the IDocs can be sent.\
   Use the transaction **SPRO** to open *Customizing* and navigate to *SAP Web Application Server -> ALE -> Sending and Receiving Systems -> Logical Systems -> Define Logical System* (this path is valid for Release 4.7). Create a new line and enter the name of the system e.g., ERPCONNECT and a short description.
1. Use the transaction **SM59** to create an RFC Destination, see [Set Up an RFC Destination](#set-up-an-rfc-destination).
1. Use the transaction **WE21** to create a *Transactional RFC* IDoc Port.\
   The name of the port must be unique and refer to the RFC destination defined in step 2.
1. Use the transaction **WE20** to create a Partner Profile for the logical system created in step 1.\
   Add an outbound parameter using the **[+]** button. For this example select *MATMAS* as the message type, *MATMAS05* as the IDoc basic type and enter the name of the port created in step 3 as the logical receiver port.
1. Use the transaction **BD10** to open the menu for sending IDocs. Enter the logical system as shown in the figure below and run the program via **[F8]**. The IDocs are created and sent to the specified port.

### Set Up Receiving IDocs

The following instructions show how to customize your SAP system for processing IDocs and creating sales orders.

1. Use the transaction **WE20** to create a Partner Profile.\
   In case of a SalesOrder IDoc, the external system acts like a customer. The customer number is the appropriate partner number. Use *KU* as the partner type.
1. Add an inbound parameter and select *ORDERS* as the message type and *ORDE* as the process code. That enables the SAP system to find the right routines for creating a sales order, when an IDoc is received.
1. Use the transaction **VOE2** to process the incoming data. The transaction creates a line in the *EDSDC table*. Assign the following parameters for the customer number that sends the IDoc: Sales organization, distribution channel, division, sales type.

This section shows how to receive and process an IDoc.\
To configure your SAP system to receive IDocs, see [Set Up a Test Environment for IDocs](../prerequisites/#set-up-a-test-environment-for-idocs).

### About

The following sample receives a *MATMAS* IDoc that contains material descriptions. The material descriptions are written into the console window to check the contents of the IDoc.

The *MATMAS* IDoc is analyzed using the *E2MARAM005* segment. Within this segment, several *E2MAKTM001* child segments contain material descriptions.

Tip

You can use the transaction **WE60** to look up the structures of IDocs in SAP.

### Receive a MATMAS IDoc

Follow the steps below to receive a MATMAS IDoc:

1. Create an RFC Server object to accept calls from SAP, see [RFC Server](/erpconnect/documentation/rfc-server/create-rfc-functions/) for more information.
1. To receive IDocs with the *RFCServer* object, set the property `CanReceiveIdocs` to *true*.
1. When an IDoc is received by ERPConnect, the event `IncomingIdoc` is triggered and a reference to the *RFCServer* object and to the *IDoc* object is transferred.
1. Use the `IncomingIdoc` event to read the data buffer of the child segment *E2MAKTM001*. The description text is located at index 4 with a length of 40 in *E2MAKTM001*.
1. Write the description texts into the console window.
1. Run the program.
1. Send an IDoc in SAP and check the result.

```csharp
using System;
using ERPConnect;
using ERPConnect.Idocs;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var server = new RFCServer();
server.Logging = true;
server.GatewayHost = "hamlet";
server.GatewayService = "sapgw11";
server.ProgramID = "ERPTEST";
server.CanReceiveIdocs = true;

server.InternalException += (_, exception) =>
{
    Console.WriteLine($"Internal error: {exception.Message}");
};

server.IncomingIdoc += (_, idoc) =>
{
    Console.WriteLine("Received Idoc " + idoc.IDOCTYP);
    IdocSegment e1maram = idoc.Segments["E2MARAM005", 0];
    for (int i = 0; i < e1maram.ChildSegments.Count; i++)
    {
        if (e1maram.ChildSegments[i].SegmentName != "E2MAKTM001")
        {
            continue;
        }

        string text = e1maram.ChildSegments[i].ReadDataBuffer(4, 40);
        Console.WriteLine($"Material text found: {text}");
    }
};

server.Start();

Console.WriteLine("Server is running. Press any key to exit.");
Console.ReadLine();

server.Stop();

```

Output:

In this case, 5 *E2MAKTM001* segments were found so 5 texts are passed.

Note

If you do not want to read the data buffer with offset and length of the texts, you can load an XML Schema instead, see [Templates](../idocs-schema-generator/).

______________________________________________________________________

#### Related Links

- [Setting Up a Test Environment for IDocs](../prerequisites/#set-up-a-test-environment-for-idocs)
- [Set Up Receiving IDocs](../prerequisites/#set-up-receiving-idocs)

This section shows how to send an IDoc.\
To configure your SAP system to send IDocs, see [Set Up a Test Environment for IDocs](../prerequisites/#set-up-a-test-environment-for-idocs).

There are two ways to create an IDoc object:

- `CreateIdoc` creates an IDoc with all segments located in the segment collections.\
  This is useful for sending simple IDocs.
- `CreateEmptyIdoc` and `CreateSegment` create only the needed segments.

### Send an IDoc

Follow the steps below to send IDocs:

1. Connect to the SAP system using `R3Connection`.
1. Use `CreateIdoc` or `CreateEmptyIdoc` to instance a valid *IDoc* object. Provide an object type for the IDocs, e.g., "SYSTAT01", "MATMAS01", "ORDERS01", etc.
1. Provide receiver and sender information.
1. Fill in the fields in the IDoc segments.
1. Send the IDoc using `Send`.
1. Run the program and check the result.

Tip

Use SAP transaction WE60 to look up the segment documentation of IDocs.

Note

Make sure to configure your SAP system to receive IDocs.

Examples:

```csharp
using System;
using ERPConnect;
using ERPConnect.Utils;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

// Inquire the IDoc number of the IDoc to be manipulated and read the input.    
Console.WriteLine("Which IDoc number would you like to manipulate?");  
string IdocNo = Console.ReadLine(); 

Idoc i = connection.CreateIdoc("SYSTAT01","");

// Fill Message Type 
i.MESTYP = "STATUS"; 

// Fill Information about IDoc Reciever 
i.RCVPRN = "PT4_800"; // Partner number 
i.RCVPRT = "LS"; // Partner type 

// Fill information about IDoc sender 
i.SNDPOR = "ERPCONNECT"; // Partner port 
i.SNDPRN = "ERPCONNECT"; // Partner number 
i.SNDPRT = "LS"; // Partner type

// Fill the right fields in the segments 
i.Segments["E1STATS",0].Fields["LOGDAT"].FieldValue = "20210901";
i.Segments["E1STATS",0].Fields["LOGTIM"].FieldValue = "152301"; 
i.Segments["E1STATS",0].Fields["STATUS"].FieldValue = "12"; 
i.Segments["E1STATS",0].Fields["DOCNUM"].FieldValue = IdocNo; 

i.Send(); 
Console.WriteLine("IDoc sent"); 
Console.ReadLine();

```

Output:

The status code of the manipulated IDoc increases from 3 (Data passed...) to 12 (Dispatch OK).

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open(false);

ERPConnect.Idocs.Idoc id = con.CreateEmptyIdoc("MATMAS01","");

// Fill header data
id.SNDPRN = "ERPCONNECT";
id.SNDPOR = "ERPCONNECT";
id.SNDPRT = "LS";

id.RCVPRN = "ECW_00_800";
id.RCVPRT = "LS";
id.MESTYP = "MATMAS";

// Fill basic data
ERPConnect.Idocs.IdocSegment e1maram = id.CreateSegment("E1MARAM");
e1maram.Fields["MATNR"].FieldValue = "DEV003"; // Material Number
e1maram.Fields["MTART"].FieldValue = "FERT"; // Material Type
e1maram.Fields["MATKL"].FieldValue = "001"; //  Material Group
e1maram.Fields["MEINS"].FieldValue = "PCE"; // Base Unit of Measure
e1maram.Fields["MBRSH"].FieldValue = "M"; // Industry sector
e1maram.Fields["BRGEW"].FieldValue = "1"; // Gross Weight
e1maram.Fields["NTGEW"].FieldValue = "1"; // Net Weight
e1maram.Fields["GEWEI"].FieldValue = "KG"; // Weight Unit

id.Segments.Add(e1maram);

// Fill text data
ERPConnect.Idocs.IdocSegment e1maktm = id.CreateSegment("E1MAKTM");
e1maktm.Fields["SPRAS"].FieldValue = "E"; // Language Key
e1maktm.Fields["MAKTX"].FieldValue = "my Article"; // Description Text

e1maram.ChildSegments.Add(e1maktm);

// Send IDoc
id.Send();


Console.WriteLine("Ready..");
Console.ReadLine();

```

Output:

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open(false);

Idoc idoc = connection.CreateEmptyIdoc("ORDERS01","");
idoc.MESTYP = "ORDERS";

// Fill information about idoc sender
idoc.SNDPRN = "1172"; // Partner number
idoc.SNDPRT = "KU"; // Partner type

// Create document header segment
IdocSegment e1edk01 = idoc.CreateSegment("E1EDK01");
idoc.Segments.Add(e1edk01);

// Create item segment
IdocSegment e1edp01 = idoc.CreateSegment("E1EDP01");
e1edp01.Fields["MENGE"].FieldValue = txtQty.Text;
idoc.Segments.Add(e1edp01);

// Create Object identification (material number in this case)
IdocSegment e1edp19 = idoc.CreateSegment("E1EDP19");
e1edp19.Fields["QUALF"].FieldValue = "002"; // 002 for material number
e1edp19.Fields["IDTNR"].FieldValue = txtMaterialNumber.Text; // material number
e1edp01.ChildSegments.Add(e1edp19);

idoc.Send();
this.lblInfo.Text = "Idoc sent";

```

Output:

______________________________________________________________________

#### Related Links

- [Send an ORDER IDoc](../../../samples/send-an-order-idoc/)
- [Send a MATMAS IDoc](../../../samples/send-a-matmas-idoc/)
- [Send a STATUS IDoc](../../../samples/send-a-simple-status-idoc/)
- [Resend IDocs which where set to CPICERR in SM58](../../../samples/resend-idocs-which-where-set-to-cpicerr-in-sm58/)
- [Set Up an RFC-Destination](../prerequisites/#set-up-an-rfc-destination)

This section contains a user documentation for ERPConnect.

### About ERPConnect

ERPConnect is a flexible and modular .NET library that has been certified by SAP for integration with SAP ECC and SAP S/4HANA.

### Features

| Functionality / SAP Objects | Description | | --- | --- | | [**ABAP Code**](/erpconnect/documentation/abap) | Generate and execute ABAP code on-the-fly. | | [**BAPIs and Function Modules**](/erpconnect/documentation/bapis-and-function-modules) | Access BAPIs and RFC function modules to read and write data from and to SAP. | | [**BW Cube and BEx Queries**](/erpconnect/documentation/bw-cubes-and-bw-queries) | Extract data from SAP BW InfoCubes and BEx Queries. | | [**IDocs**](/erpconnect/documentation/idocs) | Send and receive SAP IDocs. | | [**Queries**](/erpconnect/documentation/queries) | Extract SAP queries (not BEx queries). | | [**RFC Server Functions**](/erpconnect/documentation/rfc-server) | Create, register and use RFC server functions. | | [**Tables**](/erpconnect/documentation/table) | Read SAP Tables directly via RFC. | | [**Transactions**](/erpconnect/documentation/transactions) | Execute SAP transactions via batch input. |

### Tools

The installation package of ERPConnect includes the following tools to make development easier and more efficient:

- [**TransactionRecorder**](../transactions/transaction-recorder/)

  ______________________________________________________________________

  Records SAP transactions and generates C# or VB code for the transactions.

- [**IDoc-Schema-Generator**](../idocs/idocs-schema-generator/)

  ______________________________________________________________________

  Generates an XML file that can be used to load IDoc schemas with high performance.

- [**Function-Template-Generator**](../bapis-and-function-modules/function-template-generator/)

  ______________________________________________________________________

  Generates reusable XML templates for Function Modules and BAPIs.

### Prerequisites

Administrator permissions are required to install ERPConnect.

### Setup

`ERPConnectSetup.exe` is an industry standard setup. Execute the `ERPConnectSetup.exe` file and follow the instructions of the setup.\
The installation process copies the class library and all available tools into the program directory.

After the installation you are able to use ERPConnect in your .NET environment.\
The license installation procedure is described in the section [Installing the license](../licensing/).

### Program Directory Files

The list below shows several most important files that are placed into the default directory `C:\Program Files\ERPConnect` after installation:

| Files | Description | | --- | --- | | ERPConnect35.dll (**\***) | The ERPConnect class library for .NET 3.5 SP1 or higher. | | ERPConnectStandard20.dll (**\***) | The ERPConnect class library for .NET Standard 2.0. | | ERPConnect35.xml ERPConnectStandard20.xml | Visual Studio documentation files. | | TransactionRecorder.exe | Small tool to record batch sequences and create appropriate .NET code, see [Transaction Templates](../../transactions/transaction-recorder/). | | IdocSchemeGenerator.exe | Small tool to generate XML schemas for IDocs, see [IDocs Templates](../../idocs/idocs-schema-generator/). | | FunctionTemplateGenerator.exe | Small tool to generate XML templates for RFCFunction objects, see [BAPI/Function Module Templates](../../bapis-and-function-modules/function-template-generator/). |

After the installation you are able to use ERPConnect in your .NET environment.\
The files marked with (**\***) can be supplied as redistributables with your application.

A trial license is automatically installed with the installation of ERPConnect.\
A regular license is provided in the [Theobald Software Customer Portal](https://my.theobald-software.com/) after purchasing the product.

Note

The standard trial license does not support working in web environments. To test ERPConnect with your ASP.NET project, apply for a test license number at [sales@theobald-software.com](mailto:sales@theobald-software.com).

### Installing the ERPConnect License

The demo license is valid for one month after downloading. After this period, a valid license key or license file must be provided.

ERPConnect checks the licence number on every call (client and server). Set the license during runtime before the first connection to SAP is established.

The `ERPConenctLicense.json` file that contains the license is provided in the [Customer Portal - My Theobald Software](https://my.theobald-software.com/). Use one of the following methods to set the license.

- Read the license file and apply the license:

  ```csharp
  ERPConnect.LIC.LoadJsonLicense(string filename);

  ```

- Copy and paste the content of the `ERPConnectLicense.json` file into a constant string in the code and use the string to set the license:

  ```text
  ERPConnect.LIC.SetJsonLicense(string json); 

  ```

Use the following command to set the license number:

```csharp
ERPConnect.LIC.SetLic("XXXXXXXXXX");

```

### Maintenance

Contact the [sales department](mailto:sales@theobald-software.com) for information about available maintenance options.\
In case of technical difficulties, contact the support team: <https://support.theobald-software.com>.

### Technical Support

Theobald Software offers support in English and German.

1. Open a ticket in our [Support Portal](https://support.theobald-software.com).
1. Provide as much information as possible for the Theobald Software support team to understand and analyze the issue.
1. If there is an error message, copy and paste the error message into the ticket.

Disclaimer

SAP versions that are no longer supported by the manufacturer are excluded from the Theobald Software support. Issues specific to custom BAPIs (Z function modules) or custom reports (Z reports) are also excluded from the scope of support.

______________________________________________________________________

#### Related Links

- [Theobald Software Customer Portal](https://my.theobald-software.com/)
- [Theobald Software Support Portal](https://support.theobald-software.com/helpdesk)

This section contains information about system requirements and compatible SAP systems for ERPConnect.

### .NET Framework

ERPConnect (without LINQ to ERP) consists of two .NET assemblies that [target different frameworks](https://docs.microsoft.com/en-US/dotnet/standard/frameworks):

- ERPConnect35.dll (targets .NET Framework 3.5 SP1)
- ERPConnectStandard20.dll (targets .NET Standard 2.0)

That results in the following compatibility matrix:

| | ERPConnectStandard20.dll | ERPConnect35.dll | | --- | --- | --- | | .NET Framework 3.5 SP1 | | X | | .NET Framework 4.0 | | X | | .NET Framework 4.5 | | X | | .NET Framework 4.5.1 | | X | | .NET Framework 4.5.2 | | X | | .NET Framework 4.6 | | X | | .NET Framework 4.6.1 and newer | X | X | | .NET Core 2.0 and newer | X | X | | Universal Windows Platform 10.0.16299 and newer | X | |

### Supported SAP Systems and Releases

The following SAP Systems are supported:

- All SAP ABAP based systems that provide RFC connectivity and all SAP S/4 HANA (Cloud) systems that provide OData connectivity are supported.
- SAP ABAP systems on any database are supported (including HANA). The database used by the SAP system is irrelevant, because the integration occurs at SAP application server level.
- SAP systems running on Big Endian and Little Endian hardware are supported.
- SAP industry solutions like IS-U, IS-R, etc. are supported.
- SAP releases 4.6C and newer are supported.
- All operating systems are supported.

Examples

- [SAP S/4HANA](../../../samples/supported-sap-and-hana-versions/)
- mySAP
- SAP Application Server ABAP
- Message Server
- Router
- Standalone Gateway
- SAP Business Suite 7 (CRM, SRM, SCM etc.)
- SAP Business All in One, CAR, APO, PI
- SAP BW 3.1 and later
- SAP BW/BI 7.x
- SAP ERP / ECC 5.0 / ECC 6.0 (including all EhPs)
- SAP R/3 Version 4.6C and later
- SAP BW/4HANA
- ...and more.

**Disclaimer**

While SAP versions that are no longer supported by SAP still work with Theobald Software products, they are excluded from the Theobald Software support service.

#### Not Supported SAP Systems

The following SAP Systems are not supported:

- SAP systems that don’t run on ABAP systems
- SAP systems that don't provide RFC connectivity.

Examples

- SAP S/4HANA Cloud Public Edition
- Business By Design
- Business One
- Business Objects
- Sybase
- Ariba
- Success Factors
- Concur

Installation of custom function modules / transport requests is not required.

### Ports

The following ports between the Windows server that runs ERPConnect and the SAP server, must be open:

| SAP NetWeaver Component | Port (NN = System number of the SAP system) | | --- | --- | | SAP Application Server | 33<NN> | | SAP Message Server | 36<NN> | | Secure Network Communication (SNC) | 48<NN> | | SAP-Router | 3299 |

For more information, see [SAP Help: TCP/IP Ports of All SAP Products](https://help.sap.com/viewer/ports).

### Operating Systems

- Windows 11
- Windows Server 2022 (until 2031-10-14)
- Windows 10 (until 2025-10-14)
- Windows Server 2022
- Windows Server 2019 (until 2029-01-09)
- Windows Server 2016 (until 2027-01-12)

### Visual Studio

- Visual Studio 2022
- Visual Studio 2019
- Visual Studio 2017
- Visual Studio 2015 (until 14.10.2025)

### Other Applications and Frameworks

- [SAP NetWeaver RFC Library 7.50](https://launchpad.support.sap.com/#/notes/2573790)
- [Visual C++ 2013 Runtime](https://www.microsoft.com/en-US/download/details.aspx?id=40784)
- [SAP Library](../saplibraries/)

### Memory

- 2 GB or more recommended (depends on actual use case)

### Disk Space

- About 50 MB disk space are required for a full installation.

### 32/64-Bit Environment

- Both x86 and x64 platforms are supported.

Copy the 64-bit version of librfc32.dll to the `\System32` folder.\
Copy the 32-Bit Version of librfc32.dll to the `\SysWoW64` folder.

### Security Settings

- For logging on to SAP, a system or dialog user with appropriate [authority objects](../../sap-authority-objects/) is required.
- Plain authentication (user/password), Secure Network Communications (SNC) with and without Single Sign-On (SSO) and SAP Logon Tickets (MYSAPSSO2) are supported.

### Network Settings

Ports need to be opened depending on the SAP System connection technique. Details can be found in the knowledge base article [How to check the accessibility to a SAP System](../../../samples/how-to-check-the-accessibility-to-a-sap-system/).

To use ERPConnect you need also the following SAP libraries.\
You can find the SAP Libraries in the SAP Marketplace download area.

### Netweaver RFC Library

ERPConnect supports the Netweaver RFC (SDK) as of version 4.6.0.\
Download the Netweaver library from the [SAP Software Download Center](https://me.sap.com/swdcnav/products/_APP=00200682500000001943&_EVENT=DISPHIER&HEADER=Y&FUNCTIONBAR=N&EVENT=TREE&NE=NAVIGATE&ENR=01200314690100002214&V=MAINT). For 64-Bit environments the following DLLs are required (XX can vary depending on the version of the NW RRC Libraries):

- sapnwrfc.dll
- icuucXX.dll
- icudtXX.dll
- icuinXX.dll

Copy the 64-Bit Version of NW Libraries to the `C:\Windows\System32` folder.\
Copy the 32-Bit Version of NW Libraries to the `C:\Windows\SysWoW64` folder.

If no protocol is defined when opening an SAP connection, the connection uses the Netweaver RFC library by default.

### Client Protocol RFC (librfc32.dll)

Copy the 64-bit version of librfc32.dll to the `C:\Windows\System32` folder.\
Copy the 32-Bit Version of librfc32.dll to the `C:\Windows\SysWoW64` folder.

Note that the files have the same file name, only the file size varies.

To use the Classic RFC Protocol, set the Property *Protocol* of the *R3Connection* object to *ClientProtocol.RFC* before you open the connection.

```text
R3Connection.Protocol = ClientProtocol.RFC;

```

Warning

**ERPConnect.ERPException: Cannot access librfc32.dll.**\
To use ERPConnect in 64-Bit mode, you need a 64-Bit version of the SAP library **librfc32.dll**. Make sure to copy the 64-bit version of librfc32.dll to the direcory `C:\Windows\System32`. To use ERPConnect in 32-Bit mode, copy the 32-Bit version of the librfc32.dll to the directory `C:\Windows\SysWOW64`.

### 

The following section describes how to control and extract SAP Queries with ERPConnect.

Note

SAP Queries refer to queries that can be created by the SAP transactions **SQ02** and **SQ01**. If you want to use a BW Query as a data source, see [BW Cube/Queries](../bw-cubes-and-bw-queries/).

### About SAP Queries

SAP Queries are used to access data sets, see [SAP Help - Working with Queries](https://help.sap.com/viewer/b1c834a22d05483b8a75710743b5ff26/7.51.6/en-US/0e05493bbccf41a79caed7099c82bd48.html) for more information.

The input of a Query is defined by the *SelectParameters* collection. Every input parameter can contain an arbitrary number of values. The values are represented by ranges. In addition, a query object contains a *Fields* collection that in turn contains the output fields.

The figure below shows the object hierarchy that is provided by the Queries classes in ERPConnect.

The following sample shows how to fetch data from an SAP Query using ERPConnect.

Tip

If you don't know the technical name of a Query parameter, you can look it up in your SAP-System. Use the transaction **SQ01** or **SQ02** to search a Query. Open the description of the Query and scroll to the section *Selections*. All parameter properties including the name are listed.

### Call Queries

1. Connect to the SAP system using `R3Connection`.
1. Create a query object using `CreateQuery`. Each SAP query is defined by three descriptors:
   - the user workspace (local or global)
   - the user group
   - the name of the query
1. Define the parameters of the query. Every parameter has a distinctly technical name that can be looked up in the SAP.\
   Example: To create a selection criteria, access the parameter's range collection via the indexer and add a new range using `Add`. An individual range is defined by three descriptors:
   - a sign (include or exclude)
   - an operator (e.g. *equals* for parity)
   - a low or high value (LowValue and HighValue or only LowValue when using parity).
1. Execute the query using `Execute`.
1. The query returns a table of the *DataTable* type. Access the result table using `Result` attribute.

```csharp
private void btnFetchQueryData_Click(object sender, System.EventArgs e)
    {
      using (R3Connection con = new R3Connection("SAPServer", 00, "SAPUser", "Password", "EN", "800"))
        { 
           con.Open();

           // Create Query object Query q; 
           try
           {
               Query q = con.CreateQuery(WorkSpace.GlobalArea, "BT", "D3");

               // Add a criteria (in this case the airline) 
               q.SelectionParameters["CARRID"].Ranges.Add(
                   Sign.Include, RangeOption.Equals, inputAirline.Text);
               // Add a second criteria (in this case the date) 
               q.SelectionParameters["FLDATE"].Ranges.Add(
                   Sign.Include, RangeOption.Between, inputStartDate.Text, inputEndDate.Text);

               // Run the Query 
               q.Execute();
               // Bind result to datagrid 
               this.dataGridView1.DataSource = q.Result;
           }
           catch (Exception e1)
           {
            MessageBox.Show(e1.Message);
            return;
           }
        }
    }

```

______________________________________________________________________

#### Related Links

- [Samples: Fetch Data from an SAP Query](../../../samples/fetch-data-from-an-sap-query/)

The following sections show how to develop RFC server functions with ERPConnect.

### About RFC Server Functions

RFC server functions are routines that can be called by ABAP programs, see [SAP Help - Introduction to RFC Server Programs](https://help.sap.com/doc/saphelp_srm70/7.0/en-US/22/042990488911d189490000e829fbbd/frameset.htm) for more information.

Apart from the client functionality that allows function modules or BAPIs to be accessed in the SAP system, ERPConnect also offers the development of a server function. ERPConnect supports Transactional RFC functions.

This section shows how to handle connection timeouts.

In most cases, an RFC server is designed to run for long periods of time. Because of this, the connection to the SAP system is bound to time out sooner or later e.g, when SAP is booted or when there is a disruption in the network connection.

### Check Connection and Restart

To ensure that the RFC server can handle connection timeouts, the following procedure is recommended:

1. Start a timer object parallel to the RFC server. This will activate the *Elapsed* event every 30 or 60 seconds.
1. Query the RFC server's attribute *IsRunning*, which checks the connection to SAP. If the output of this function is *false*, relaunch the server object with `Start`.
1. If a connection interruption is intercepted in the *OnInternalException* event, do not call `Start` directly from within this event. Do not reboot after an interruption, when the reason for the interruption has not been determined or debugged yet.

This section shows how to create, register and use RFC server functions.

### Register the RFC Server Function

1. Initialize an *RFCServer* object. Provide the gateway host, the gateway service and the program ID to register on the SAP gateway. The program ID must be available as a registered destination in SAP, see [Set Up an RFC Destination](../prerequisites/).
1. Register an *RFCServerFunction* object using `RegisteredFunctions.Add`. An *RFCServer* object can hold more than one *RFCServerFunction* object.
1. Add Imports and Exports. They are handled the same way as when calling RFC functions as a client.
1. When an ABAP program calls the function, the event *IncomingCall* is triggered.\
   When using C#, the event call-back must be defined in a separate line of code.
1. Start the server using `Start`.

Note

If the RFC destination is set to Unicode (SAP transaction code **SM59**), the property *IsUnicode* of the *RFCServer* object must be set to true.

In the following sample applications a simple RFC server function is created that allows ABAP programs to add numbers.

```csharp
using ERPConnect; 

static void Main(string[] args) 
{ 
   RFCServer s = new RFCServer();
   s.GatewayHost = "sap-erp-as05.example.com"; 
   s.GatewayService = "sapgw11"; 
   s.ProgramID = "ERPTEST"; 

   s.IncomingCall+=new ERPConnect.RFCServer.OnIncomingCall(s_IncomingCall); 

   RFCServerFunction f = s.RegisteredFunctions.Add("Z_ADD"); 

   f.Imports.Add("NUMBER1",RFCTYPE.INT); 
   f.Imports.Add("NUMBER2",RFCTYPE.INT); 
   f.Exports.Add("RES",RFCTYPE.INT); 

   s.Start(); 

   Console.Write( "Server is running. Press any key to exit."); 
   Console.ReadLine(); 
}

```

Two input parameters (*NUMBER1* and *NUMBER2*) are added in a new function (*Z_ADD*). The result (*RES*) is passed back to the calling ABAP program, see [Call RFC Server Functions in ABAP](#call-rfc-server-functions-in-abap).

```csharp
using ERPConnect; 

static void Main(string[] args)
{

    static RFCServer s = new RFCServer();
    s.GatewayHost = "SAPServer";
    s.GatewayService = "sapgw00";
    s.ProgramID = "ERPConnectTEST";

    s.IncomingCall += new RFCServer.OnIncomingCall(s_IncomingCall);

    RFCServerFunction f = s.RegisteredFunctions.Add("Z_ADD_2");

    f.Exports.Add("RES", RFCTYPE.INT);

    RFCTable numbertable = f.Tables.Add("NUMBERS");
    numbertable.Columns.Add("NUMB", 10, 0, RFCTYPE.NUM); 

    s.Start();

    Console.WriteLine("Press Enter to quit");
    Console.ReadLine();
}

```

A table (*NUMBERS*) with a column (*NUMB*) is added to a table collection using `Add()`. The result (*RES*) is passed back to the calling ABAP program, see [Call RFC Server Functions in ABAP](#call-rfc-server-functions-in-abap).

```csharp
using ERPConnect; 

static void Main(string[] args)
{
    static RFCServer s = new RFCServer();
    s.GatewayHost = "hamlet";
    s.GatewayService = "sapgw11";
    s.ProgramID = "ERPTEST";

    s.IncomingCall += new RFCServer.OnIncomingCall(s_IncomingCall);

    RFCServerFunction f = s.RegisteredFunctions.Add("Z_ADD_3");

    RFCTableColumnCollection Columns = new RFCTableColumnCollection ();
    Columns.Add("NUMB", 10, 0, RFCTYPE.NUM);
    Columns.Add("NUMB2", 10, 0, RFCTYPE.NUM);

    f.Imports.Add("NUMBERS",Columns );
    f.Exports.Add("RES", RFCTYPE.INT);

    s.Start();

    Console.WriteLine("Press Enter to quit");
    Console.ReadLine();
}

```

A structure (*NUMBERS*) with 2 columns (*NUMB1* and *NUMB2*) is added to a column collection via `RFCTableColumnCollection()`. The result (*RES*) is passed back to the calling ABAP program, see [Call RFC Server Functions in ABAP](#call-rfc-server-functions-in-abap).

```csharp
using ERPConnect; 

static void Main(string[] args)
{

    static RFCServer s = new RFCServer();
    s.GatewayHost = "hamlet";
    s.GatewayService = "sapgw11";
    s.ProgramID = "ERPTEST";

    s.IncomingCall += new RFCServer.OnIncomingCall(s_IncomingCall);

    RFCServerFunction f = s.RegisteredFunctions.Add("Z_ADD_4");

    RFCTableColumnCollection Columns = new RFCTableColumnCollection ();
    Columns.Add("NUMB1", 10, 0, RFCTYPE.NUM);
    Columns.Add("NUMB2", 10, 0, RFCTYPE.NUM);

    RFCTableColumnCollection EXColumns = new RFCTableColumnCollection();
    EXColumns.Add("NUMB1", 10, 0, RFCTYPE.NUM);
    EXColumns.Add("NUMB2", 10, 0, RFCTYPE.NUM);

    f.Imports.Add("NUMBERS",Columns );
    f.Exports.Add("EXNUMBERS", EXColumns);

    s.Start();

    Console.WriteLine("Press Enter to quit");
    Console.ReadLine();
}

```

Two structures (*NUMBERS* and *EXNUMBERS*) with 2 columns (*NUMB1* and *NUMB2*) are added to column collections via `RFCTableColumnCollection()`. One structure (*NUMBERS*) is used for import and the other (*EXNUMBERS*) is passed back to the calling ABAP program, see [Call RFC Server Functions in ABAP](#call-rfc-server-functions-in-abap).

### Handle Incoming Calls

The following code shows how the *IncomingCall* event is handled:

```csharp
private static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction) 
{ 
   if (CalledFunction.FunctionName=="Z_ADD") 
   { 
      Int32 i1 = (Int32)CalledFunction.Imports["NUMBER1"].ParamValue; 
      Int32 i2 = (Int32)CalledFunction.Imports["NUMBER2"].ParamValue; 
      Int32 res = i1 + i2; 
      CalledFunction.Exports["RES"].ParamValue = res; 
      Console.WriteLine("Incoming Call"); 
   } 
   Else 
      throw new ERPConnect.ERPException("Function unknown"); 
}

```

The result is returned in the scalar export parameter *RES*.

```csharp
static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)
{
    Console.WriteLine("Incoming call!!");

    Int32 res = 0;

    foreach (RFCStructure row in CalledFunction.Tables["NUMBERS"].Rows)
        res += Convert.ToInt32(row["NUMB"]);

    CalledFunction.Exports["RES"].ParamValue = res;
}

```

Use the object hierarchy to iterate through the rows and add the values. The result is returned in the scalar export parameter *RES*.

```csharp
static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)
{
    Console.WriteLine("Incoming call!!");

    Int32 res = 0;
    RFCStructure numberstruc = CalledFunction.Imports["NUMBERS"].ToStructure();

    Int32 i1 = Convert.ToInt32(numberstruc["NUMB"].ToString());
    Int32 i2 = Convert.ToInt32(numberstruc["NUMB2"].ToString());

    res = i1 + i2;

    CalledFunction.Exports["RES"].ParamValue = res;
}

```

The result is returned in the scalar export parameter *RES*.

```csharp
static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)
{
    Console.WriteLine("Incoming call!!");

    RFCTableColumnCollection EXColumns = new RFCTableColumnCollection();
    EXColumns.Add("NUMB1", 10, 0, RFCTYPE.NUM);
    EXColumns.Add("NUMB2", 10, 0, RFCTYPE.NUM);

    CalledFunction.Exports.Add("EXNUMBER", EXColumns);
    RFCStructure numberstruc = CalledFunction.Imports["NUMBERS"].ToStructure();

    Int32 i1 = Convert.ToInt32(numberstruc["NUMB1"].ToString());
    Int32 i2 = Convert.ToInt32(numberstruc["NUMB2"].ToString());

    RFCStructure EXnumbers = CalledFunction.Exports["EXNUMBERS"].ToStructure();
    EXnumbers["NUMB1"] = i1 + 1;
    EXnumbers["NUMB2"] = i2 + 98;
}

```

The values from the IMPORT collection (*numberstruc*) are set in variables. Then different values are added to them and are written back to the EXPORT collection (*EXnumbers*).

The import parameters are passed by the calling SAP system.\
The export parameters are passed back to SAP.

### Call RFC Server Functions in ABAP

The following ABAP code is used to call the new function *Z_ADD* in the remote destination *ERPTEST*.

```abap
REPORT z_add_test 

DATA result TYPE i.
CALL FUNCTION 'Z_ADD' DESTINATION 'ERPTEST' 
   EXPORTING 
      number1 = 26 
      number2 = 25 
   IMPORTING 
      res = result. 
   WRITE: / 'Result: ', result.  

```

The two numbers 26 and 25 are passed, and the result 51 is passed back.

```abap
REPORT  zaddtest2 

DATA res TYPE i.
DATA numbs LIKE zaddstruc OCCURS 0 WITH HEADER LINE.

numbs-numb = '1'.
APPEND numbs.
numbs-numb = '2'.
APPEND numbs.
numbs-numb = '3'.
APPEND numbs.

CALL FUNCTION 'Z_ADD_2' DESTINATION 'ERPConnectTEST'
  IMPORTING
    res     = res
  TABLES
    numbers = numbs.

WRITE: / 'Result: ', res.

```

The two numbers 1, 2 and 3 are passed, and the result 6 is passed back.

```abap
REPORT  ZADDTEST3

DATA res TYPE i.
DATA numbs LIKE zaddstruc2.

numbs-numb1 = '1'.
numbs-numb2 = '2'.

CALL FUNCTION 'Z_ADD_3' DESTINATION 'ERPTEST'
  EXPORTING
    NUMBERS       = numbs
 IMPORTING
   RES           = res.

WRITE: / 'Result: ', res.

```

The two numbers 1 and 2 are passed, and the result 3 is passed back.

```abap
REPORT  ZADDTEST4                               .
                            .
DATA numbs LIKE zaddstruc2.
DATA exnumbers like zaddstruc2.

numbs-numb1 = '1'.
numbs-numb2 = '2'.

CALL FUNCTION 'Z_ADD_4' DESTINATION 'ERPTEST'
  EXPORTING
    NUMBERS       = numbs
   IMPORTING
   EXNUMBERS      = exnumbers.

WRITE: / 'First result is (added 1): ', exnumbers-numb1 .
WRITE: / 'Second result is (added 98): ', exnumbers-numb2 .

```

The two numbers 1 and 2 are passed, and the results 2 and 100 are passed back.

______________________________________________________________________

#### Related Links

- [Transactional RFC Server](../../../samples/transactional-rfc-server/)
- [Calculate the length of the SAP type QUAN when setting up an RFC-Server](../../../samples/calculate-the-length-of-the-sap-type-quan--when-setting-up-an-rfc-server/)

### Set Up an RFC Destination

To enable calls from an SAP system to a subsystem, the subsystem must be known to SAP.\
This can be done with an RFC destination.

An existing RFC destination is necessary for sending IDocs.

1. Use the transaction **SM59** to create a new RFC destination.
1. Fill the following fields of the destination:
   - Unique name of the new destination e.g., ERPTEST.
   - Connection Type = T (for TCP/IP).
   - Description.
   - ProgramID: A unique name that the server program uses to register on the SAP gateway.
   - Choose the option *Registered Server Program*.
1. Save the destination.
1. To test the RFC-Destination, click the button **[Test Connection]** while the program is running.\
   If everything works well, you should see a screen like the one below:

An example for a simple RFC server program can be found in section [RFC-Server](/erpconnect/documentation/rfc-server/create-rfc-functions/)

Note

If the RFC Destination is set to Unicode, the property *IsUnicode* of the RFCServer object must be set to *true*.

The RFCServer class supports SAP connection with SSO and SNC.\
The RFCServer class works similarly to the R3Connection class, see [ERPConnect with SSO with SNC](../../sap-connection/sso-with-snc/).

Note

Note the prerequisites described in [SSO with SNC - Prerequisites](../../sap-connection/sso-with-snc/#prerequisites) beschrieben.

### SAP Connection with SSO and SNC

The RFCServer class provides the property *SNCSettings*. Assign the partner name in the SAP transaction **SM59** (e.g. p:RFCServerSNC@THEOBALD) to the property *OwnName* of *SNCSettings*.

```csharp
RFCServer rfcServer = new RFCServer();
rfcServer.GatewayHost = "sap-erp-as05.example.com";
rfcServer.GatewayService = "sapgw00";
rfcServer.ProgramID = "SNCTEST";
rfcServer.SNCSettings.Enabled = true;
rfcServer.SNCSettings.Mechanism = SNCMechanism.Kerberos5;
rfcServer.SNCSettings.OwnName = "p:RFCServerSNC@THEOBALD";

rfcServer.Protocol = ClientProtocol.RFC;
rfcServer.CanReceiveIdocs = true;
rfcServer.IsUnicode = true;

```

Note

If SNC is used with Kerberos and Active Directory, the Active Directory account used for the RFC server must have a Service Principal Name corresponding to the partner name in SAP.

This section contains information on how to connect to SAP systems.

### Prerequisites

ERPConnect requires an RFC library, see [SAP Libraries](../introduction/saplibraries/).

The RFC API (Remote Function Call) enables an RFC connection between an SAP system and an external system that can communicate with SAP as a client or server. The RFC API has two versions:

- classic RFC-API (classic RFC library).
- Netweaver-RFC-API (Netweaver RFC library).

For more information on the RFC libraries, see [SAP Help - RFC API: Classical & NetWeaver](https://help.sap.com/saphelp_nwpi71/helpdata/en/45/18e96cd26321a1e10000000a1553f6/frameset.htm).

ERPConnect supports the following connection methods to SAP systems:

- Connect to a single application server.
- Connect to a message server (Load Balancing).
- Connect to a single application server or public or private cloud instance via RFC over WebSocket.

### Input Parameters

The connection methods require the following input:

| Single Application Server | Load Balancing | RFC over WebSocket | | --- | --- | --- | | Name of the user (*UserName* property) | Name of the user (*UserName* property) | Name of the user (*UserName* property) | | Password (*Password* property) | Password (*Password* property) | Password (*Password* property) | | Language (*Language* property) | Language (*Language* property) | Language (*Language* property) | | Client (*Client* property) | Client (*Client* property) | Client (*Client* property) | | Name of the application server (*Host* property) | Name of the message server (*MessageServer* property) | WebSocket host (*WebSocketHost* property) | | System number between 0 and 99 (*SystemNumber* property) | System ID (*SID* property e.g., MBS) | WebSocket port (*WebSocketPort* property) | | | Name of the group (*LogonGroup* property e.g., PUBLIC) | *AliasUser* property instead of *UserName* for cloud systems | | | | Various TLS settings (*TlsSettings* property), e.g., *CryptoLibrary*, [*ClientPse*](../../../samples/create-personal-security-environment/) |

### Connect to SAP

1. Add the ERPConnect.dll class library as a reference to the project.

1. Create a new R3Connection object and define all input parameters.

1. Establish the connection using `Open`.

   ```csharp
   using (R3Connection con = new R3Connection())
   {
       con.UserName = "SAPUser";
       con.Password = "SAPPassword";
       con.Language = "EN";
       con.Client = "800";
       con.Host = "sap-erp-as05.example.com";
       con.SystemNumber = 00;
       con.Protocol = ClientProtocol.NWRFC; //use ClientProtocol.RFC for classic RFC library

       con.Open();
   }

   ```

   ```csharp
   using (R3Connection con = new R3Connection())
   {
       con.UserName = "SAPUser";
       con.Password = "SAPPassword";
       con.Language = "DE";
       con.Client = "800";
       con.MessageServer = "sap-erp-as05.example.com";
       con.LogonGroup = "PUBLIC";
       con.SID = "ECC";
       con.Protocol = ClientProtocol.NWRFC; //use ClientProtocol.RFC for classic RFC library
       con.UsesLoadBalancing = true;

       con.Open();
   }

   ```

   ```csharp
   using (R3Connection con = new R3Connection())
   {
       con.UsesWebSocket = true;
       con.WebSocketHost = "myinstance-api.s4hana.cloud.sap";
       con.WebSocketPort = 443;
       con.TlsSettings = new TlsSettings
       {
           TrustAll = false,
           CryptoLibrary = @"C:\lib\sapcrypto.dll",
           ClientPse = "CLIENT.PSE"
       };

       con.AliasUser = "TESTUSER",
       con.Password = "Password",

       con.Open();
   }

   ```

#### Encoding

The default encoding for an SAP connection is SAP code page 1100 (iso-8859-1). When using the NW RFC protocol you can explicitly set an encoding. This is necessary if your SAP credentials contain characters that are not part of SAP code page 1100.

```csharp
con.Protocol = ClientProtocol.NWRFC; 
con.InitialEncoding = SAPEncodingInfo.UTF16LittleEndian;

```

#### Client Protocol

The default client protocol is the NWRFC Protocol. To use the old RFC Protocol add the following command:

```csharp
con.Protocol = ClientProtocol.RFC;

```

Tip

If you use the constructor of the R3Connection class to provide the login properties, you can save lines.\
Example: `R3Connection con = new R3Connection("SAPServer",00,"SAPUser","Password","EN","800");`.

Note

For more information on authentication, see [SSO with Log On Tickets](../sso-with-log-on-tickets/) and [SSO with SNC](../sso-with-snc/).

### Connect via Router

When accessing an SAP system via a Router, the router string must be set before the host name or the name of the message server.\
For more information on route strings, see [SAP Help- Route String Entry for SAProuter](https://help.sap.com/saphelp_erp60_sp/helpdata/en/4f/992df1446d11d189700000e8322d00/frameset.htm).

```csharp
using (R3Connection con = new R3Connection())
{
    con.UserName = "SAPUser";
    con.Password = "SAPPassword";
    con.Language = "DE";
    con.Client = "800";
    con.Host = "SAPServer";
    con.SAProuterString = "/H/SAProuter";
    con.SystemNumber = 00;
    con.Protocol = ClientProtocol.NWRFC;

    con.Open();
}

```

______________________________________________________________________

#### Related Links

- [SSO with Log On Tickets](../sso-with-log-on-tickets/).
- [SSO with SNC](../sso-with-snc/).
- [Implement a connection pool](../../../samples/implement-a-connection-pool/)

As of ERPConnect version 1.6 SSO scenarios are supported.\
There are several methods to get an SSO Ticket depending on the SAP Infrastructure in the company.

Note

To use SSO the SAP system must be configured as described in [SAP Help - Single Sign-On Configuration](https://help.sap.com/doc/saphelp_nw75/7.5.5/en-US/48/ca0fe42fbb5c97e10000000a42189d/content.htm?no_cache=true).

### Logon with SSO-Tickets

#### Create an SSO-Ticket

To create an SSO ticket the *R3Connection* class provides the method `GetSSOTicket`. All logon data must be provided once to create the ticket as shown in the code below.

```csharp
using(ERPConnect.R3Connection cont = new ERPConnect.R3Connection())
{
    cont.Host = "sap-erp-as05.example.com";
    cont.SystemNumber = 7;
    cont.Client = "800";
    cont.Language = "DE";
    cont.UserName = "alice";
    cont.Password = "pw";

    string ssoticket = cont.GetSSOTicket();
}

```

#### Logon

If there is a ticket available, you can establish the connection without user credentials:

```csharp
using (ERPConnect.R3Connection conts = new ERPConnect.R3Connection())
{
    conts.Host = "sap-erp-as05.example.com";
    conts.SystemNumber = 7;
    conts.Client = "800";
    conts.Language = "EN";
    conts.LogonTicket = ssoticket;

    conts.Open();
}

```

For information on how to login to SAP using the cookie from the SAP Portal Ticketissuer, refer to [Login to SAP with an SSO Logonticket](../../../samples/login-to-sap-with-an-sso-logonticket/).

______________________________________________________________________

#### Related Links

- [Login to SAP with an SSO Logonticket from the SAP Portal Ticketissuer](../../../samples/login-to-sap-with-an-sso-logonticket/)
- [SAP Help - Single Sign-On Configuration](https://help.sap.com/doc/saphelp_nw75/7.5.5/en-US/48/ca0fe42fbb5c97e10000000a42189d/content.htm?no_cache=true)
- [SSO with SNC](../sso-with-snc/)

Secure Network Communication (SNC) enables authentication and transport encryption between SAP systems and between SAP systems and third-party tools like Xtract Universal and Board Connector. For more information on SNC, see [SAP Help: SNC](https://help.sap.com/doc/saphelp_nw73ehp1/7.31.19/en-US/e6/56f466e99a11d1a5b00000e835363f/content.htm?no_cache=true).

When using SNC you can choose between the [NTLM](#ntlm) or the [Kerberos5](#kerberos) mechanism.

### Prerequisites

The following DLLs from SAP need to be present in the `%SYSTEMROOT%\System32` directory of your system:

- **For 32-bit:**

  ______________________________________________________________________

  - NTLM: gssntlm.dll
  - Kerberos: gsskrb5.dll

- **For 64-bit x86:**

  ______________________________________________________________________

  - NTLM: gx64ntlm.dll
  - Kerberos: gx64krb5.dll

The DLLs are available via the [SNOTE 2115486](http://service.sap.com/sap/support/notes/2115486).

When using Kerberos authentication, apply the Kerberos SNC settings as described in the [SAP Help - Single Sign-On with Microsoft Kerberos SSP](https://help.sap.com/viewer/e815bb97839a4d83be6c4fca48ee5777/7.5.9/EN-US/440ebf6c9b2b0d1ae10000000a114a6b.html) to your SAP system.

Note

It is recommended to test the connection between SAP and the client before continuing.

### SNC in ERPConnect

The R3Connection object automatically determines the needed SNC DLL based on the settings of *SNCMechanism*. With the *SNCLibraryPath* property you can specify the path to the SNC DLL manually. In this case the automatic detection of the DLL is disabled and the setting for *SNCMechanism* are ignored.

If you specify the *SNCMechanism*, you can choose between the [NTLM](#ntlm) and the [Kerberos](#kerberos) mechanism.\
If the Kerberos authentication is not possible, NTLM is used automatically.

If you do not want to use the SNC properties to create a connection, set *SNCEnabled* to false. It disables all settings without changing the other SNC parameter.

The following example codes show how to pass the necessary parameters for an SNC connection to an R3Connection object.

```csharp
using (R3Connection con = new R3Connection())
{
    con.Host = "sap-erp-as05.example.com";
    con.SystemNumber = 7;
    con.Client = "800";
    con.Language = "DE";
    con.SNCSettings.Enabled = true;
    con.SNCSettings.PartnerName = "p:SAPServiceNSP@THEOBALD";
    con.SNCSettings.Mechanism = SNCMechanism.NTLM;
    con.SNCSettings.QualityOfProtection = SNCQualityOfProtection.Maximum;

    con.Open();
    // define your application
}

```

```csharp
using (R3Connection con = new R3Connection())
{
    con.Host = "sap-erp-as05.example.com";
    con.SystemNumber = 7;
    con.Client = "800";
    con.Language = "DE";
    con.SNCSettings.Enabled = true;
    con.SNCSettings.PartnerName = "p:SAPServiceNSP@THEOBALD";
    con.SNCSettings.LibraryPath = @"C:\Windows\SysWOW64\sncgss32.dll";
    con.SNCSettings.QualityOfProtection = SNCQualityOfProtection.Maximum;

    con.Open();
    // define your application
}

```

Note

As of ERP Connect version 4.2.3 you can set a security level with the property *QualityOfProtection*.

### NTLM

NTLM (abbreviation for NT LAN Manager) is an authentication procedure for computer networks.\
NTLM performs the SSO authentication via a challenge-response authentication between the client and the server.

For more information on NTLM, see [Microsoft Documentation - NTLM](https://docs.microsoft.com/en-us/windows-server/security/kerberos/ntlm-overview).

### Kerberos

The Kerberos method uses a Kerberos server to authenticate the client.\
The server creates so-called tickets and sends them to the client. The client authenticates itself with this ticket to the server.

For more information on Kerberos, see [Microsoft Documentation - Kerberos Authentication](https://docs.microsoft.com/en-us/windows-server/security/kerberos/kerberos-authentication-overview).

### Double Hop Problem

Double hop describes the passing of authentication information across two or more computers (hops).\
For technical reasons NTLM only works with one hop. For security reasons Kerberos transmits authentication data only in one hop by default, but it can be configured to send data over two or more hops. Examples:

If you use Xtract PPV as the consumer of the SAP data, it has to run on the same computer that Xtract PPV Server and PowerPivot run on. The domain controller and the SAP system can run on different computer. In this case you can also use NTML and Kerberos.

If you use Xtract PPV as the comsumer for the SAP data and the Xtract PPV Server and PowerPivot run on different computers, you have to use Kerberos which can be configured to handle the Double Hop Problem. For more information on the Kerberos configuration, see [Microsoft Techcommunity - Understanding Kerberos Double Hop](https://techcommunity.microsoft.com/t5/ask-the-directory-services-team/understanding-kerberos-double-hop/ba-p/395463).

For more information on the SSO configuration, see [SAP Help - Single Sign-On Configuration](https://help.sap.com/doc/saphelp_nw75/7.5.5/en-US/48/ca0fe42fbb5c97e10000000a42189d/content.htm?no_cache=true)

______________________________________________________________________

#### Related Links

- [SAP Help - Secure Network Communications (SNC)](http://help.sap.com/saphelp_nw70ehp1/helpdata/en/e6/56f466e99a11d1a5b00000e835363f/content.htm).
- [SAP Help - Single Sign-On](https://help.sap.com/viewer/e815bb97839a4d83be6c4fca48ee5777/7.5.9/en-US/89d115110d444d85a94dff7ffd0e2b7f.html)

This section shows how to use the *ReadTable* class.\
A recurrent task when working with SAP and .NET applications is to read directly from tables of the SAP system. The *ReadTable* class enables access to that data.

Note

The *RFC_READ_TABLE* function module for table extractions is not suitable for mass data extraction, see [Restrictions](#restrictions).

### Restrictions

When extracting tables from older SAP releases you may encounter several restrictions when using the SAP standard function module (RFC_READ_TABLE):

- The overall length of all columns to be extracted must not exceed 512 bytes.
- It is not possible to extract data from tables that contain one or more columns of the data type f (FLTP, floating point), DEC (decimal, e.g. for percentage) or x (RAW, LRAW).
- Poor extraction performance with larger tables. Mass data extraction can also cause duplicates. The use of Z_XTRACT_IS_TABLE does not guarantee duplicate-free results.

Warning

**Error while converting value '\*.0' of row 1530, column 3.**\
The SAP standard module *RFC_READ_TABLE* for table extraction can only extract the ABAP data type DEC to a limited extent. This leads to the mentioned example error during extraction.

To bypass the restrictions, install the custom function module Z_XTRACT_IS_TABLE.

### Install Z_XTRACT_IS_TABLE

Follow the steps below to create a custom function module Z_XTRACT_IS_TABLE in SAP that bypasses the restrictions of the SAP standard function module (RFC_READ_TABLE):

1. Use SAP transaction SE37 to create a new function module named Z_XTRACT_IS_TABLE.

   Note

   You can use an existing function group or create a new one. This is also valid for the development class (Package).

1. In the tab *Attributes* check *Remote Enabled*.

1. define the following import imports:

1. Define the following table parameter:

1. Define the following exceptions:

1. Download the file [Z_XTRACT_IS_TABLE.txt](../../assets/files/ABAPcode/Z_XTRACT_IS_TABLE.txt) that contains the ABAP code for the function module.

1. Use **[Ctrl + C]** and **[Ctrl + V]** to paste the ABAP code into the source code editor.

1. Save the function module and activate it.

To use the new custom function module with the *ReadTable* class, use the `SetCustomFunctionName()` command before reading the table. Example:

```text
table.SetCustomFunctionName("Z_XTRACT_IS_TABLE");

```

The following table shows the data type mapping between ABAP / RFC and .NET.

| ABAP | ABAP Dictionary | ERPConnect | .NET | Remarks | | --- | --- | --- | --- | --- | | b | INT1 | RFCTYPE INT1 | System Byte | | | s | INT2, PREC | RFCTYPE INT2 | System Int16 | | | i | INT4 | RFCTYPE INT | System Int32 | | | p | DEC, CURR, QUAN | RFCTYPE BCD | System Decimal | Max. supported length is 28 digits | | decfloat16 | DF16_DEC, DF16_RAW, DF16_SCL | RFCTYPE BYTE | System Byte[] | No ReadTable support | | decfloat34 | DF34_DEC, DF34_RAW, DF34_SCL | RFCTYPE BYTE | System Byte[] | No ReadTable support | | f | FLTP | RFCTYPE FLOAT | System Double | | | c | CUKY, UNIT, CHAR, LCHR, CLNT, LANG | RFCTYPE CHAR | System String | | | string | STRING | RFCTYPE STRING | System String | No ReadTable support | | n | NUMC, ACCP | RFCTYPE NUM | System String | Only characters 0_9 ACCP format is YYYYMM | | d | DATS | RFCTYPE DATE | System String | Format is YYYYMM | | t | TIMS | RFCTYPE TIME | System String | Format is HHMMSS | | x | RAW, LRAW | RFCTYPE BYTE | System Byte[] | | | xstring | RAWSTRING | RFCTYPE XSTRING | System Byte[] | No ReadTable support |

The following sample shows how to use the *ReadTable* class to read data from an SAP table and how to process the ADO.NET result table object.

### Read Data From Tables

Follow the steps below to read tables from SAP:

1. Connect to the SAP system using `R3Connection`.
1. Create a table object using `ReadTable()`.
1. Specify the name of the SAP table using `TableName`.
1. Specify the columns you want to read using `AddField()`.
1. Optional: Specify additional parameters, e.g., WHERE Clause (`WhereClause` or maximum number of rows `RowCount`).
1. Optional: Specify the function module that is used to read the table using `SetCustomFunctionName()`. The default is RFC_READ_TABLE.
1. Read the SAP table using `Run()`.
1. Access the table using the `Result` attribute.

```csharp
using System;
using System.Data;
using ERPConnect;
using ERPConnect.Utils;

// Set your ERPConnect license
LIC.SetLic("xxxx");

// Open the connection to SAP
using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

var table = new ReadTable(connection)
{
    WhereClause = "SPRAS = 'EN'",
    TableName = "MAKT",
    RowCount = 10
};

// Select columns to read
table.AddField("MATNR");
table.AddField("MAKTX");

// Specify a function module that is used to read the table
table.SetCustomFunctionName("RFC_READ_TABLE");

table.Run();

DataTable result = table.Result;
for (int i = 0; i < result.Rows.Count; i++)
{
    Console.WriteLine($"{result.Rows[i]["MATNR"]} {result.Rows[i]["MAKTX"]}");
}

Console.ReadLine();

```

Output:

```text
000000000000000023 Pawan Kalyan_08
000000000000000038 Test US colleagues upd4
000000000000000043 English Check 25_01
000000000000000058 Ventilation, complete build
000000000000000059 Filter Ereteam
000000000000000068 a portable 1 ton crane
000000000000000078 Component Full Repair Service ...
000000000000000088 AS-100 T-shirt XL
000000000000000089 AS-100 T-shirt
000000000000000098 PCB Subassembly

```

______________________________________________________________________

#### Related Links

- [Samples: Transfer data packets with ReadTable class](../../../samples/transfer-data-packets-with-readtable-class/)
- [Samples: Get meta data of a table](../../../samples/get-meta-data-of-a-table/)
- [Samples: Get CostCenter hierarchies](../../../samples/get-costcenter-hierarchies/)

This section shows how to use the *Transaction* class to execute SAP transactions in the foreground as well as in a background process (Batch Input).

When executing transactions in a background process, mass data can be processed and transferred to the SAP system. This technique is often used if no suitable BAPI exists.

For more information on SAP transactions, see [SAP Help: Using Transaction Codes](https://help.sap.com/docs/SAP_NETWEAVER_740/b1c834a22d05483b8a75710743b5ff26/f735dd776e724195b5562592a5e88b45.html?locale=en-US).

The following sample application shows how to use the *Transaction* class to execute an SAP transaction.

### Execute SAP Transactions

Follow the steps below to run SAP transactions from ERPConnect:

1. Connect to the SAP system using `R3Connection`. Set the `UseGui` property to *true*.
1. Create a transaction object using `Transaction()`.
1. Specify the SAP transaction code using `TCode`.
1. Optional: add batch steps using `AddStep`.
1. Launch the SAP GUI and execute the SAP transaction using `Execute`.

Tip

The installation package of ERPConnect includes the *Transaction-Recorder* tool. This tool records transactions and implements them to code, see [Transaction-Recorder](../transaction-recorder/).

The following sample code executes the SAP transaction MMBE (stock overview):

```csharp
using System;
using ERPConnect;
using ERPConnect.Utils;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
    UseGui = true,
};

connection.Open();

Console.Write("Material: ");
string material = Console.ReadLine();

Console.Write("Plant: ");
string plant = Console.ReadLine();

var transaction = new Transaction(connection)
{
    ExecutionMode = TransactionDialogMode.ShowAll,
    TCode = "MMBE"
};

transaction.AddStepSetNewDynpro("RMMMBEST", "1000");
transaction.AddStepSetOKCode("ONLI");
transaction.AddStepSetCursor("MS_WERKS-LOW");
transaction.AddStepSetField("MS_MATNR-LOW", material);
transaction.AddStepSetField("MS_WERKS-LOW", plant);

// run
transaction.Execute();

```

Input:

```text
Material: 100-100
Plant: 1000

```

Output:

______________________________________________________________________

#### Related Links

- [Samples: Access Stock Overview using Batch Input](../../../samples/access-stock-overview-using-batch-input/)
- [Samples: Create New Customers using Batch Input](../../../samples/create-new-customers-using-batch-input/)
- [Samples: Create Purchase Orders using Batch Input and Background Processing](../../../samples/create-purchase-orders-using-batch-input/)

The *TransactionRecorder* records SAP transactions and generates C# or VB code templates for the transactions.

### Create Templates

1. Run the *TransactionRecorder.exe* in the ERPConnect directory `C:\Program Files\ERPConnect` to start the *TransactionRecorder*.
1. Enter the transaction code you want to record in the text field **Transaction Code for recording**.
1. Choose *C#* or *VB* as your target language for the generated code.
1. Click **[Generate Now]** to acccess your SAP system.
1. The window "SAP Login" opens. Enter your SAP credentials and click **[OK]**.
1. If prompted, allow acces to SAP. Your SAP GUI opens and executes the transaction code.
1. Finish your transaction in SAP.\
   Once the transaction is finished, the code is generated and displayed in the *Transaction-Recorder*.
1. Use **[Ctrl+C]** and **[Ctrl+V]** to copy the code to your program via the clipboard.
# Code Samples and Use Cases

This section contains code samples and use cases for ERPConnect.

### SAP

- [Check the Accessibility to an SAP System](how-to-check-the-accessibility-to-a-sap-system/)
- [Create a Client PSE to connect to SAP Cloud Systems](create-personal-security-environment/)
- [Implement a connection pool](implement-a-connection-pool/)
- [Login to SAP with an SSO Logon Ticket](login-to-sap-with-an-sso-logonticket/)
- [Supported SAP S/4HANA Versions](supported-sap-and-hana-versions/)
- [Use ERPConnect in PowerShell](use-erpconnect-in-powershell/)

______________________________________________________________________

### ABAP Code

- [Create an ABP Interpreter](abap-interpreter/)

______________________________________________________________________

### BAPIs and Function Modules

- [Change Batch Value of an Outbound Delivery](change-batch-value-of-an-outbound-delivery/)
- [Change Production Order](change-production-order/)
- [Create Equipment](create-equipment/)
- [Create Functional Location](create-functional-location/)
- [Create a Purchase Order](create-a-purchase-order/)
- [Download Business Object Attachments](download-business-object-attachments/)
- [Get Purchase Requisition Details](get-purchase-requisition-details/)
- [Get a List of all SAP users](get-a-list-of-all-users/)
- [Get an Equipment List](get-an-equipment-list/)
- [Look up Purchase Orders](look-up-purchase-orders/)
- [Post Goods Movement](post-goods-movement/)
- [Read Material BOM](read-material-bom/)
- [Read Personnel Data](call-a-bapi-bapi_employee_getdata/)
- [Read/Write Material Master Data](readwrite-material-master-data/)
- [Reset the Password of an SAP User](reset-users-password/)
- [Retrieve Stock Quantity](retrieve-stock-quantity/)
- [Retrieve Texts from a Sales Order](retrieve-texts-from-a-sales-order/)
- [Retrieve the Quantity of a Purchase Order that has already been received](retrieve-the-quantity-of-a-purchase-order-that-has-already-been-received/)
- [Upload Documents to the BDS](upload-documents-to-the-bds/)
- [Use the ArchiveLink BAPI to send Barcodes to SAP](use-the-archivelink-bapi-to-send-barcodes-to-sap/)

______________________________________________________________________

### BW Cubes and BW Queries

- [Fetch Data from a BW Query](execute-bw-queries/)

______________________________________________________________________

### IDocs

- [Receive an IDoc](receive-an-idoc/)
- [Resend IDocs which where set to CPICERR in SM58](resend-idocs-which-where-set-to-cpicerr-in-sm58/)
- [Send a MATMAS IDoc](send-a-matmas-idoc/)
- [Send a STATUS IDoc](send-a-simple-status-idoc/)
- [Send an ORDER IDoc](send-an-order-idoc/)

______________________________________________________________________

### Queries

- [Fetch Data from an SAP Query](fetch-data-from-an-sap-query/)

______________________________________________________________________

### RFC Server Functions

- [Calculate the length of the SAP type QUAN](calculate-the-length-of-the-sap-type-quan--when-setting-up-an-rfc-server/)
- [RFC Server Functions](rfc-server-functions/)
- [Transactional RFC Server](transactional-rfc-server/)

______________________________________________________________________

### Tables

- [Download Business Object Attachments](download-business-object-attachments/)
- [Get CostCenter Hierarchies](get-costcenter-hierarchies/)
- [Read meta data of a table](get-meta-data-of-a-table/)
- [Read SAP Tables Directly](read-sap-tables-directly/)
- [Transfer data packets with ReadTable](transfer-data-packets-with-readtable-class/)
- [Use ERPConnect in PowerShell](use-erpconnect-in-powershell/)

______________________________________________________________________

### Transactions

- [Access Stock Overview using Batch Input](access-stock-overview-using-batch-input/)
- [Create New Customers using Batch Input](create-new-customers-using-batch-input/)
- [Create Purchase Orders using Batch Input and Background Processing](create-purchase-orders-using-batch-input/)

The following sample shows how to create a simple ABAP interpreter that executes a dynamic SQL statement.

### Workflow

Follow the steps below to create an ABAP interpreter:

1. Connect to the SAP system using `R3Connection`.
1. Add a new line of code to the dynamic report using `AddCodeLine`.
1. Execute the report using `Execute`.
1. Read the result set (regarding the ABAP list) using `GetResultLine`.

### Create an ABAP Interpreter

The following sample shows how to create a simple ABAP interpreter that executes a dynamic SQL statement.

```csharp
using System;
using ERPConnect;
using ERPConnect.Utils;

// Set your ERPConnect license
LIC.SetLic("xxxx");

// Open the connection to SAP
using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

const string code =
    """
    REPORT ztestreport NO STANDARD PAGE HEADING.

    TABLES kna1.

    DATA c TYPE i.

    SELECT COUNT(*) INTO c FROM kna1.

    WRITE: /'System time ', sy-timlo.
    WRITE: /'Number of rows in KNA1: ', c.
    """;

var abapCode = new ABAPCode
{
    Connection = connection
};

string[] lines = code.Split('\n');
foreach (string s in lines)
{
    abapCode.AddCodeLine(s.Trim());
}

if (abapCode.Execute())
{
    for (int i = 0; i < abapCode.ResultLineCount; i++)
    {
        Console.WriteLine(abapCode.GetResultLine(i));
    }
}
else
{
    Console.WriteLine($"ABAP Error: {abapCode.LastABAPSyntaxError}");
}

```

Output:

```text
System time  11:17:46
Number of rows in KNA1:       7.705

```

This sample shows how to execute the SAP transaction MMBE (stock overview) using the *Transaction* class.

### About

In this application the user can enter a material number and the name of a plant.\
By clicking a button, the SAP GUI is launched and the transaction MMBE (stock overview) is executed to list the entered materials and plants.

Tip

The installation package of ERPConnect includes the *Transaction-Recorder* tool. This tool records transactions and implements them to code, see [Transaction-Recorder](../../documentation/transactions/transaction-recorder/).

### Call Transaction MMBE

The following sample code executes the SAP transaction MMBE (stock overview):

```csharp
using System;
using ERPConnect;
using ERPConnect.Utils;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
    UseGui = true,
};

connection.Open();

Console.Write("Material: ");
string material = Console.ReadLine();

Console.Write("Plant: ");
string plant = Console.ReadLine();

var transaction = new Transaction(connection)
{
    ExecutionMode = TransactionDialogMode.ShowAll,
    TCode = "MMBE"
};

transaction.AddStepSetNewDynpro("RMMMBEST", "1000");
transaction.AddStepSetOKCode("ONLI");
transaction.AddStepSetCursor("MS_WERKS-LOW");
transaction.AddStepSetField("MS_MATNR-LOW", material);
transaction.AddStepSetField("MS_WERKS-LOW", plant);

// run
transaction.Execute();

```

Input:

```text
Material: 100-100
Plant: 1000

```

Output:

This sample shows how to calculate the length of the SAP type QUAN in .NET.

When defining the SAP type QUAN in your RFC Server you also have to define it as a BCD (binary coded decimal) in .NET. The length in .NET is not the same as in SAP. Every digit from SAP needs a half byte. At the end you have to round up to a complete byte.

Example:

4 digits: 4 * 0.5 + 0.5 = 2.5 -> 3 byte Length\
13 digits: 13 * 0.5 + 0.5 = 7 -> 7 byte Length

The following code converts a QUAN field in SAP with the length 13,3:

```csharp
MYRFCTable.Columns.Add("BREIT", 7, 3, RFCTYPE.BCD);

```

This sample shows how to query personnel data in ERPConnect using the BAPI BAPI_EMPLOYEE_GETDATA.

### About

BAPI_EMPLOYEE_GETDATA is an RFC-enabled function module that should be present in every SAP system.\
The depicted sample programs use the last name / personnel number of an employee as an input parameter for the BAPI. The BAPI returns the employee's personnel data in table parameters.

### Read Personnel Data using Names

Follow the steps below to call the BAPI BAPI_EMPLOYEE_GETDATA:

1. Connect to the SAP system using `R3Connection`.
1. Create an RFCFunction object using `CreateFunction`.
1. Assign a string via user input to the import parameter *LASTNAME_M*.
1. Execute the function module using `Execute`.
1. The function module returns the table parameter *PERSONAL_DATA*. The table fields PERNO (personnel number), LAST_NAME (last name) and FIRSTNAME (first name) are written to the console.

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

// Create a function object
RFCFunction func = connection.CreateFunction("BAPI_EMPLOYEE_GETDATA");
Console.WriteLine("Please enter Lastname of Employee...");
Console.WriteLine("(you can also use Wildcard Characters * ...)");

// fill the export parameter
string employeeName = Console.ReadLine();
func.Exports["LASTNAME_M"].ParamValue = employeeName;
func.Exports["DATE"].ParamValue = DateTime.Now.ToString("yyyyMMdd");

try
{
    func.Execute();
}
catch (ERPException e)
{
    Console.WriteLine(e.Message);
    Console.ReadLine();
    return;
}

// Output the result of the function module
RFCTable employeeDataTable = func.Tables["PERSONAL_DATA"];
if (employeeDataTable.RowCount > 0)
{
    for (int i = 0; i < employeeDataTable.RowCount; i++)
    {
        Console.WriteLine(
            employeeDataTable.Rows[i]["PERNO"] + " " +
            employeeDataTable.Rows[i]["LAST_NAME"] + " " +
            employeeDataTable.Rows[i]["FIRSTNAME"]);
    }
}
else
{
    Console.WriteLine("No Employee found");
}

```

Output:

### Read Personnel Data using Personnel Numbers

Follow the steps below to call the BAPI BAPI_EMPLOYEE_GETDATA:

1. Connect to the SAP system using `R3Connection`.
1. Create an RFCFunction object using `CreateFunction`.
1. Assign a string via user input to the import parameter *EmployeeID*.
1. Execute the function module using `Execute`.
1. The function module returns the table parameter *ORG_ASSIGNMENT*. The table fields NAME (name of the employee), POSTXT (role), ORGTXT (department) and COSTCENTER (cost center) are written to the console.
1. The function module returns the table parameter *COMMUNICATION*. The table fields USRID_LONG (email address) is written to the console.
1. The function module returns the table parameter *INTERNAL_CONTROL*. The table fields PHONENO1 (phone number) is written to the console.

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

// Create a function object
RFCFunction func = connection.CreateFunction("BAPI_EMPLOYEE_GETDATA");
Console.WriteLine("Please enter Employee ID: ");

// fill the export parameter 
string EmployeeID = Console.ReadLine();
func.Exports["EMPLOYEE_ID"].ParamValue = EmployeeID;
func.Exports["DATE"].ParamValue = ERPConnect.ConversionUtils.NetDate2SAPDate(System.DateTime.Now);

func.Execute();

if (func.Imports["RETURN"].ToStructure()["MESSAGE"].ToString().Trim() != "")
{
    Console.WriteLine(func.Imports["RETURN"].ToStructure()["MESSAGE"].ToString());
    return;
}

if (func.Tables["ORG_ASSIGNMENT"].RowCount > 0)
{
    Console.WriteLine("Name: " + func.Tables["ORG_ASSIGNMENT"].Rows[0, "NAME"].ToString());
    Console.WriteLine("Role: " + func.Tables["ORG_ASSIGNMENT"].Rows[0, "POSTXT"].ToString());
    Console.WriteLine("Dept: " + func.Tables["ORG_ASSIGNMENT"].Rows[0, "ORGTXT"].ToString());
    Console.WriteLine("Costcenter: " + func.Tables["ORG_ASSIGNMENT"].Rows[0, "COSTCENTER"].ToString());
}

if (func.Tables["COMMUNICATION"].RowCount > 0)
{
    Console.WriteLine("Email: " + func.Tables["COMMUNICATION"].Rows[0, "USRID_LONG"].ToString());
}

 if (func.Tables["INTERNAL_CONTROL"].RowCount > 0)
{
    Console.WriteLine("Phone: " + func.Tables["INTERNAL_CONTROL"].Rows[0, "PHONENO1"].ToString());
}

Console.ReadKey();

```

Output:

This sample shows how to change the batch values in SAP in an outbound delivery using the BAPI BAPI_OUTB_DELIVERY_CHANGE.

### Call BAPI_OUTB_DELIVERY_CHANGE

The following sample code changes the batch values in SAP in an outbound delivery:

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

try
{

    // Create a function object, fill parameters and execute
    RFCFunction f = connection.CreateFunction("BAPI_OUTB_DELIVERY_CHANGE");

    //Fill in values for HEADER_DATA SAP Import Structure
    RFCStructure fHeader = f.Exports["HEADER_DATA"].ToStructure();
    fHeader["DELIV_NUMB"] = "0080016236";

    f.Exports["DELIVERY"].ParamValue = "0080016236";

    // first Batch
    RFCTable fPosT = f.Tables["ITEM_DATA"];
    RFCStructure fPos = fPosT.AddRow();
    fPos["DELIV_NUMB"] = "0080016236";
    fPos["DELIV_ITEM"] = "000010";
    fPos["MATERIAL"] = "100-302";
    fPos["BATCH"] = "EIGEN_HALB";
    fPos["HIERARITEM"] = "10";

    fPos["USEHIERITM"] = "1";

    fPos["DLV_QTY"] = 1;
    fPos["DLV_QTY_IMUNIT"] = 1;

    fPos["FACT_UNIT_NOM"] = "1";
    fPos["FACT_UNIT_DENOM"] = "1";

    fPos["SALES_UNIT"] = "ST";

    //Second Batch
    fPos = fPosT.AddRow();
    fPos["DELIV_NUMB"] = "0080016236";
    fPos["DELIV_ITEM"] = "000010";
    fPos["MATERIAL"] = "100-302";
    fPos["BATCH"] = "FREMD_HALB";

    fPos["HIERARITEM"] = "10";

    fPos["USEHIERITM"] = "1";
    fPos["DLV_QTY"] = 2;
    fPos["DLV_QTY_IMUNIT"] = 2;

    fPos["FACT_UNIT_NOM"] = "1";
    fPos["FACT_UNIT_DENOM"] = "1";

    fPos["SALES_UNIT"] = "ST";

    //Fill in values for ITEM_CONTROL Table
    RFCTable fPosCtrlT = f.Tables["ITEM_CONTROL"];
    RFCStructure fPosCtrl = fPosCtrlT.AddRow();

    fPosCtrl["DELIV_NUMB"] = "0080016236";
    fPosCtrl["DELIV_ITEM"] = "000010";

    fPosCtrl["CHG_DELQTY"] = "X";
    // Execute function
    f.Execute();

    //Create commit function object
    RFCFunction funcCommit = r3Connection1.CreateFunction("BAPI_TRANSACTION_COMMIT");
    funcCommit.Exports["WAIT"].ParamValue = "X";

    // Execute commit function
    funcCommit.Execute();
}

catch (Exception e1)
{
    Console.WriteLine(e1.Message);
}

connection.Close();

```

This sample shows how to change a production order using the function module CLOI_CHANGES_UPL_31.

### About

This sample can be used to send changes to SAP if an external program does the planning of the productions orders.

To change the header data you need the production order number and the field name you are going to change. For a complete list of all fields, refer to the [SAP Help: Function Module CLOI_CHANGES_UPL_31](https://help.sap.com/docs/SAP_ERP/812f0b55261a4d58abe8af46f4bd8cc5/fa1ebf53d25ab64ce10000000a174cb4.html?version=6.05.latest)

Typical applications include:

- changing the start date (Field GSTRP)
- changing the end date (Field GLTRP)
- changing the quantity (Field BDMNG)
- changing the start time (Field GSUZP)
- rescheduling the production order using the field METHOD with the value "SCHEDULE"

The table CLOI_MESSAGE_LOG_EXP contains the message codes of the function module.

### Call CLOI_CHANGES_UPL_31

The following sample code changes the start date (Field GSTRP) and the end date (Field GLTRP) of a production order.\
To reschedule all item data of the production order the value of the field METHOD is set to "DISPATCH".

```csharp
public static string ChangeProductionOrder(string AUFNR, string VORNR, string APLFL)
 {
   string rMessage = "";

   RFCFunction func = connection.CreateFunction("CLOI_CHANGES_UPL_31");

   func.Exports["CLOI_IF_PAR"].ToStructure()["COMMITFLG"] = "C";
   func.Exports["CLOI_IF_PAR"].ToStructure()["R3_VERSION"] = "60";   //SAP Version

   func.Exports["CLOI_IF_PAR"].ToStructure()["MSG_FILTER"] = "";     // Show All Messages
   func.Exports["CLOI_IF_PAR"].ToStructure()["MSGLOG_REQ"] = "X";    //Message Return Tables  
   func.Exports["CLOI_IF_PAR"].ToStructure()["MSGOBJ_REQ"] = "X";
   func.Exports["CLOI_IF_PAR"].ToStructure()["ORD_REQ"] = "X";
   func.Exports["CLOI_IF_PAR"].ToStructure()["ORDOPR_REQ"] = "X";
   func.Exports["CLOI_IF_PAR"].ToStructure()["METLOG_REQ"] = "X";
   func.Exports["CLOI_IF_PAR"].ToStructure()["ORDSEQ_REQ"] = "X";

   // Change Header Data

   // Change Start Time
   RFCStructure orduRow = func.Tables["CLOI_ORDU_IMP"].Rows.Add();
   orduRow["AUFNR"] = AUFNR;
   orduRow["FIELD"] = "GSTRP";
   orduRow["VALUE"] = "20080815";

   //Change Finish Time
   orduRow = func.Tables["CLOI_ORDU_IMP"].Rows.Add();
   orduRow["AUFNR"] = AUFNR;
   orduRow["FIELD"] = "GLTRP";
   orduRow["VALUE"] = "20080815";

   orduRow = func.Tables["CLOI_ORDU_IMP"].Rows.Add();
   orduRow["AUFNR"] = AUFNR;
   orduRow["FIELD"] = "METHOD";
   orduRow["VALUE"] = "SCHEDULE";       

   func.Execute();

   if (func.Tables["CLOI_MESSAGE_LOG_EXP"].RowCount > 0)
    {
      RFCStructure MyMessageRow = func.Tables["CLOI_MESSAGE_LOG_EXP"].Rows[0];
      rMessage = "MessageType: " + MyMessageRow[3].ToString() + 
      " Message (Please Check SE91): " + MyMessageRow[1].ToString() + " - " + 
      MyMessageRow[2].ToString();
    }
    else

    {
    rMessage = "No Messages found";
    } 
     return rMessage;
 }

```

```csharp
public static string ChangeProductionOrderPos(string AUFNR, string VORNR, string APLFL)
 {
   string rMessage = "";

   RFCFunction func = connection.CreateFunction("CLOI_CHANGES_UPL_31");

   func.Exports["CLOI_IF_PAR"].ToStructure()["COMMITFLG"] = "C";
   func.Exports["CLOI_IF_PAR"].ToStructure()["R3_VERSION"] = "60";   //SAP Version

   func.Exports["CLOI_IF_PAR"].ToStructure()["MSG_FILTER"] = "";     // Show All Messages
   func.Exports["CLOI_IF_PAR"].ToStructure()["MSGLOG_REQ"] = "X";    //Message Return Tables  
   func.Exports["CLOI_IF_PAR"].ToStructure()["MSGOBJ_REQ"] = "X";
   func.Exports["CLOI_IF_PAR"].ToStructure()["ORD_REQ"] = "X";
   func.Exports["CLOI_IF_PAR"].ToStructure()["ORDOPR_REQ"] = "X";
   func.Exports["CLOI_IF_PAR"].ToStructure()["METLOG_REQ"] = "X";
   func.Exports["CLOI_IF_PAR"].ToStructure()["ORDSEQ_REQ"] = "X";

   // Change Position Data

   RFCStructure opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();

   // Changes the work center 
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "ARBPL";
   opruRow["VALUE"] = "1112";      // Note : The internal ID of workcenter

   //Earliest date when execution of operation can finish
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "FSEDD";
   opruRow["VALUE"] = "20080812";

   //Earliest time when execution of operation can finish
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "FSEDZ";
   opruRow["VALUE"] = "080000";

   //Earliest date when execution of operation can start
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "FSAVD";
            opruRow["VALUE"] = "20080812";

   //Earliest time when execution of operation can start
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "FSAVZ";
   opruRow["VALUE"] = "080000";

   //Earliest date when processing of operation can start
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "FSSBD";
   opruRow["VALUE"] = "20080812";

   //Earliest time when processing of operation can start
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "FSSBZ";
   opruRow["VALUE"] = "080000";

   //Earliest date when teardown of operation can start
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "FSSAD";
   opruRow["VALUE"] = "20080812";

   //Earliest time when teardown of operation can start
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "FSSAZ";
   opruRow["VALUE"] = "080000";

   //Latest date when execution of operation can finish
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "SSEDD";
   opruRow["VALUE"] = "20080813";

   //Latest time when execution of operation can finish
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "SSEDZ";
   opruRow["VALUE"] = "100000";

   //Latest date when execution of operation can start
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "SSAVD";
   opruRow["VALUE"] = "20080813";

   //Latest time when execution of operation can start
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "SSAVZ";
   opruRow["VALUE"] = "100000";

   //Latest date when teardown of operation can start
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "SSSAD";
   opruRow["VALUE"] = "20080813";

   //Latest time when teardown of operation can start
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "SSSAZ";
   opruRow["VALUE"] = "100000";

   //Latest date when processing of operation can start
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "SSSBD";
   opruRow["VALUE"] = "20080813";

   //Latest time when processing of operation can start
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "SSSBZ";
   opruRow["VALUE"] = "100000";

   //Dispatches the Order. 
   opruRow = func.Tables["CLOI_ORD_OPRU_IMP"].Rows.Add();
   opruRow["AUFNR"] = AUFNR;
   opruRow["VORNR"] = VORNR;
   opruRow["APLFL"] = APLFL;
   opruRow["FIELD"] = "METHOD";
   opruRow["VALUE"] = "DISPATCH";

   func.Execute();

   if (func.Tables["CLOI_MESSAGE_LOG_EXP"].RowCount > 0)
    {
      RFCStructure MyMessageRow = func.Tables["CLOI_MESSAGE_LOG_EXP"].Rows[0];
      rMessage = "MessageType: " + MyMessageRow[3].ToString() + 
      " Message (Please Check SE91): " + MyMessageRow[1].ToString() + " - " + 
      MyMessageRow[2].ToString();
    }
     return rMessage;
 }

```

Output:

Tip

Use SAP transaction SE91 to look up all message codes. The Messagecode C7 - 071 means "Operation has been scheduled".

The following sample shows how to create a purchase order using the *BAPI_PO_CREATE*.

### Call BAPI_PO_CREATE

To create a purchase order using the *BAPI_PO_CREATE* BAPI, follow the steps below:

1. Establish a connection to the SAP system
1. Create an RFC-Function object for the BAPI *BAPI_PO_CREATE*.
1. Fill the structure *PO_HEADER* with the following values:
   - DOC_TYPE -> Order type (NB normal order)
   - PURCH_ORG -> Purchasing organization
   - PUR_GROUP -> Purchasing group
   - DOC_DATE -> Date
   - VENDOR -> Vendor number
1. Define the items *PLANT* and *PUR_MAT* (material number) in the table *PO_ITEMS*.
1. The values for the quantity (*QUANTITY*) and the delivery date (*DELIV_DATE*) must be placed in the table *PO_ITEM_SHEDULES*.
1. Execute the BAPI and process the return messages.

Input:

```text
Vendor: 0000001070
Material: B-7000
Plant: 1000
Quantity: 10

```

```csharp
using System;
using ERPConnect;

Console.Write("Vendor: ");
string vendor = Console.ReadLine();

Console.Write("Material: ");
string material = Console.ReadLine();

Console.Write("Plant: ");
string plant = Console.ReadLine();

Console.Write("Quantity: ");
decimal quantity = decimal.Parse(Console.ReadLine() ?? string.Empty);

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

// Create an RFC-Function object
RFCFunction func = connection.CreateFunction("BAPI_PO_CREATE");

// Fill header structure
RFCStructure header = func.Exports["PO_HEADER"].ToStructure();
header["DOC_TYPE"] = "NB";
header["PURCH_ORG"] = "1000";
header["PUR_GROUP"] = "010";
header["DOC_DATE"] = DateTime.Now.ToString("yyyyMMdd");
header["VENDOR"] = vendor;

// Create an Item
RFCTable items = func.Tables["PO_ITEMS"];
RFCStructure item = items.AddRow();
item["PO_ITEM"] = "1";
item["PUR_MAT"] = material;
item["PLANT"] = plant;

// Create and fill schedules
RFCTable schedules = func.Tables["PO_ITEM_SCHEDULES"];
RFCStructure schedule = schedules.AddRow();
schedule["PO_ITEM"] = "1";
schedule["DELIV_DATE"] = DateTime.Now.ToString("yyyyMMdd");
schedule["QUANTITY"] = quantity;

// Execute Bapi and process return messages
func.Execute();

var returnMessage = func.Tables["RETURN"].Rows[0, "MESSAGE"].ToString();

Console.WriteLine($"Message: {returnMessage}");

```

Output:

```text
Message: Standard PO created under the number 4500018292

```

This sample shows how to create equipment in SAP using the BAPI BAPI_EQMT_MODIFY.

### About

The BAI BAPI_EQMT_MODIFY can be used to create or change equipment in SAP.

To create equipment using the BAPI BAPI_EQMT_MODIFY the equipment name (equi_master["EQUIPMENT"]) must be written in uppercase. The fields EQUITYPE,INVENTORY and MANFACTURE are optional.

### Call BAPI_EQMT_MODIFY

The following sample code creates equipment in SAP using the BAPI BAPI_EQMT_MODIFY:

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

RFCFunction func = connection.CreateFunction("BAPI_EQMT_CREATE");

RFCStructure equi_master = func.Exports["EQUIMASTER"].ToStructure();

    equi_master["EQUIPMENT"] = "TESTEQUIP04"; //  Equipment
    equi_master["EQUICATGRY"] = "M"; //EquipmentCategory
    equi_master["EQUITYPE"] = "5000"; //ObjectType     optional
    equi_master["INVENTORY"] = "123456"; //Inventury No.  optional
    equi_master["MANFACTURE"] = "TEST AG"; //Manufacturer   optional

RFCStructure equi_text = func.Exports["EQUITEXT"].ToStructure();

    equi_text["EQUIDESCR"] = "TestDescription"; //Description

RFCStructure equi_location = func.Exports["EQUILOCATION"].ToStructure();

    equi_location["MAINTPLANT"] = "1000"; //Plant

func.Execute();


// ReturnMessage from BAPI
RFCStructure funcRet = func.Imports["RETURN"].ToStructure();
if (funcRet["Type"].ToString() == "S")
    Console.WriteLine("Equipment was created succesfully");
else
Console.WriteLine (funcRet["MESSAGE"].ToString());
Console.WriteLine("Please Press Enter to continue");

Console.ReadLine();

```

This sample shows how to create a [Functional Location](https://help.sap.com/doc/saphelp_nw70/7.0.12/ja-JP/01/d5438b4ab311d189740000e8322d00/content.htm?no_cache=true) in SAP using the BAPI BAPI_FUNCLOC_CREATE.

### About

The Functional Location (External Number) must match the structure defined in the exporting parameter STRIND of BAPI_FUNCLOC_CREATE. You can export the default value for the superior functional location under data_specific - SUPFLOC.

Tip

To change a Functional Location replace the function module "BAPI_FUNCLOC_CREATE" with the function module "BAPI_FUNCLOC_CHANGE".

### Call BAPI_FUNCLOC_CREATE

The following sample code calls the BAPI BAPI_FUNCLOC_CREATE to create a Functional Location in SAP:

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

RFCFunction func = connection.CreateFunction("BAPI_FUNCLOC_CREATE");
RFCStructure data_specific = func.Exports["DATA_SPECIFIC"].ToStructure();

    data_specific["STRIND"] = "A"; //StrIndicator
    data_specific["CATEGORY"] = "M"; //Category
    data_specific["SUPFLOC"] = ""; //Superior Function Location

RFCStructure data_general = func.Exports["DATA_GENERAL"].ToStructure();

    data_general["DESCRIPT"] = "My New Location2"; //Description
    data_general["MAINTPLANT"] = "1000"; //Mainplant        

func.Exports["LABELING_SYSTEM"].ParamValue = "A"; //Labeling System
func.Exports["EXTERNAL_NUMBER"].ParamValue = "1111-111-AA-15";  //Functional Location

func.Execute();

RFCFunction funcCommit = connection.CreateFunction("BAPI_TRANSACTION_COMMIT");

funcCommit.Exports["WAIT"].ParamValue  = "X"; 
funcCommit.Execute();

 // ReturnMessage from BAPI
RFCStructure funcRet = func.Imports["RETURN"].ToStructure();
//strmessage = funcRet["MESSAGE"].ToString();

Console.WriteLine (funcRet["MESSAGE"].ToString());
Console.WriteLine ("Please press a Key to continue")

Console.ReadLine();

```

This sample shows how to use batch input with SAP transaction XD01 in ERPConnect to create new customers in SAP.

Note

Using the BAPI BAPI_CUSTOMER_CREATEFROMDATA1 is not recommended because it does not support some fields that are needed to create valid customer master data.

### Create a Code Template

Use the [transaction recorder](../../documentation/transactions/transaction-recorder/) tool located in the installation directory of ERPConnect (`C:\Program Files\ERPConnect`) to create a code template for the SAP transaction XD01:

### Call Transaction XD01

The following sample code calls SAP transaction XD01 to create new customers in SAP:

```csharp
using System;
using ERPConnect;
using ERPConnect.Utils;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

Transaction trans = new Transaction();

trans.Connection=connection;
trans.TCode="XD01"; // Transaction XD01


// First Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0100");
trans.AddStepSetOKCode("/00");
trans.AddStepSetField("RF02D-BUKRS","1000"); // Company Code
trans.AddStepSetField("RF02D-VKORG","1000"); // Sales Org
trans.AddStepSetField("RF02D-VTWEG","10"); // Distribution Channel
trans.AddStepSetField("RF02D-SPART","00"); // Division
trans.AddStepSetField("RF02D-KTOKD","ZARG"); // Account Group

//Main Address
trans.AddStepSetNewDynpro("SAPMF02D","0110");
trans.AddStepSetOKCode("/00");
trans.AddStepSetField("KNA1-NAME1","C. Pimpelhuber"); // Name 1
trans.AddStepSetField("KNA1-SORTL","PIMPELH"); // Search Term
trans.AddStepSetField("KNA1-ORT01","Stuttgart"); // City
trans.AddStepSetField("KNA1-STRAS","Olgastr. 20"); // City
trans.AddStepSetField("KNA1-PSTLZ","70182"); // Zip-Code
trans.AddStepSetField("KNA1-LAND1","DE"); // Country
trans.AddStepSetField("KNA1-SPRAS","DE"); // Language

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0120");
trans.AddStepSetOKCode("/00");

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0125");
trans.AddStepSetOKCode("/00");

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0130");
trans.AddStepSetOKCode("=ENTR");

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0340");
trans.AddStepSetOKCode("=ENTR");

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0370");
trans.AddStepSetOKCode("=ENTR");
trans.AddStepSetField("KNA1-CIVVE","X");

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0360");
trans.AddStepSetOKCode("=ENTR");

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0210");
trans.AddStepSetOKCode("/00");
trans.AddStepSetField("KNB1-AKONT","140000"); // Account

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0215");
trans.AddStepSetOKCode("/00");

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0220");
trans.AddStepSetOKCode("/00");

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0230");
trans.AddStepSetOKCode("/00");

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0310");
trans.AddStepSetOKCode("/00");
trans.AddStepSetField("KNVV-KALKS","1"); // Pricing Procedure

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0315");
trans.AddStepSetOKCode("/00");
trans.AddStepSetField("KNVV-VSBED","01"); // Shipping condition

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","0320");
trans.AddStepSetOKCode("/00");

//Next Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","1350");
trans.AddStepSetOKCode("=ENTR");
trans.AddStepSetField("KNVI-TAXKD(01)","1"); // Tax classification

//Begin a new Dynpro
trans.AddStepSetNewDynpro("SAPMF02D","1350");
trans.AddStepSetOKCode("=UPDA");

trans.Execute();

foreach(ERPConnect.Utils.BatchReturn ret in trans.Returns)
    Console.WriteLine(ret.Message);

Console.WriteLine("Press Enter to exit");
Console.ReadLine();

```

Output:

The following article shows how to create a client [PSE (Personal Security Environment)](https://help.sap.com/saphelp_nw73/helpdata/en/4c/61a6c6364012f3e10000000a15822b/frameset.htm) that can be used to connect to SAP cloud systems via WebSocket RFC.

### Prerequisites

- SAP Cloud API URL, e.g., `https://my123456-api.s4hana.ondemand.com`.
- [Download the SAP Cryptographic Library](https://help.sap.com/doc/saphelp_em900/9.0/en-US/48/a324e7ccfc062de10000000a42189d/frameset.htm) (sapgenpse.exe and sapcrypto.dll) from the SAP Service Marketplace.

### Creating a Client PSE

Follow the steps below to create a client PSE file that trusts the server certificate of the SAP cloud system.

1. Enter the SAP Cloud API URL in a browser of your choice.

1. View the certificate in the browser.

   Navigate to **View site information > Connection is secure > Certificate is valid**.

   Click the pad lock icon left of the URL, navigate to **Connection secure > More information**, then click **[View Certificate]**.

1. Download the certificate chain from the browser. The certificate chain contains all certificates that are signed by the server certificate.

   Open the *Details* tab and click **[Export...]**.\
   Make sure to save the file in the format *Base64-encoded ASCII, certificate chain (\*.pem;\*.crt)*.

   Scroll to the *Miscellaneous* section of the certificate and in the download row, click *PEM (chain)*.

1. Use the sapgenpse tool to create a client PSE file:

   ```text
   sapgenpse.exe gen_pse -p client.pse -v [Distinguished name]

   ```

   - Replace `[Distinguished name]` with the distinguished name of the server that runs the Xtract product, e.g., `"CN=COMPUTER.theobald.local, C=DE, S=BW, O=TS, OU=DEV"`.
   - Optionally, replace `client.pse` with a custom file name for the .pse file.
   - The tool creates its own repository in a standard path, unless the path is changed by the environment variable SECUDIR or by specifying an absolute path.

   Warning

   **Restricted Access**\
   The PSE must be created without a password/pin, otherwise reading is not possible. Make sure not to secure the PSE.

1. Use the following command to add the certificate chain from step 3 to the client PSE:

   ```text
   sapgenpse.exe maintain_pk -a <[chain.pem]> -p <client.pse>

   ```

   Replace `[chain.pem]` with the name of the downloaded .pem file, e.g., `s4hana-cloud-sap-chain.pem`. For more information on how to use the sapgenpse.exe, run the command `sapgenpse -h`.

The .pse file can now be used to connect ERPConnect to the SAP cloud, see [SAP Connection - WebSocket RFC](../../documentation/sap-connection/log-on-to-sap/).

This sample shows how to execute the SAP transaction ME21 (create purchase order) as a background process.

Tip

The installation package of ERPConnect includes the *Transaction-Recorder* tool. This tool records transactions and implements them to code, see [Transaction-Recorder](../../documentation/transactions/transaction-recorder/).

### Call Transaction ME21

```csharp
using (R3Connection con = new R3Connection("SAPServer", 00, "SAPUser", "Password", "EN", "800"))
    {
    con.Open();

    Transaction trans = new Transaction();
    trans.Connection = con;
    trans.TCode = "ME21";

    //Begin a new Dynpro
    trans.AddStepSetNewDynpro("SAPMM06E", "0100");
    trans.AddStepSetCursor("EKKO-EKGRP");
    trans.AddStepSetOKCode("/00"); // Enter
    trans.AddStepSetField("EKKO-LIFNR", "1070"); // Vendor
    trans.AddStepSetField("RM06E-BSART", "NB"); // Order Type
    trans.AddStepSetField("RM06E-BEDAT", "01.01.2006"); //Purch.Date
    trans.AddStepSetField("EKKO-EKORG", "1000"); // Purchase Org
    trans.AddStepSetField("EKKO-EKGRP", "010"); // Purchase Group
    trans.AddStepSetField("RM06E-LPEIN", "T");

    //Begin a new Dynpro
    trans.AddStepSetNewDynpro("SAPMM06E", "0120");
    trans.AddStepSetCursor("EKPO-WERKS(01)");
    trans.AddStepSetOKCode("=BU");
    trans.AddStepSetField("EKPO-EMATN(01)", "B-7000"); // Material
    trans.AddStepSetField("EKPO-MENGE(01)", "20"); // Quantity
    trans.AddStepSetField("EKPO-WERKS(01)", "1000"); // Plant
    trans.Execute();

    foreach (ERPConnect.Utils.BatchReturn br in trans.Returns)
        MessageBox.Show(br.Message);
    if (trans.Returns.Count == 0)
        MessageBox.Show("No Messages");
    }

```

At the end the code loops over the *Returns* collection to check the *BatchReturn* objects that contain the return messages of the Batch Input transaction.

This sample shows how to download attached files from common business objects using the SAP tables SRGBTBREL and SOOD and the function module SO_DOCUMENT_READ_API1.

### About

As of SAP rel. 4.6 users can attach documents to all common business objects, e.g., purchase orders:

This sample uses the following workflow to download attachment files:

1. Read the table SRGBTBREL to get all object IDs that are attached to business objects.
1. Read the table SOOD to get the corresponding file names and extensions of the object IDs.
1. Use SO_DOCUMENT_READ_API1 to download an attachment with a given object ID.

Note

The function modules BDS_CONNECTIONS_GET and BDS_DOCUMENT_GET_TABLE can not be used in this scenario. Even if BDS_CONNECTIONS_GET delivers correct document IDs, the function module BDS_DOCUMENT_GET_TABLE throws an exception (NOTHING_FOUND).

### Get a List of all SAP Attachments

#### Get a List of Object IDs

The following sample code reads the table SRGBTBREL to obtain all document IDs attached to a business object.

- The object key is the document number, e.g., the purchase number
- The object type is the name of the business object, e.g., BUS2012 for POs or BUS2010 for RFQs).

The function returns an array of strings each representing a key to a downloadable attachment.

```csharp
public static string[] GetAllAttachmentKeys(R3Connection connection, 
    string ObjectType, string ObjectKey)
{
    ReadTable read = new ReadTable(connection);
    read.TableName = "SRGBTBREL";
    read.AddField("INSTID_B");
    read.AddCriteria("RELTYPE = 'ATTA'");
    read.AddCriteria("AND INSTID_A = '" + ObjectKey + "'");
    read.AddCriteria("AND TYPEID_A = '" + ObjectType + "'");
    read.AddCriteria("AND CATID_A = 'BO'");
    read.Run();

    string[] DocIDs = new string[read.Result.Rows.Count];

    for (int i = 0; i < read.Result.Rows.Count; i++)
    {
        DocIDs[i] = read.Result.Rows[i]["INSTID_B"].ToString();
    }

    return DocIDs;
}

```

#### Get a List of File Names

The following sample code reads the table SOOD to get the file name of each attachment.

- The primary key of the table entry is defined by parts of the document IDs provided by the function `GetAllAttachmentKeys` above.
- The file name of the attachment can be created by concatenating OBJDES and FILE_EXT.

```csharp
public static string GetFileName(R3Connection connection, string DocID)
{
    string OBJTP = DocID.Substring(17, 3);
    string OBJYR = DocID.Substring(20, 2);
    string OBJNO = DocID.Substring(22, 12);
    ReadTable readsood = new ReadTable(connection);
    readsood.TableName = "SOOD";
    readsood.AddField("OBJDES");
    readsood.AddField("FILE_EXT");
    readsood.AddCriteria("OBJTP = '" + OBJTP + "'");
    readsood.AddCriteria("AND OBJYR = '" + OBJYR + "'");
    readsood.AddCriteria("AND OBJNO = '" + OBJNO + "'");
    readsood.Run();
    if (readsood.Result.Rows.Count == 0)
    {
        return "";
    }
    else
    {
        return readsood.Result.Rows[0]["OBJDES"].ToString() +
            "." + readsood.Result.Rows[0]["FILE_EXT"].ToString();
    }
}

```

### Download SAP Attachment Files

The following sample code downloads an attachment with a given object ID using the function module SO_DOCUMENT_READ_API1.

- The returning structure DOCUMENT_DATA contains information about the file, e.g., DOC_SIZE.
- The table OBJECT_CONTENT returns the binary content of the attachment as a string.
- The strings are converted into byte arrays and stored to the disk.

```csharp
public static void DownloadDocument(R3Connection connection, string Path, string key)
{
    RFCFunction func = connection.CreateFunction("SO_DOCUMENT_READ_API1");
    func.Exports["DOCUMENT_ID"].ParamValue = key;
    func.Execute();

    Int32 len = Convert.ToInt32(func.Imports["DOCUMENT_DATA"].ToStructure()["DOC_SIZE"]);


    string strfile = "";
    System.Text.Encoding enc = System.Text.Encoding.GetEncoding(1252);

    if (len > 0)
    {
        foreach (RFCStructure row in func.Tables["OBJECT_CONTENT"].Rows)
        {
            string stline = row["LINE"].ToString().PadRight(255);

            if (len < 255)
                stline = stline.Substring(0, len);
            else
                len = len - 255;

            strfile += stline;

        }
        byte[] bytesfile = enc.GetBytes(strfile);
        System.IO.File.WriteAllBytes(Path, bytesfile);
    }
    else
    {
        throw new Exception("Length of file = 0");
    }

}

```

### Read and Download Attachment Files

The following sample code queries a list of available attachments and downloads the attachments to the disk.\
To download attachments of other business objects, change the object type, e.g., BUS2010 for RFQ.

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

string[] DocIDs = GetAllAttachmentKeys(connection, "BUS2012", "4500014561");

if (DocIDs.Length == 0)
    Console.WriteLine("No attachments found");
else
{
    for (int i=0; i < DocIDs.Length ;i++)
    {
        string FileName = GetFileName(connection, DocIDs[i]);
        Console.WriteLine("Now downloading " + FileName);
        DownloadDocument(connection, @"c:\" + FileName, DocIDs[i]);
    }
}

Console.WriteLine("Press enter to exit");
Console.ReadLine();

```

The following sample shows how to fetch data from a BW Query using ERPConnect.

### About

This sample uses the BW query *ZSIMPLEQUERY* which is based on the cube *0D_DECU*.\
The following screenshot shows the query in the designer.

Note

To allow external access to a BW Query the checkbox **Allow external access** has to be set to active in the preferences for the query.

The dimensions *Material* and *Sold-to party* as well as the key figures *Billed Quantity* and *Costs* can be drawn into a *DataGrid*, see screenshot below.\
The dimension has a variable called *MAT01* that allows a limitation to the material number.

### Call ZSIMPLEQUERY

The following sample code calls the BW Query ZSIMPLEQUERY:

```csharp
using System;
using System.Data;
using ERPConnect;
using ERPConnect.BW;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

BWCube cube = connection.CreateBWCube("0D_DECU/DECUQUERY1");

cube.Dimensions["0D_MATERIAL"].SelectForFlatMDX = true;
cube.Dimensions["0D_SOLD_TO"].SelectForFlatMDX = true;

cube.Measures[0].SelectForFlatMDX = true;
cube.Measures[1].SelectForFlatMDX = true;

DataTable result = cube.Execute();
foreach (DataRow row in result.Rows)
{
    foreach (DataColumn column in result.Columns)
    {
        Console.WriteLine($"{column.Caption}: {row[column]}");
    }

    Console.WriteLine();
}

```

Output:

```text
Material (SAP Demo): M18
Sold-to-Party (SAP Demo): Thomas Bush Inc.
Net&value of the invoice item in the docCurrency (SAP Demo): 398403,00
Clearing value in document currency (SAP Demo): 328206,00

Material (SAP Demo): M18
Sold-to-Party (SAP Demo): Toro Motor Company
Net&value of the invoice item in the docCurrency (SAP Demo): 234234,00
Clearing value in document currency (SAP Demo): 196959,00

Material (SAP Demo): M18
Sold-to-Party (SAP Demo): Calorad Inc.
Net&value of the invoice item in the docCurrency (SAP Demo): 111921,00
Clearing value in document currency (SAP Demo): 96837,00

Material (SAP Demo): PCSERVICEA
Sold-to-Party (SAP Demo): Infix Co.
Net&value of the invoice item in the docCurrency (SAP Demo): 84564,00
Clearing value in document currency (SAP Demo): 0,00

Material (SAP Demo): PCSERVICEA
Sold-to-Party (SAP Demo): Lampen-Markt GmbH
Net&value of the invoice item in the docCurrency (SAP Demo): 2826,00
Clearing value in document currency (SAP Demo): 0,00

Material (SAP Demo): PCSERVICEA
Sold-to-Party (SAP Demo): Minerva Industries
Net&value of the invoice item in the docCurrency (SAP Demo): 27759,00
Clearing value in document currency (SAP Demo): 0,00

Material (SAP Demo): PCSERVICEA
Sold-to-Party (SAP Demo): Nobil North Sea Limi
Net&value of the invoice item in the docCurrency (SAP Demo): 11118,00
Clearing value in document currency (SAP Demo): 0,00

```

The following sample shows how to fetch flight information of airplanes from an SAP Query

### About

This sample uses the training Query *D3* that contains flight information of airplanes.\
Data that matches certain selection criteria (e.g. airline and date of flight) is fetched and drawn into a *DataGrid*, see screenshot below.

Tip

If you don't know the technical name of a Query parameter, you can look it up in your SAP-System. Use the transaction **SQ01** or **SQ02** to search a Query. Open the description of the Query and scroll to the section *Selections*. All parameter properties including the name are listed.

### Call D3

The Query *D3* has the following properties:

- user workspace: global
- user group: *BT*
- parameters: "CARRID" (airline) and "FLDATE" (date)

```csharp
private void btnFetchQueryData_Click(object sender, System.EventArgs e)
    {
      using (R3Connection con = new R3Connection("SAPServer", 00, "SAPUser", "Password", "EN", "800"))
        { 
           con.Open();

           // Create Query object Query q; 
           try
           {
               Query q = con.CreateQuery(WorkSpace.GlobalArea, "BT", "D3");

               // Add a criteria (in this case the airline) 
               q.SelectionParameters["CARRID"].Ranges.Add(
                   Sign.Include, RangeOption.Equals, inputAirline.Text);
               // Add a second criteria (in this case the date) 
               q.SelectionParameters["FLDATE"].Ranges.Add(
                   Sign.Include, RangeOption.Between, inputStartDate.Text, inputEndDate.Text);

               // Run the Query 
               q.Execute();
               // Bind result to datagrid 
               this.dataGridView1.DataSource = q.Result;
           }
           catch (Exception e1)
           {
            MessageBox.Show(e1.Message);
            return;
           }
        }
    }

```

This sample shows how to read the user names and address data of all users in the SAP system using the function module BAPI_HELPVALUES_GET.

### Call BAPI_HELPVALUES_GET

The following sample code reads user names and address data of SAP users using uses selection parameters for the import Table (SELECTION_FOR_HELPVALUES) of BAPI_HELPVALUES_GET.

```csharp
static ArrayList getUserList(string sign, string option, string low, string high)
    { 

        // Set your ERPConnect license
        LIC.SetLic("xxxx");

        // Open the connection to SAP
        using var connection = new R3Connection(
            host: "server.acme.org",
            systemNumber: 00,
            userName: "user",
            password: "passwd",
            language: "EN",
            client: "001")
        {
            Protocol = ClientProtocol.NWRFC,
        };

        connection.Open();    

        RFCFunction func = connection.CreateFunction("BAPI_HELPVALUES_GET");

        func.Exports["OBJTYPE"].ParamValue = "USER";
        func.Exports["METHOD"].ParamValue = "GETDETAIL";
        func.Exports["PARAMETER"].ParamValue = "USERNAME";

        RFCStructure shlp = func.Exports["EXPLICIT_SHLP"].ToStructure();
        shlp["SHLPNAME"] = "USER_ADDR";
        shlp["SHLPTYPE"] = "SH";

        RFCStructure sfh = func.Tables["SELECTION_FOR_HELPVALUES"].AddRow(); ;
        sfh["SELECT_FLD"] = "MC_NAMELAS";
        sfh["SIGN"] = sign;
        sfh["OPTION"] = option;
        sfh["LOW"] = low;
        sfh["HIGH"] = high;

        func.Execute();

        connection.Close();

        ArrayList user = new ArrayList();
        for (int i = 0; i < func.Tables["HELPVALUES"].RowCount; i++)
            {
                user.Add(func.Tables["HELPVALUES"].Rows[i, 0]);
            }
        if (user.Count == 0)
            {
                user.Add("No results matching criteria");
            }               

        return user;                           
    }

```

### Display Users

How to display all users, whose name start with M:

```csharp
static void Main(string[] args)
    {
        ArrayList users = getUserList("I","CP","M*","");
        foreach (object userdetail in users)
            {
                Console.WriteLine(userdetail);
            }
        Console.ReadLine();
    }

```

This sample shows how to get a (filtered) equipment list using the function module BAPI_EQUI_GETLIST.

### About

To get an equipment list you can use the function module BAPI_EQUI_GETLIST or the business object method `PieceOfEquipment.GetList`.

The function module offers selection ranges to filter the equipment. This sample shows how to use selection ranges for plants. Selection ranges use the following properties:

- SIGN defines whether to include or exclude the defined selection.
- OPTION defines the operator.
- The columns LOW and HIGH define the filter values.

### Call BAPI_EQUI_GETLIST

The following sample code queries an equipment list of all plants between 1000 and 2000 and all equipment of plant 3000.

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

// Create a function object
// Alternatively the business object method can be created via 
// BusinessObjectMethod businessMethod = connection.CreateBapi("PieceOfEquipment", "GetList")
RFCFunction func = connection.CreateFunction("BAPI_EQUI_GETLIST");

// The table MAINTPLANT_RA contains a selection range for plants
RFCStructure NewRow = func.Tables["MAINTPLANT_RA"].Rows.Add();
NewRow["SIGN"] = "I"; // Include
NewRow["OPTION"] = "EQ"; // Equals
NewRow["LOW"] = "3000"; // Low value -> Plant 3000
// create a scond range row
NewRow = func.Tables["MAINTPLANT_RA"].Rows.Add();
NewRow["SIGN"] = "I"; // Include
NewRow["OPTION"] = "BT"; // Between
NewRow["LOW"] = "1000"; // Low value -> Plant 1000
NewRow["HIGH"] = "2000"; // High value -> Plant 2000

func.Execute();

// print out equipment list
Console.WriteLine("Found " + func.Tables["EQUIPMENT_LIST"].Rows.Count.ToString() + " equipment rows");

foreach(RFCStructure row in func.Tables["EQUIPMENT_LIST"].Rows)
{
    Console.WriteLine("EQUIPMENT / DESCRIPT: " + 
        row["EQUIPMENT"].ToString() + " / " + row["DESCRIPT"].ToString());
}

```

This sample shows how to build a treeview with cost centers of one selected standard hierarchy.

### About

Cost center hierarchies are stored in different tables in SAP. Every controlling area has one standard hierarchy defined. Cost centers belong to these standard hierarchies.

### Set Up a Treeview of Cost Centers

The Windows form for the treeview should contain following elements:

- One button: *btnGetCC*
- One DataGridView: *dgContArea*
- One TreeView: *tvCC*

Follow the steps below to build a treeview during *FormLoad*:

1. Connect to the SAP system using `R3Connection`.
1. Read the SAP table TKA01 that contains the controlling area standard hierarchy relations.
1. Display the table in a *DataGridView*.
1. When selecting a controlling area with a click in the *DataGridView*, the standard hierarchy is written into a variable.
1. When clicking the button, the structure of the cost centers and the hierarchy are build and shown in the treeview.

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

string KOKRS;
string STDHIER;

private void frmMain_Load(object sender, EventArgs e)
{
   try
   {
      connection.AskUserAndOpen (true);
      ReadTable table = new ReadTable(connection);
      table.AddField("KOKRS");
      table.AddField("BEZEI");
      table.AddField("KHINR");
      table.TableName = "TKA01";
      table.Run();
      DataTable resulttable = table.Result;
      dgContArea.DataSource = resulttable;

      dgContArea.Columns["KOKRS"].HeaderText = "Controlling Area";
      dgContArea.Columns["BEZEI"].HeaderText = "Name";
      dgContArea.Columns["KHINR"].HeaderText = "Std. Hierarchy";
      dgContArea.Columns["KOKRS"].Width = 120;
      dgContArea.Columns["BEZEI"].Width = 150;
}
   catch (Exception e1)
   {
      MessageBox.Show(e1.Message);
   }
}

```

```csharp
private void dgContArea_Click(object sender, EventArgs e)
{
   STDHIER = dgContArea.CurrentRow.Cells["KHINR"].Value.ToString();
   KOKRS = dgContArea.CurrentRow.Cells["KOKRS"].Value.ToString();
}

```

```csharp
private void btnGetCC_Click(object sender, EventArgs e)
{
   tvCC.Nodes.Clear();
   tvCC.Nodes.Add(STDHIER);
   try
   {
      PopulateTreeView(STDHIER, tvCC.Nodes[0]);
   }
   catch (Exception e1)
   {
      MessageBox.Show(e1.Message);
   }
}

```

```csharp
public void PopulateTreeView(string Setname, TreeNode parentNode)
{
   try
   {
      ReadTable table = new ReadTable(connection);
      table.AddField("SETCLASS");
      table.AddField("SUBCLASS");
      table.AddField("SETNAME");
      table.AddField("SUBSETNAME");

      table.TableName = "SETNODE";
      table.WhereClause = "SETCLASS = '0101' and SUBCLASS = '" + KOKRS + "' and SETNAME = '" + Setname + "'";
      table.Run();

      DataTable ResultTable = table.Result;

      if (ResultTable.Rows.Count != 0)
      {
         for (int i = 0; i < ResultTable.Rows.Count; i++)
         {
            string Set = TreeViewKSTGroupText(ResultTable.Rows[i]["SUBSETNAME"].ToString());
            Set = ResultTable.Rows[i]["SUBSETNAME"].ToString() + " " + Set;
            TreeNode myNode = new TreeNode(Set);

            parentNode.Nodes.Add(myNode);
            PopulateTreeViewKST(ResultTable.Rows[i]["SUBSETNAME"].ToString(), myNode);
            PopulateTreeView(ResultTable.Rows[i]["SUBSETNAME"].ToString(), myNode);
         }
      }
   }

   catch (UnauthorizedAccessException)
   {
      parentNode.Nodes.Add("Access denied");
   } 
}

```

```csharp
public void PopulateTreeViewKST(string Setname, TreeNode parentNode)
   {
   try
   {
      ReadTable table = new ReadTable(connection);
      table.AddField("SETCLASS");
      table.AddField("SUBCLASS");
      table.AddField("SETNAME");
      table.AddField("VALFROM");

      table.TableName = "SETLEAF";
      table.WhereClause = "SETCLASS = '0101' and SUBCLASS = '" + KOKRS + "' and SETNAME = '" + Setname + "'";
      table.Run();

      DataTable ResultTable = table.Result;

      if (ResultTable.Rows.Count != 0)
      {
          for (int i = 0; i < ResultTable.Rows.Count; i++)
          {
             string KST = TreeViewKSTText(ResultTable.Rows[i]["VALFROM"].ToString());
             KST = ResultTable.Rows[i]["VALFROM"].ToString() + " " + KST;
             TreeNode myNode = new TreeNode(KST);
           ´ myNode.ForeColor = Color.Red;
             parentNode.Nodes.Add(myNode);
          }
       }
   }
   catch (UnauthorizedAccessException)
   {
      parentNode.Nodes.Add("Access denied");
   } 
}

```

```csharp
public string TreeViewKSTGroupText(string Setname)
{
   ReadTable tableKST = new ReadTable(connection);
   tableKST.AddField("SETCLASS");
   tableKST.AddField("SUBCLASS");
   tableKST.AddField("SETNAME");
   tableKST.AddField("LANGU");
   tableKST.AddField("DESCRIPT");

   tableKST.TableName = "SETHEADERT";
   tableKST.WhereClause = "SETCLASS = '0101' and SUBCLASS = '" + KOKRS + "' and SETNAME = '" + Setname + "' and LANGU = 'EN'";
   tableKST.Run();

   DataTable ResultTable = tableKST.Result;
   if (ResultTable.Rows.Count > 0)
   {
      return ResultTable.Rows[0]["DESCRIPT"].ToString();

   }
   else
   {
      return " ";
   }
}

```

```csharp
public string TreeViewKSTText(string KST)
{
   ReadTable tableKST = new ReadTable(connection);
   tableKST.AddField("KOKRS");
   tableKST.AddField("KOSTL");

   tableKST.AddField("SPRAS");
   tableKST.AddField("KTEXT");

   tableKST.TableName = "CSKT";
   tableKST.WhereClause = "KOKRS = '" + KOKRS + "' and KOSTL = '" + KST + "' and SPRAS = 'EN'";
   tableKST.Run();

   DataTable ResultTable = tableKST.Result;

   if (ResultTable.Rows.Count > 0)
   {
      return ResultTable.Rows[0]["KTEXT"].ToString();
   }
   else
   {
   return " ";
   }
}

```

This sample shows how to read the meta data of an SAP table using the *ReadTable* class.

```csharp
using System;
using ERPConnect;
using ERPConnect.Utils;

// Set your ERPConnect license
LIC.SetLic("xxxx");

// Open the connection to SAP
using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

ReadTable read = new ReadTable(connection);
read.TableName = "MKPF";
read.RetrieveAllFieldsOfTable();

// Fill the fields collection with detailed information on each column
for(int i=0; i < read.Fields.Count; i++)
    Console.WriteLine(read.Fields[i].FieldName + " (" +
        read.Fields[i].ABAPType + ", " + read.Fields[i].Length + ")");

connection.Close();

```

This sample shows how to list detailed data of a purchase requisition using the BAPI BAPI_REQUISITION_GETDETAIL.

### About

To get the processing status of a purchase requisition, send the purchase requisition number to the BAPI. If the call is successful, the item data is returned in the Table REQUISITION_ITEMS.

Possible processing statuses returned by BAPI_REQUISITION_GETDETAIL:

- N - Not edited
- B - PO created
- A - RFQ created
- K - Contract created
- L - Scheduling agreement created
- S - Service entry sheet created

### Call BAPI_REQUISITION_GETDETAIL

The following sample code calls the BAPI BAPI_REQUISITION_GETDETAIL to get the processing status of a purchase requisition:

```csharp
public static void BanfStatus(string Banf_Number)
{
    RFCFunction func = connection.CreateFunction("BAPI_REQUISITION_GETDETAIL");
    func.Exports["NUMBER"].ParamValue = Banf_Number; 

    func.Execute();

    if (func.Tables["Return"].RowCount > 0)
    {
     string rMessage = func.Tables["Return"].Rows[0, "MESSAGE"].ToString();
     Console.WriteLine(rMessage);
    }
    if (func.Tables["REQUISITION_ITEMS"].RowCount > 0)
    {

     foreach (RFCStructure dr in func.Tables["REQUISITION_ITEMS"].Rows)
     {
       Console.WriteLine("BelgNummer:" + dr["PREQ_NO"].ToString() + " Pos: " + 
       dr["PREQ_ITEM"].ToString() + " Status: " + dr["PROC_STAT"].ToString());
     }
}

```

Output:

The following article shows how to check the accessibility of an SAP system using the [paping.exe](https://code.google.com/archive/p/paping) tool. Alternatively, you can also use the Microsoft [telnet](https://learn.microsoft.com/de-de/windows-server/administration/windows-commands/telnet) tool.

Sometimes the firewall is blocking the traffic to the SAP System. This could be a local firewall, but also a firewall in the destination network. You can use the paping.exetool to ping the port and to check if the firewall is open.

### Ping the SAP System

Use the following syntax with paping.exe:

```console
paping.exe SAPServer -p port -c 3*

```

```console
paping.exe 192.168.0.9 -p 3305 -c 3

```

### Port Numbers

If an SAP-Router is used, the ports are 3299 and 3399.\
If not, the ports are 32XX and 33XX. XX is usually the system number, e.g., 00, or 05.

Some important port numbers:

```console
sapdp00 3200/tcp # SAP Dispatcher. 3200 + Instance-Number
sapgw00 3300/tcp # SAP Gateway. 3300 + Instance-Number
sapsp00 3400/tcp # 3400 + Instance-Number
sapms00 3500/tcp # 3500 + Instance-Number
sapmsSID 3600/tcp # SAP Message Server. 3600 + Instance-Number
sapgw00s 4800/tcp # SAP Secure Gateway 4800 + Instance-Number

```

This sample shows how to implement a connection pool for SAP connections.

### About

In some situations it can be useful to use a connection pool. This means that several processes or threads use a set of SAP connections together, e.g., in a web application: 30 users work with an application but there are only 10 concurrent connections to SAP. Everytime an application process needs a connection a free connection is allocated by the pool. After having used the connection it is freed by the process and can be used by another one.

### Prerequisites

Before the ConnectionPool class can be used, the *R3Connection* class must be extended by inheriting it.\
The two new properties `LastUsage` and `IsInUse` are used later.

```csharp
class R3ConnectionEx : ERPConnect.R3Connection
{
    private DateTime _LastUsage = DateTime.Now;
    public DateTime LastUsage
    {
        get { return _LastUsage; }
        set { _LastUsage = value; }
    }

    private bool _IsInUse = false;
    public bool IsInUse
    {
        get { return _IsInUse; }
        set { _IsInUse = value; }
    }
}

```

### The ConnectionPool Class

The following sample code shows how to use the methods of the *ConnectionPool* class.

In the constructor of the class a timer is initialized.\
The timer is responsible for closing connections that are not used for a certain period of time.

```csharp
class R3ConnectionPool
{

    private System.Timers.Timer MyTimer = new System.Timers.Timer();
    public R3ConnectionPool()
    {
        // When this static class is created
        // initialize the timer and handle elapsed event
        MyTimer.Interval = 1000;
        MyTimer.Elapsed += new System.Timers.ElapsedEventHandler(MyTimer_Elapsed);
        MyTimer.Enabled = true;
    }

    private Int32 _MaxNoOfConnection = 10;
    public Int32 MaxNoOfConnection
    {
        get { return _MaxNoOfConnection; }
        set { _MaxNoOfConnection = value; }
    }

    private string _ConnectionString = "";
    public string ConnectionString
    {
        set { _ConnectionString = value; }
    }

    public Int32 CurrentNumberOfConnection
    {
        get { return MyConnectionList.Count; }
    }

```

The generic list *MyConnectionList* holds all active connections.\
When the last usage was more than 60 seconds ago and it is not currently in use, the connection is closed and removed from the list.

```csharp
private System.Collections.Generic.List
    MyConnectionList = new System.Collections.Generic.List();

private void MyTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
{
    // Loop through the list
    // and check, if a connection is not used for more than 60 second,
    // if so, close it an remove it from the list
    lock (MyConnectionList)
    {
        foreach (R3ConnectionEx con in MyConnectionList)
        {
            if (!con.IsInUse && con.LastUsage.AddSeconds(60) < DateTime.Now)
            {
                con.Close();
                MyConnectionList.Remove(con);
                return;
            }
        }
    }
}

```

The two private functions `AllocConnection()` and `FreeConnection()` are for allocating and deallocating connections.\
If there is no free connection available a new connection is created and added to the connection list.

```csharp
private R3ConnectionEx AllocConnection()
{
    lock (MyConnectionList)
    {
        foreach (R3ConnectionEx con in MyConnectionList)
        {
            if (!con.IsInUse)
            {
                con.IsInUse = true;
                return con;
            }
        }

        if (MyConnectionList.Count < this.MaxNoOfConnection)
        {
            R3ConnectionEx con = new R3ConnectionEx();
            con.Open(this._ConnectionString);
            this.MyConnectionList.Add(con);
            con.IsInUse = true;
            return con;
        }

        if (MyConnectionList.Count >= this.MaxNoOfConnection)
            throw new Exception("Maximun Number of connection exceeded");
        else
            throw new Exception("Unable to allocate a new connection");
    }
}

private void FreeConnection(R3ConnectionEx con)
{
    con.LastUsage = DateTime.Now;
    con.IsInUse = false;
}

```

Without the pool you would call `CreateFunction()` directly, e.g., `con.CreateFunction()`. When using the new pool class the `CreateFunction()` method is called by the pool after having allocated a connection dynamically.\
The RFCFunction object is cashed with the help of XML serialization and deserialization. This avoids retrieving the function's meta data from SAP every time `CreateFunction()` is called.

```csharp
private Hashtable FunctionHash = new Hashtable();
public RFCFunction CreateFunction(string FunctionName)
{

    lock (FunctionHash)
    {
        string xml = (string)FunctionHash[FunctionName];

        if (xml == null)
        {
            // The function has not been created yet in this pool
            R3ConnectionEx con = this.AllocConnection();
            try
            {
                RFCFunction func = con.CreateFunction(FunctionName);
                FreeConnection(con);
                // store in hash for later use
                FunctionHash.Add(FunctionName, func.SaveToXML());
                return func;
            }
            catch (Exception e1)
            {
                // Check if connection is still alive
                // if not, remove it
                if (!con.Ping())
                    MyConnectionList.Remove(con);
                else
                    FreeConnection(con);
                // rethrow exception
                throw e1;
            }

        }
        else
        {
            // We can create the function object without calling the CreateFunction method
            RFCFunction func = new RFCFunction(FunctionName);
            func.LoadFromXMLString(xml);
            return func;
        }
    }
}

```

The execution of the function uses the same principle as `CreateFunction()`:

- Allocate connection
- Execute
- Deallocate

```csharp
public void ExecuteFunction(RFCFunction func)
{
    R3ConnectionEx con = this.AllocConnection();
    try
    {
        func.Connection = (R3Connection)con;
        func.Execute();

    }
    catch (Exception e1)
    {
        // Check if connection is still alive
        // if not, remove it
        if (!con.Ping())
            MyConnectionList.Remove(con);
        FreeConnection(con);
        // rethrow exception
        throw e1;
    }

    FreeConnection(con);
}

```

### Test the connection pool

The following console program shows how to test and apply the connection pool class.

How it works:

- First 3 separate threads are started.
- After pressing **[Enter]** 3 more threads are started.
- The timer shows the current number of active connections.
- Depending on how many threads have already finished after the new ones have been started, the connections are recycled or newly connected.

The output shows:

- 3 threads are started
- 2 have finished
- 3 news threads are started
- Result: 4 active SAP connections, because after 2 have finished only 1 more is needed.

Source code of the sample program:

```csharp
class Program
{
    static R3ConnectionPool ConPool = new R3ConnectionPool();
    static System.Timers.Timer timer = new System.Timers.Timer();

    [STAThread]
    static void Main(string[] args)
    {
        timer.Interval = 1500;
        timer.Elapsed += new System.Timers.ElapsedEventHandler(timer_Elapsed);
        timer.Enabled = true;

        ConPool.ConnectionString = "USER=Theobald LANG=DE CLIENT=XXX SYSNR=XX ASHOST=XXX PASSWD=XXX ";

        Start3Threads("TH*","H*","X*");

        Console.WriteLine("3 threads started. Press enter to start 3 more threads");
        Console.Read();

        Start3Threads("A*", "B*", "C*");

        Console.WriteLine("3 additional threads started. Press enter to quit.");
        Console.ReadLine();
        Console.ReadLine();
        Console.ReadLine();
        Console.ReadLine();

    }

    static void Start3Threads(string SearchKey1, string SearchKey2, string SearchKey3)
    {
        System.Threading.Thread t4 = new System.Threading.Thread(
          new System.Threading.ParameterizedThreadStart(Execut eALongRunningFunctionModule));
        t4.Name = SearchKey1; t4.Start(SearchKey1);
        System.Threading.Thread t5 = new System.Threading.Thread(
           new System.Threading.ParameterizedThreadStart(Execut eALongRunningFunctionModule));
        t5.Name = SearchKey2; t5.Start(SearchKey2);
        System.Threading.Thread t6 = new System.Threading.Thread(
           new System.Threading.ParameterizedThreadStart(Execut eALongRunningFunctionModule));
        t6.Name = SearchKey3; t6.Start(SearchKey3);
    }

    static void timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        Console.WriteLine("Current Number of connections: " + ConPool.CurrentNumberOfConnection);
    }

    static void ExecuteALongRunningFunctionModule(object SearchTerm)
    {
        RFCFunction func = ConPool.CreateFunction("BAPI_EMPLOYEE_GETLIST");

        func.Exports["SUR_NAME_SEARK"].ParamValue = SearchTerm.ToString();
        func.Exports["SEARCH_DATE"].ParamValue = "20070101";


        ConPool.Execut eFunction(func);

        Console.WriteLine(func.Tables["EMPLOYEE_LIST"].Rows.Count.ToString()

            + " rows received -> SearchKey: " + System.Threading.Thread.CurrentThread.Name);

    }

}

```

This sample shows how to login to SAP with an SSO Logon Ticket.\
The following sample code retrieves the cookie from the SAP Portal Ticketissuer that contains the SSO Ticket using an HTTP Request with a Basic Authentication:

```csharp
using System;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;

using ERPConnect;
using ERPConnect.Utils;

Console.Write("User: ");
string user = Console.ReadLine();

Console.Write("Password: ");
string password = Console.ReadLine();

string cookie = RetrieveCookieBasic(user, password);
string ticket = ParseCookie(cookie);

using var connection = new R3Connection();
connection.Protocol = ClientProtocol.NWRFC;
connection.Host = "sapserver";
connection.Client = "001";
connection.Language = "EN";
connection.SystemNumber = 00;
connection.LogonTicket = ticket;

connection.Open();
var readTable = new ReadTable(connection)
{
    TableName = "USR01",
    WhereClause = "BNAME = SY-UNAME"
};

Console.WriteLine("Reading USR01...");
readTable.Run();

Console.WriteLine($"SAP user is {readTable.Result.Rows[0]["BNAME"]}");
return;

static string RetrieveCookieBasic(string user, string password)
{
    var httpWebRequest = (HttpWebRequest) HttpWebRequest.Create("http://sapserver:50000/irj/portal");
    string userAndPass = user + ":" + password;
    byte[] codepoints = Encoding.UTF8.GetBytes(userAndPass);
    string base64 = Convert.ToBase64String(codepoints);
    httpWebRequest.Headers[HttpRequestHeader.Authorization] = "Basic " + base64;

    using WebResponse webResponse = httpWebRequest.GetResponse();
    return webResponse.Headers[HttpResponseHeader.SetCookie];
}

static string ParseCookie(string cookie)
{
    Match match = Regex.Match(
        cookie,
        "MYSAPSSO2=([a-z0-9%]+);",
        RegexOptions.Compiled | RegexOptions.IgnoreCase);

    return match.Groups[1].Captures[0].Value;
}

```

______________________________________________________________________

#### Related Link:

- [Documentation: SSO with Logon Tickets](../../documentation/sap-connection/sso-with-log-on-tickets/).

This sample shows how to get a list of purchase orders using the BAPI BAPI_PO_GETITEMS.

### Call BAPI_PO_GETITEMS

The following sample code retrieves a list of purchase orders from SAP:

```csharp
using System;
using System.Globalization;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

Console.Write("Plant: ");
string plant = Console.ReadLine();

Console.Write("Purchase Order: ");
string purchaseOrder = Console.ReadLine();

Console.Write("Material: ");
string material = Console.ReadLine();

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

RFCFunction function = connection.CreateFunction("BAPI_PO_GETITEMS");
function.Exports["PLANT"].ParamValue = plant;
function.Exports["PURCHASEORDER"].ParamValue = purchaseOrder;
function.Exports["MATERIAL"].ParamValue = material;
function.Exports["ITEMS_OPEN_FOR_RECEIPT"].ParamValue = "X";
function.Exports["WITH_PO_HEADERS"].ParamValue = "X";
function.Execute();

RFCTable headersTable = function.Tables["PO_HEADERS"];
RFCTable itemsTable = function.Tables["PO_ITEMS"];

for (int i = 0; i < itemsTable.RowCount; i++)
{
    var purchaseOrderNumber = (string) itemsTable.Rows[i, "PO_NUMBER"];
    var item = (string) itemsTable.Rows[i, "PO_ITEM"];

    var total = (decimal) itemsTable.Rows[i, "DISP_QUAN"];
    decimal delivered = GetDeliveredQuantityForPurchaseOrder(
        connection,
        purchaseOrderNumber,
        item);

    Console.WriteLine("Purchase Order:");
    Console.WriteLine($"  Number: {purchaseOrderNumber}");
    Console.WriteLine($"  Item: {item}");
    Console.WriteLine($"  Material: {itemsTable.Rows[i, "PUR_MAT"]}");
    Console.WriteLine($"  Text: {itemsTable.Rows[i, "SHORT_TEXT"]}");
    Console.WriteLine($"  Open: {total - delivered}");

    // Loop header table and find the right PO
    for (int j = 0; j < headersTable.RowCount; j++)
    {
        var headerNumber = (string) headersTable.Rows[j, "PO_NUMBER"];
        if (headerNumber == purchaseOrderNumber)
        {
            var date = (string) headersTable.Rows[j, "DOC_DATE"];
            DateTime parsedDate = DateTime.ParseExact(
                date,
                "yyyyMMdd",
                CultureInfo.InvariantCulture);

            Console.WriteLine($"  Date: {parsedDate}");
            Console.WriteLine($"  Vendor: {headersTable.Rows[i, "VEND_NAME"]}");
        }
    }
}

return;

// Determine the quantity that is already receipted
static decimal GetDeliveredQuantityForPurchaseOrder(
    R3Connection connection,
    string purchaseOrder,
    string item)
{
    RFCFunction func = connection.CreateFunction("BAPI_PO_GETDETAIL");
    func.Exports["PURCHASEORDER"].ParamValue = purchaseOrder;
    func.Exports["HISTORY"].ParamValue = "X";
    func.Exports["ITEMS"].ParamValue = " ";
    func.Execute();

    RFCTable table = func.Tables["PO_ITEM_HISTORY_TOTALS"];
    for (int i = 0; i < table.RowCount; i++)
    {
        RFCStructure row = table.Rows[i];
        var historyItem = (string) row["PO_ITEM"];
        if (historyItem == item)
        {
            return (decimal) row["DELIV_QTY"];
        }
    }

    return 0;
}

```

This sample shows how to create a goods receipt for a goods movement using the BAPI BAPI_GOODSMVT_CREATE.

### About

The BAPI BAPI_GOODSMVT_CREATE requires multiple parameters to create a goods receipt for a goods movement.\
The export parameter GM_CODE of BAPI_GOODSMVT_CREATE represents the transaction code that would be used to post the movement as a dialog user. Values for GM_CODE include:

- “01” is replaced by SAP with the transaction code MB01 that creates a goods receipt for purchase orders.
- “02” is replaced by SAP with the transaction code MB31 for goods receipt for production orders.
- "05" is replaced by SAP with the transaction code MB1C for other goods receipts.

Other export parameters for BAPI_GOODSMVT_CREATE include:

- the Posting Date of the Document
- the Username
- the Document Date.

The table parameters for BAPI_GOODSMVT_CREATE include:

- PLANT (Plant)
- PO_NUMBER (Purchase Order Number)
- PO_ITEM (Purchase Order Item)
- ENTRY_QNT (Quantity)
- MOVE_TYPE "101" is the Movement Type for the goods receipt for purchase order into warehouse/stores.
- MVT_IND is the Movement Indicator that specifies the type of document that constitutes the basis for the movement.
- STGE_LOC is the Storage Location for the goods.

### Call BAPI_GOODSMVT_CREATE

The following code sample calls the BAPI BAPI_GOODSMVT_CREATE. If a goods receipt is successfully created the function returns the material document number and the year.

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

public bool GoodsReceipt101(string PO_Number, string PO_ITEM, string Plant, decimal Quantity)
  {
     string rMessage;
     // Fill Export Structures for the FunctionModule
     RFCFunction func = connection.CreateFunction("BAPI_GOODSMVT_CREATE");
     func.Exports["GOODSMVT_HEADER"].ToStructure()["PSTNG_DATE"] = "20070921"; //Posting Date in the Document
     func.Exports["GOODSMVT_HEADER"].ToStructure()["PR_UNAME"] = "HUGO";       //UserName
     func.Exports["GOODSMVT_HEADER"].ToStructure()["HEADER_TXT"] = "XXX";      //HeaderText
     func.Exports["GOODSMVT_HEADER"].ToStructure()["DOC_DATE"] = "20070921";   //Document Date in Document

     func.Exports["GOODSMVT_CODE"].ToStructure()["GM_CODE"] = "01";

     // Fill Table Items 
     RFCStructure itemrow = func.Tables["GOODSMVT_ITEM"].Rows.Add();
     itemrow["PLANT"] = Plant;                //Plant
     itemrow["PO_NUMBER"] = PO_Number;        //Purchase Order Number
     itemrow["PO_ITEM"] = PO_ITEM;            //Item Number of Purchasing Document  
     itemrow["ENTRY_QNT"] = Quantity;         //Quantity in Unit of Entry
     itemrow["MOVE_TYPE"] = "101";            //Movement Type
     itemrow["MVT_IND"] = "B";                //Movement Indicator
     itemrow["STGE_LOC"] = "0001";            //Storage Location

     // Execute Function Module
     func.Execute();

     RFCFunction funcCommit = connection.CreateFunction("BAPI_TRANSACTION_COMMIT");
     funcCommit.Exports["WAIT"].ParamValue = "X";

     string MaterialDocument = func.Imports["MATERIALDOCUMENT"].ParamValue.ToString();
     string MatDocumentYear = func.Imports["MATDOCUMENTYEAR"].ParamValue.ToString();

     // Check Return-Table
     if (func.Tables["RETURN"].RowCount > 0)
      {
        rMessage = func.Tables["RETURN"].Rows[0, "MESSAGE"].ToString();
        funcCommit.Execute();
        return !func.Tables["RETURN"].Rows[0, "TYPE"].ToString().Equals("E");
      }
     else
      {
        funcCommit.Execute();
        rMessage = "";
        return true;
      }
 }

```

This sample shows how to obtain the components of a material BOM using the function module CSAP_MAT_BOM_READ.

Tip

To change a material BOM use the function modules CSAP_MAT_BOM_OPEN, CSAP_MAT_BOM_MAINTAIN and CSAP_MAT_BOM_CLOSE. To create a new BOM use the function modules CSAP_MAT_BOM_ALLOC_CREATE and CSAP_MAT_BOM_CREATE.

### Call CSAP_MAT_BOM_READ

The following sample code retrieves the components of a material BOM:

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

//Create function
RFCFunction func = connection.CreateFunction("CSAP_MAT_BOM_READ");
func.Exports["MATERIAL"].ParamValue = "100-100"; // Material
func.Exports["PLANT"].ParamValue = "1000"; // Plant
func.Exports["BOM_USAGE"].ParamValue = "1"; // Usage -> 1 = Production

//Execute
func.Execute();

// reading header
if (func.Tables["T_STKO"].Rows.Count > 0)
{
    // print out BOM header
    RFCStructure header = func.Tables["T_STKO"].Rows[0];
    Console.WriteLine("Base Quantity: " + header["BASE_QUAN"].ToString()

        + " " + header["BASE_UNIT"].ToString() + "\r\n");


    Console.WriteLine("Items:\r\n");

    // print out components, quantity, item text
    foreach (RFCStructure itemrow in func.Tables["T_STPO"].Rows)
    {
        Console.WriteLine(itemrow["COMPONENT"].ToString() + " " +
            itemrow["COMP_QTY"].ToString() + " " +
            itemrow["ITEM_TEXT1"].ToString());
    }

}
else
{
    Console.WriteLine("No BOM found");
}

Console.WriteLine("Ready");
Console.ReadLine();

```

The following sample shows how to use the *ReadTable* class to select data from the SAP table *MAKT* and how to process the ADO.NET result table object.

### About

This sample reads the material description texts of the SAP table *MAKT*.

- Read the columns *MATNR* (material number) and *MAKTX* (material text).
- Add a corresponding WHERE statement `SPRAS='EN'` to make sure only the English language texts are read (SPRAS is the column that contains the language keys).

### Read Table

```csharp
using System;
using System.Data;
using ERPConnect;
using ERPConnect.Utils;

// Set your ERPConnect license
LIC.SetLic("xxxx");

// Open the connection to SAP
using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

var table = new ReadTable(connection)
{
    WhereClause = "SPRAS = 'EN'",
    TableName = "MAKT",
    RowCount = 10
};

// Select columns to read
table.AddField("MATNR");
table.AddField("MAKTX");

// Specify a function module that is used to read the table
table.SetCustomFunctionName("RFC_READ_TABLE");

table.Run();

DataTable result = table.Result;
for (int i = 0; i < result.Rows.Count; i++)
{
    Console.WriteLine($"{result.Rows[i]["MATNR"]} {result.Rows[i]["MAKTX"]}");
}

Console.ReadLine();

```

Output:

```text
000000000000000023 Pawan Kalyan_08
000000000000000038 Test US colleagues upd4
000000000000000043 English Check 25_01
000000000000000058 Ventilation, complete build
000000000000000059 Filter Ereteam
000000000000000068 a portable 1 ton crane
000000000000000078 Component Full Repair Service ...
000000000000000088 AS-100 T-shirt XL
000000000000000089 AS-100 T-shirt
000000000000000098 PCB Subassembly

```

This sample shows how to create and read material master data in SAP using the BAPI BAPI_MATERIAL_SAVEDATA.

### About

A material object consists of multiple layers or so called views. Each view may exist multiple times, e.g., one plant view for plant 1000 and one for plant 2000 - both for the same material. To keep it simple, the provided sample code only shows how to handle the basic views. The other views work the same way.

The attributes of the basic view include:

- the Material Number
- the Old Material Number (which can come from a legacy system)
- the Industry Sector
- the Material Type (in this case HAWA - Trading Goods)
- the basic measure unit (mandatory).

### Write Material Master Data

The BAPI BAPI_MATERIAL_SAVEDATA can be used for both creating a new material or changing / extending an existing Material. Aside from the regular structure for submitting data (CLIENTDATA) there is an additional checkbox structure called CLIENTDATAX. Any data that is submitted in CLIENTDATA must be confirmed by an X value in the CLIENTDATAX structure.

The following sample code adds material attributes:

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

RFCFunction func = connection.CreateFunction("BAPI_MATERIAL_SAVEDATA");
RFCStructure header = func.Exports["HEADDATA"].ToStructure();
RFCStructure basedata = func.Exports["CLIENTDATA"].ToStructure();
RFCStructure basedatax = func.Exports["CLIENTDATAX"].ToStructure();

header["MATERIAL"] = "SAMPLE001";
header["IND_SECTOR"] = "M"; // M stands for Mechanical Engineering
header["MATL_TYPE"] = "HAWA"; // Type HAWA stands for Trading Goods
header["BASIC_VIEW"] = "X"; // Just an X to indicate, that we want to create the basic view

basedata["OLD_MAT_NO"] = "4711"; // Old material number
basedata["BASE_UOM"] = "MM"; // Base Unit MM for milimeter
basedatax["OLD_MAT_NO"] = "X"; // X indicates, that we want to set this value
basedatax["BASE_UOM"] = "X"; // X indicates, that we want to set this value

// Add a row to the description text tables
RFCStructure descriptionrow = func.Tables["MATERIALDESCRIPTION"].AddRow();
descriptionrow["LANGU"] = "EN"; // Language of the text
descriptionrow["MATL_DESC"] = "My New Material"; // Actual Text

func.Execute();

// process return message
Console.WriteLine(func.Imports["RETURN"].ToStructure()["MESSAGE"].ToString());

// And Commit everything
RFCFunction funccommit = connection.CreateFunction("BAPI_TRANSACTION_COMMIT");
funccommit.Execute();

Console.WriteLine("\r\nPress Enter to exit");
Console.ReadLine();

```

Output:

```text
The material SAMPLE001 has been created or extended

```

### Read Material Master Data

The following sample code reads the material attributes used in [Write Material Master Data](#write-material-master-data):

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

RFCFunction func = connection.CreateFunction("BAPI_MATERIAL_GET_DETAIL");
func.Exports["MATERIAL"].ParamValue = "SAMPLE001";
func.Execute();

// Read data
RFCStructure basedata = func.Imports["MATERIAL_GENERAL_DATA"].ToStructure();

Console.WriteLine("Description Text: " + basedata["MATL_DESC"].ToString());
Console.WriteLine("Old Material No: " + basedata["OLD_MAT_NO"].ToString());
Console.WriteLine("Industry Sector: " + basedata["IND_SECTOR"].ToString());
Console.WriteLine("Material Type: " + basedata["MATL_TYPE"].ToString());

Console.WriteLine("\r\nPress Enter to exit");
Console.ReadLine();

```

Output:

```text
Description Text: My New Material
Old Material No: 4711
Industry Sector: M
Material Type: HAWA

```

This section shows how to receive and process a *MATMAS* IDoc.\
To configure your SAP system to send *MATMAS* IDocs, see [Set Up a Test Environment for IDocs](../../documentation/idocs/prerequisites/#set-up-a-test-environment-for-idocs).

### About

The following sample receives a *MATMAS* IDoc that contains material descriptions. The material descriptions are written into the console window to check the contents of the IDoc.

The *MATMAS* IDoc is analyzed using the *E2MARAM005* segment. Within this segment, several *E2MAKTM001* child segments contain material descriptions.

Tip

You can use the transaction **WE60** to look up the structures of IDocs in SAP.

### Receive a MATMAS IDoc

Follow the steps below to receive a MATMAS IDoc:

1. Create an RFC Server object to accept calls from SAP, see [RFC Server](/erpconnect/documentation/rfc-server/create-rfc-functions/) for more information.
1. To receive IDocs with the *RFCServer* object, set the property `CanReceiveIdocs` to *true*.
1. When an IDoc is received by ERPConnect, the event `IncomingIdoc` is triggered and a reference to the *RFCServer* object and to the *IDoc* object is transferred.
1. Use the `IncomingIdoc` event to read the data buffer of the child segment *E2MAKTM001*. The description text is located at index 4 with a length of 40 in *E2MAKTM001*.
1. Write the description texts into the console window.
1. Run the program.
1. Send an IDoc in SAP and check the result.

```csharp
using System;
using ERPConnect;
using ERPConnect.Idocs;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var server = new RFCServer();
server.Logging = true;
server.GatewayHost = "hamlet";
server.GatewayService = "sapgw11";
server.ProgramID = "ERPTEST";
server.CanReceiveIdocs = true;

server.InternalException += (_, exception) =>
{
    Console.WriteLine($"Internal error: {exception.Message}");
};

server.IncomingIdoc += (_, idoc) =>
{
    Console.WriteLine("Received Idoc " + idoc.IDOCTYP);
    IdocSegment e1maram = idoc.Segments["E2MARAM005", 0];
    for (int i = 0; i < e1maram.ChildSegments.Count; i++)
    {
        if (e1maram.ChildSegments[i].SegmentName != "E2MAKTM001")
        {
            continue;
        }

        string text = e1maram.ChildSegments[i].ReadDataBuffer(4, 40);
        Console.WriteLine($"Material text found: {text}");
    }
};

server.Start();

Console.WriteLine("Server is running. Press any key to exit.");
Console.ReadLine();

server.Stop();

```

Output:

In this case, 5 *E2MAKTM001* segments were found so 5 texts are passed.

Note

If you do not want to read the data buffer with offset and length of the texts, you can load an XML Schema instead, see [Using XMLs for IDocs](../../documentation/idocs/idocs-schema-generator/).

This sample shows how to resend IDocs that are flagged with an error in the tRFC monitor.

### About

When IDocs are sent by SAP while the external system is not available, the IDocs / calls are flagged with error in SM58 (tRFC monitor). The calls are resent automatically after minutes depending on the system configuration.

### Force Resend of an IDoc

The following code sample looks up all errors in the table ARFCSSTATE of a given destination and then calls ARFC_RUN_NOWAIT to resend each call.

```csharp
using System;
using ERPConnect;
using ERPConnect.Utils;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

// Look up errors in table ARFCSSTATE
string date = DateTime.Now.AddDays(-1).ToString("yyyyMMdd");
var readTable = new ReadTable(connection)
{
    TableName = "ARFCSSTATE",
    WhereClause = $"ARFCDEST = 'DEST' AND ARFCDATUM >= '{date}' AND ARFCSTATE = 'CPICERR'"
};

readTable.Run();
if (readTable.Result.Rows.Count == 0)
{
    return;
}

// Execute ARFC_RUN_NOWAIT for each call
RFCFunction function = connection.CreateFunction("ARFC_RUN_NOWAIT");
function.Exports["WITH_ENQ"].ParamValue = "X";

for (int i = 0; i < readTable.Result.Rows.Count; i++)
{

    function.Tables["DATA"].Clear();
    function.Tables["STATES"].Clear();

    var row = readTable.Result.Rows[i];
    RFCStructure structure = function.Exports["TID"].ToStructure();
    structure["ARFCIPID"] = row["ARFCIPID"].ToString();
    structure["ARFCPID"] = row["ARFCPID"].ToString();
    structure["ARFCTIME"] = row["ARFCTIME"].ToString();
    structure["ARFCTIDCNT"] = row["ARFCTIDCNT"].ToString();

    function.Execute();
}

```

This sample shows how to reset the password of an SAP user using the BAPI BAPI_USER_CHANGE.

Tip

Resetting the password of SAP users can be useful in web portals with employee self services.

```csharp
using System;
using ERPConnect;
using ERPConnect.Utils;

// Set your ERPConnect license
LIC.SetLic("xxxx");

// Open the connection to SAP
using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

RFCFunction func = connection.CreateFunction("BAPI_USER_CHANGE");

Console.WriteLine("Please type user's name to reset password");
string UserName = Console.ReadLine();

func.Exports["USERNAME"].ParamValue = UserName;
func.Exports["PASSWORD"].ToStructure()["BAPIPWD"] = "init01";
func.Exports["PASSWORDX"].ToStructure()["BAPIPWD"] = "X";

func.Execute();

foreach(RFCStructure retrow in func.Tables["RETURN"].Rows)
    Console.WriteLine(retrow["MESSAGE"].ToString());

connection.Close();

Console.WriteLine("");
Console.WriteLine("Press enter to quit.");
Console.ReadLine();

```

### 

This sample shows how to check the availability of materials using the BAPI BAPI_MATERIAL_AVAILABILITY.

### About

BAPI_MATERIAL_AVAILABILITY shows the availability of a material. This availability provides the so-called ATP (stock quantity Available To Promise). BAPI_MATERIAL_AVAILABILITY requires at least three import parameters:

- the Plant (PLANT)
- the material number (MATERIAL)
- the unit (UNIT)

The Windows form for the BAPI BAPI_MATERIAL_AVAILABILITY contains the following elements:

- Three text boxes for import parameters: *txtPlant*, *txtMaterial* and *txtUnit*
- One Button: *btnGetQuantity*
- Two text boxes to display results: *txtStock* and *txtBAPIMessage*

### Call BAPI_MATERIAL_AVAILABILITY

Follow the steps below to call the BAPI API_MATERIAL_AVAILABILITY:

1. Connect to the SAP system using `R3Connection`.
1. Create an RFCFunction object using `CreateFunction`.
1. Assign the import parameters to the RFCFunction object.
1. Execute the function module using `Execute`.
1. If the BAPI returns an error, display the error message in the Windows form.\
   If no error occurred, the BAPI returns the parameter *AV_QTY_PLT* that contains the stock quantity in the given unit. Display the stock quantity in the Windows form.

```csharp
private void btnGetQuantity_Click(object sender, System.EventArgs e)
    {
        try
        {

            // Set your ERPConnect license
            LIC.SetLic("xxxx");

            // Open the connection to SAP
            using var connection = new R3Connection(
                host: "server.acme.org",
                systemNumber: 00,
                userName: "user",
                password: "passwd",
                language: "EN",
                client: "001")
            {
                Protocol = ClientProtocol.NWRFC,
            };

            connection.Open();

            // Create a Bapi object, fill parameters and execute
            RFCFunction f = connection.CreateFunction("BAPI_MATERIAL_AVAILABILITY");
            f.Exports["PLANT"].ParamValue = txtPlant.Text;
            f.Exports["MATERIAL"].ParamValue = txtMaterial.Text;
            f.Exports["UNIT"].ParamValue = txtUnit.Text;
            f.Execute();

            // Read the import structure RETURN to provide possible Messages
            RFCStructure BapiRet = f.Imports["RETURN"].ToStructure();
            txtBAPIMessage.Text = BapiRet["MESSAGE"].ToString();

            // Fill textbox with stock quantity
            txtStock.Text = f.Imports["AV_QTY_PLT"].ToString();
        }
        catch (ERPException e1)
        { MessageBox.Show(e1.Message); }
    }

```

Output:

- User enters a non-existing material number:
- User enters a valid material number:

This sample shows how to get texts from sales orders using the function module RFC_READ_TEXT.

### About

Sales orders can store different kinds of texts. The texts can be attached to the order header or the order items.\
Use the SAP standard function module RFC_READ_TEXT to retrieve the texts. RFC_READ_TEXT requires the following table input (table TEXT_LINES) for each text you want to fetch:

- TDOBJECT is the name of the text object, e.g., VBBK for sales order header or VBBP for sales order item.
- TBNAME is the key, e.g., in case of VBBP it is the sales order number and the Sales order item number.
- TDID is the text ID that defines the text type, e.g., 0001 for Material sales text.
- TDSPRAS is the language key.

### Look up Text Information in SAP

Follow the steps below to look up the correct text name, text object and text ID of a text in SAP:

1. Open the sales order.
1. Access item texts via **More > Goto > Item > Texts** or access header texts via **More > Goto > Header > Texts**.
1. Click **[Detail]** (magnifying glass icon). The text editor opens.
1. Navigate to **Goto > Header**. The window "Text Header" opens.

Tip

Use SAP transaction SE75 to look up all available text objects and the underlying text IDs.

### Call RFC_READ_TEXT

The following sample code calls RFC_READ_TEXT to query the item text of a sales order:

```csharp
using System;
using ERPConnect;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using (R3Connection con = new R3Connection())
{
    con.UserName = "SAPUser";
    con.Password = "SAPPassword";
    con.Language = "EN";
    con.Client = "800";
    con.Host = "sap-erp-as05.example.com";
    con.SystemNumber = 00;
    con.Protocol = ClientProtocol.NWRFC; //use ClientProtocol.RFC for classic RFC library

    con.Open();
}

// Create function object
RFCFunction func = con.CreateFunction("RFC_READ_TEXT");

// Add a new table row and fill it
RFCStructure newrow = func.Tables["TEXT_LINES"].Rows.Add();
newrow["TDOBJECT"] = "VBBP"; // Text object
newrow["TDNAME"] = "0000008221000010"; // Key
newrow["TDID"] = "0001"; // Text-ID
newrow["TDSPRAS"] = "EN"; // Language

//Execute the function          
func.Execute();

// Loop the table
foreach(RFCStructure row in func.Tables["TEXT_LINES"].Rows)
    Console.WriteLine(row["TDLINE"].ToString());

con.Close();

Console.WriteLine("");
Console.WriteLine("Press enter to quit.");
Console.ReadLine();

```

Output:

This sample shows how to get the history of a purchase order using BAPI_PO_GETDETAIL to find out which part of the quantity has already been received.

```csharp
public Decimal GetPODetail(string BestellNr, string BestellPos)
{

    RFCFunction func = connection.CreateFunction("BAPI_PO_GETDETAIL");
    func.Exports["PURCHASEORDER"].ParamValue = BestellNr;
    func.Exports["HISTORY"].ParamValue = "X";
    func.Exports["ITEMS"].ParamValue = " ";
    func.Execute();

     // Check Return-Table
    for(int i=0; i < func.Tables["PO_ITEM_HISTORY_TOTALS"].RowCount; i++)
    {
        if (func.Tables["PO_ITEM_HISTORY_TOTALS"].Rows[i,"PO_ITEM"].ToString().Equals(BestellPos))
        {
            return (decimal)func.Tables["PO_ITEM_HISTORY_TOTALS"].Rows[i,"DELIV_QTY"];
        }
    }
    return 0;
}

```

### 

This sample shows how to create, register and use RFC server functions that add numbers.

### Initialize RFC Server Functions

In the following sample applications a simple RFC server function is created that allows ABAP programs to add numbers.

```csharp
using ERPConnect; 

static void Main(string[] args) 
{ 
   RFCServer s = new RFCServer();
   s.GatewayHost = "sap-erp-as05.example.com"; 
   s.GatewayService = "sapgw11"; 
   s.ProgramID = "ERPTEST"; 

   s.IncomingCall+=new ERPConnect.RFCServer.OnIncomingCall(s_IncomingCall); 

   RFCServerFunction f = s.RegisteredFunctions.Add("Z_ADD"); 

   f.Imports.Add("NUMBER1",RFCTYPE.INT); 
   f.Imports.Add("NUMBER2",RFCTYPE.INT); 
   f.Exports.Add("RES",RFCTYPE.INT); 

   s.Start(); 

   Console.Write( "Server is running. Press any key to exit."); 
   Console.ReadLine(); 
}

```

Two input parameters (*NUMBER1* and *NUMBER2*) are added in a new function (*Z_ADD*). The result (*RES*) is passed back to the calling ABAP program, see [Call RFC Server Functions in ABAP](#call-rfc-server-functions-in-abap).

```csharp
using ERPConnect; 

static void Main(string[] args)
{

    static RFCServer s = new RFCServer();
    s.GatewayHost = "SAPServer";
    s.GatewayService = "sapgw00";
    s.ProgramID = "ERPConnectTEST";

    s.IncomingCall += new RFCServer.OnIncomingCall(s_IncomingCall);

    RFCServerFunction f = s.RegisteredFunctions.Add("Z_ADD_2");

    f.Exports.Add("RES", RFCTYPE.INT);

    RFCTable numbertable = f.Tables.Add("NUMBERS");
    numbertable.Columns.Add("NUMB", 10, 0, RFCTYPE.NUM); 

    s.Start();

    Console.WriteLine("Press Enter to quit");
    Console.ReadLine();
}

```

A table (*NUMBERS*) with a column (*NUMB*) is added to a table collection using `Add()`. The result (*RES*) is passed back to the calling ABAP program, see [Call RFC Server Functions in ABAP](#call-rfc-server-functions-in-abap).

```csharp
using ERPConnect; 

static void Main(string[] args)
{
    static RFCServer s = new RFCServer();
    s.GatewayHost = "hamlet";
    s.GatewayService = "sapgw11";
    s.ProgramID = "ERPTEST";

    s.IncomingCall += new RFCServer.OnIncomingCall(s_IncomingCall);

    RFCServerFunction f = s.RegisteredFunctions.Add("Z_ADD_3");

    RFCTableColumnCollection Columns = new RFCTableColumnCollection ();
    Columns.Add("NUMB", 10, 0, RFCTYPE.NUM);
    Columns.Add("NUMB2", 10, 0, RFCTYPE.NUM);

    f.Imports.Add("NUMBERS",Columns );
    f.Exports.Add("RES", RFCTYPE.INT);

    s.Start();

    Console.WriteLine("Press Enter to quit");
    Console.ReadLine();
}

```

A structure (*NUMBERS*) with 2 columns (*NUMB1* and *NUMB2*) is added to a column collection via `RFCTableColumnCollection()`. The result (*RES*) is passed back to the calling ABAP program, see [Call RFC Server Functions in ABAP](#call-rfc-server-functions-in-abap).

```csharp
using ERPConnect; 

static void Main(string[] args)
{

    static RFCServer s = new RFCServer();
    s.GatewayHost = "hamlet";
    s.GatewayService = "sapgw11";
    s.ProgramID = "ERPTEST";

    s.IncomingCall += new RFCServer.OnIncomingCall(s_IncomingCall);

    RFCServerFunction f = s.RegisteredFunctions.Add("Z_ADD_4");

    RFCTableColumnCollection Columns = new RFCTableColumnCollection ();
    Columns.Add("NUMB1", 10, 0, RFCTYPE.NUM);
    Columns.Add("NUMB2", 10, 0, RFCTYPE.NUM);

    RFCTableColumnCollection EXColumns = new RFCTableColumnCollection();
    EXColumns.Add("NUMB1", 10, 0, RFCTYPE.NUM);
    EXColumns.Add("NUMB2", 10, 0, RFCTYPE.NUM);

    f.Imports.Add("NUMBERS",Columns );
    f.Exports.Add("EXNUMBERS", EXColumns);

    s.Start();

    Console.WriteLine("Press Enter to quit");
    Console.ReadLine();
}

```

Two structures (*NUMBERS* and *EXNUMBERS*) with 2 columns (*NUMB1* and *NUMB2*) are added to column collections via `RFCTableColumnCollection()`. One structure (*NUMBERS*) is used for import and the other (*EXNUMBERS*) is passed back to the calling ABAP program, see [Call RFC Server Functions in ABAP](#call-rfc-server-functions-in-abap).

### Handle Incoming Calls

The following code shows how the *IncomingCall* event is handled:

```csharp
private static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction) 
{ 
   if (CalledFunction.FunctionName=="Z_ADD") 
   { 
      Int32 i1 = (Int32)CalledFunction.Imports["NUMBER1"].ParamValue; 
      Int32 i2 = (Int32)CalledFunction.Imports["NUMBER2"].ParamValue; 
      Int32 res = i1 + i2; 
      CalledFunction.Exports["RES"].ParamValue = res; 
      Console.WriteLine("Incoming Call"); 
   } 
   Else 
      throw new ERPConnect.ERPException("Function unknown"); 
}

```

The result is returned in the scalar export parameter *RES*.

```csharp
static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)
{
    Console.WriteLine("Incoming call!!");

    Int32 res = 0;

    foreach (RFCStructure row in CalledFunction.Tables["NUMBERS"].Rows)
        res += Convert.ToInt32(row["NUMB"]);

    CalledFunction.Exports["RES"].ParamValue = res;
}

```

Use the object hierarchy to iterate through the rows and add the values. The result is returned in the scalar export parameter *RES*.

```csharp
static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)
{
    Console.WriteLine("Incoming call!!");

    Int32 res = 0;
    RFCStructure numberstruc = CalledFunction.Imports["NUMBERS"].ToStructure();

    Int32 i1 = Convert.ToInt32(numberstruc["NUMB"].ToString());
    Int32 i2 = Convert.ToInt32(numberstruc["NUMB2"].ToString());

    res = i1 + i2;

    CalledFunction.Exports["RES"].ParamValue = res;
}

```

The result is returned in the scalar export parameter *RES*.

```csharp
static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)
{
    Console.WriteLine("Incoming call!!");

    RFCTableColumnCollection EXColumns = new RFCTableColumnCollection();
    EXColumns.Add("NUMB1", 10, 0, RFCTYPE.NUM);
    EXColumns.Add("NUMB2", 10, 0, RFCTYPE.NUM);

    CalledFunction.Exports.Add("EXNUMBER", EXColumns);
    RFCStructure numberstruc = CalledFunction.Imports["NUMBERS"].ToStructure();

    Int32 i1 = Convert.ToInt32(numberstruc["NUMB1"].ToString());
    Int32 i2 = Convert.ToInt32(numberstruc["NUMB2"].ToString());

    RFCStructure EXnumbers = CalledFunction.Exports["EXNUMBERS"].ToStructure();
    EXnumbers["NUMB1"] = i1 + 1;
    EXnumbers["NUMB2"] = i2 + 98;
}

```

The values from the IMPORT collection (*numberstruc*) are set in variables. Then different values are added to them and are written back to the EXPORT collection (*EXnumbers*).

The import parameters are passed by the calling SAP system.\
The export parameters are passed back to SAP.

### Call RFC Server Functions in ABAP

The following ABAP code is used to call the new function *Z_ADD* in the remote destination *ERPTEST*.

```abap
REPORT z_add_test 

DATA result TYPE i.
CALL FUNCTION 'Z_ADD' DESTINATION 'ERPTEST' 
   EXPORTING 
      number1 = 26 
      number2 = 25 
   IMPORTING 
      res = result. 
   WRITE: / 'Result: ', result.  

```

The two numbers 26 and 25 are passed, and the result 51 is passed back.

```abap
REPORT  zaddtest2 

DATA res TYPE i.
DATA numbs LIKE zaddstruc OCCURS 0 WITH HEADER LINE.

numbs-numb = '1'.
APPEND numbs.
numbs-numb = '2'.
APPEND numbs.
numbs-numb = '3'.
APPEND numbs.

CALL FUNCTION 'Z_ADD_2' DESTINATION 'ERPConnectTEST'
  IMPORTING
    res     = res
  TABLES
    numbers = numbs.

WRITE: / 'Result: ', res.

```

The two numbers 1, 2 and 3 are passed, and the result 6 is passed back.

```abap
REPORT  ZADDTEST3

DATA res TYPE i.
DATA numbs LIKE zaddstruc2.

numbs-numb1 = '1'.
numbs-numb2 = '2'.

CALL FUNCTION 'Z_ADD_3' DESTINATION 'ERPTEST'
  EXPORTING
    NUMBERS       = numbs
 IMPORTING
   RES           = res.

WRITE: / 'Result: ', res.

```

The two numbers 1 and 2 are passed, and the result 3 is passed back.

```abap
REPORT  ZADDTEST4                               .
                            .
DATA numbs LIKE zaddstruc2.
DATA exnumbers like zaddstruc2.

numbs-numb1 = '1'.
numbs-numb2 = '2'.

CALL FUNCTION 'Z_ADD_4' DESTINATION 'ERPTEST'
  EXPORTING
    NUMBERS       = numbs
   IMPORTING
   EXNUMBERS      = exnumbers.

WRITE: / 'First result is (added 1): ', exnumbers-numb1 .
WRITE: / 'Second result is (added 98): ', exnumbers-numb2 .

```

The two numbers 1 and 2 are passed, and the results 2 and 100 are passed back.

This sample shows how to create and send a MATMAS IDoc.

Note

This sample only creates basic data. To add more sophisticated data, look up the IDoc documentation via SAP transaction WE60 to find out more about the segments.

### Send a MATMAS IDocs

Follow the steps below to send a MATMAS IDoc:

1. Connect to the SAP system using `R3Connection`.

1. Use `CreateEmptyIdoc` to instance an empty IDoc.

1. Provide receiver and sender information.

1. Use \`CreateSegment create the needed segments.

1. Fill in the fields in the IDoc segments.

1. Send the IDoc using `Send`.

1. Run the program and check the result.

   ```csharp
   using System;
   using ERPConnect;

   // Set your ERPConnect license
   LIC.SetLic("xxxx");

   using var connection = new R3Connection(
       host: "server.acme.org",
       systemNumber: 00,
       userName: "user",
       password: "passwd",
       language: "EN",
       client: "001")
   {
       Protocol = ClientProtocol.NWRFC,
   };

   connection.Open(false);

   ERPConnect.Idocs.Idoc id = con.CreateEmptyIdoc("MATMAS01","");

   // Fill header data
   id.SNDPRN = "ERPCONNECT";
   id.SNDPOR = "ERPCONNECT";
   id.SNDPRT = "LS";

   id.RCVPRN = "ECW_00_800";
   id.RCVPRT = "LS";
   id.MESTYP = "MATMAS";

   // Fill basic data
   ERPConnect.Idocs.IdocSegment e1maram = id.CreateSegment("E1MARAM");
   e1maram.Fields["MATNR"].FieldValue = "DEV003"; // Material Number
   e1maram.Fields["MTART"].FieldValue = "FERT"; // Material Type
   e1maram.Fields["MATKL"].FieldValue = "001"; //  Material Group
   e1maram.Fields["MEINS"].FieldValue = "PCE"; // Base Unit of Measure
   e1maram.Fields["MBRSH"].FieldValue = "M"; // Industry sector
   e1maram.Fields["BRGEW"].FieldValue = "1"; // Gross Weight
   e1maram.Fields["NTGEW"].FieldValue = "1"; // Net Weight
   e1maram.Fields["GEWEI"].FieldValue = "KG"; // Weight Unit

   id.Segments.Add(e1maram);

   // Fill text data
   ERPConnect.Idocs.IdocSegment e1maktm = id.CreateSegment("E1MAKTM");
   e1maktm.Fields["SPRAS"].FieldValue = "E"; // Language Key
   e1maktm.Fields["MAKTX"].FieldValue = "my Article"; // Description Text

   e1maram.ChildSegments.Add(e1maktm);

   // Send IDoc
   id.Send();


   Console.WriteLine("Ready..");
   Console.ReadLine();

   ```

Output:

______________________________________________________________________

#### Related Links

- [Prerequisites for working with IDocs](../../documentation/idocs/prerequisites/)
- [Reveive an IDoc](../receive-an-idoc/)
- [Send an ORDER IDoc](../send-an-order-idoc/)
- [Send a STATUS IDoc](../send-a-simple-status-idoc/)

The example below shows how to send a STATUS IDoc.

### About

The *STATUS* message type is used to manipulate the status of another outbound IDoc e.g., when a subsystem receives an IDoc and acknowledges the receive with a status change. *STATUS* is a simple IDoc that contains only one data record.

Note

Make sure to configure your SAP system to receive IDocs.

### Send a STATUS IDoc

Follow the steps below to send a STATUS IDoc:

1. Connect to the SAP system using `R3Connection`.

1. Inquire the IDoc number of the IDoc to be manipulated and read the input.

1. Use `CreateIdoc` to instance a valid *IDoc* object. "SYSTAT01" is the IDoc type for the appropriate message type STATUS.

1. Provide receiver and sender information.

1. Fill in the following fields in segment *E1STATS*:

   - the new status code (*STATUS*)
   - date and time (*LOGDAT*, *LOGTIM*)
   - the number of the IDoc to be manipulated

1. Send the IDoc using the `Send`.

1. Run the program using and check the result.

   ```csharp
   using System;
   using ERPConnect;
   using ERPConnect.Utils;

   // Set your ERPConnect license
   LIC.SetLic("xxxx");

   using var connection = new R3Connection(
       host: "server.acme.org",
       systemNumber: 00,
       userName: "user",
       password: "passwd",
       language: "EN",
       client: "001")
   {
       Protocol = ClientProtocol.NWRFC,
   };

   connection.Open();

   // Inquire the IDoc number of the IDoc to be manipulated and read the input.    
   Console.WriteLine("Which IDoc number would you like to manipulate?");  
   string IdocNo = Console.ReadLine(); 

   Idoc i = connection.CreateIdoc("SYSTAT01","");

   // Fill Message Type 
   i.MESTYP = "STATUS"; 

   // Fill Information about IDoc Reciever 
   i.RCVPRN = "PT4_800"; // Partner number 
   i.RCVPRT = "LS"; // Partner type 

   // Fill information about IDoc sender 
   i.SNDPOR = "ERPCONNECT"; // Partner port 
   i.SNDPRN = "ERPCONNECT"; // Partner number 
   i.SNDPRT = "LS"; // Partner type

   // Fill the right fields in the segments 
   i.Segments["E1STATS",0].Fields["LOGDAT"].FieldValue = "20210901";
   i.Segments["E1STATS",0].Fields["LOGTIM"].FieldValue = "152301"; 
   i.Segments["E1STATS",0].Fields["STATUS"].FieldValue = "12"; 
   i.Segments["E1STATS",0].Fields["DOCNUM"].FieldValue = IdocNo; 

   i.Send(); 
   Console.WriteLine("IDoc sent"); 
   Console.ReadLine();

   ```

Output:

The status code of the manipulated IDoc increases from 3 (Data passed...) to 12 (Dispatch OK).

______________________________________________________________________

#### Related Links

- [Prerequisites for working with IDocs](../../documentation/idocs/prerequisites/)
- [Reveive an IDoc](../receive-an-idoc/)
- [Send an ORDER IDoc](../send-an-order-idoc/)
- [Send a MATMAS IDoc](../send-a-matmas-idoc/)

This sample shows to create a sales order in the SAP system using the IDoc type ORDERS01.

### About

An IDoc to create sales orders requires three different kinds of segment types:

- E1EDK01 is the main segment of an ORDERS01 IDoc. We leave it empty, but it must be provided by the calling program to pass the SAP IDoc syntax check.
- E1EDP01 is the segment for a single order position. The field MENGE contains the quantity. This segment can occur more than once.
- E1EDP19 represents an object definition and is a child of E1EDP01. In this case the object is a material number. The field QUALF is therefore set to "002" and the material number is written into the IDTNR field.

Tip

Use SAP transaction WE60 to look up the segment documentation of IDoc type ORDERS01.

### Prerequisites

Set up an RFC destination to enable calls from an SAP system to a subsystem, see [Documentation: IDocs Prerequisites](../../documentation/idocs/prerequisites/).\
If there is no partner profile found for an incoming IDoc, no order will be created.

### Send an ORDER IDoc

The Windows form for the sales order contains the following elements:

- Two text boxes for input: *txtMaterialNumber* (material number) and *txtQty* (quantity).

- One button: *button1*

  ```csharp
  using System;
  using ERPConnect;

  // Set your ERPConnect license
  LIC.SetLic("xxxx");

  using var connection = new R3Connection(
      host: "server.acme.org",
      systemNumber: 00,
      userName: "user",
      password: "passwd",
      language: "EN",
      client: "001")
  {
      Protocol = ClientProtocol.NWRFC,
  };

  connection.Open(false);

  Idoc idoc = connection.CreateEmptyIdoc("ORDERS01","");
  idoc.MESTYP = "ORDERS";

  // Fill information about idoc sender
  idoc.SNDPRN = "1172"; // Partner number
  idoc.SNDPRT = "KU"; // Partner type

  // Create document header segment
  IdocSegment e1edk01 = idoc.CreateSegment("E1EDK01");
  idoc.Segments.Add(e1edk01);

  // Create item segment
  IdocSegment e1edp01 = idoc.CreateSegment("E1EDP01");
  e1edp01.Fields["MENGE"].FieldValue = txtQty.Text;
  idoc.Segments.Add(e1edp01);

  // Create Object identification (material number in this case)
  IdocSegment e1edp19 = idoc.CreateSegment("E1EDP19");
  e1edp19.Fields["QUALF"].FieldValue = "002"; // 002 for material number
  e1edp19.Fields["IDTNR"].FieldValue = txtMaterialNumber.Text; // material number
  e1edp01.ChildSegments.Add(e1edp19);

  idoc.Send();
  this.lblInfo.Text = "Idoc sent";

  ```

Output:

______________________________________________________________________

#### Related Links

- [Prerequisites for working with IDocs](../../documentation/idocs/prerequisites/)
- [Reveive an IDoc](../receive-an-idoc/)
- [Send an MATMAS IDoc](../send-a-matmas-idoc/)
- [Send a STATUS IDoc](../send-a-simple-status-idoc/)

The following article gives an overview of all SAP S/4HANA systems supported by ERPConnect.

### Supported SAP S/4HANA Cloud Systems

The following table lists all available SAP S/4HANA cloud systems and their compatibility with ERPConnect.\
SAP S/4HANA Cloud Edition (Cloud ERP):

| | S/4HANA Public Cloud | S/4HANA Private Cloud | | --- | --- | --- | | **Compatible with ERPConnect:** | (with limitations) | | | **Limitations:** | Only Remote Function Modules (BAPIs) released via Communication Scenario are supported. | - |

### SAP S/4HANA On Premise Systems

The following table lists all available SAP S/4HANA on premise systems and their compatibility with ERPConnect.\
SAP S/4HANA AnyPremise (ERP in the Cloud):

| | S/4HANA Private Cloud Managed by SAP (HEC) | SAP HEC Customer Edition | S/4HANA AnyPremise | S/4HANA AnyPremise | | --- | --- | --- | --- | --- | | Additional Information: | On-Premises Edition | Runs on Customer Data Center | Public Cloud (AZURE/AWS/GCP) | called ERP in DC (Customer Data Center) | | Compatible with ERPConnect: | | | | |

This sample shows how to build an RFC server that supports transactional RFCs.

### About

How it works:

- An ABAP program sends two strings as export parameters to .NET.
- The strings are merged in .NET and inserted into an SQL server table.
- Within a tRFC context only export parameters and tables are sent to the RFC server.

For more information on how to create RFC functions, see [Documentation: RFC Server](../../documentation/rfc-server/).

Note

A transactional RFC call cannot receive results.

### Build an RFC Server in ERPConnect

The following code creates an RFC function Z_TRFC that reads two strings provided by an ABAP program:

```csharp
static RFCServer s = new RFCServer();
        static SqlConnection SQLConn = null;

static void Main(string[] args)
 {
  RFCServer s = new RFCServer();
  s.GatewayHost = "hamlet";
  s.GatewayService = "sapgw11";
  s.ProgramID = "ERPTEST";
  s.IncomingCall += new ERPConnect.RFCServer.OnIncomingCall(s_IncomingCall);
  s.TRFCCheckTID += new RFCServer.OnTRFCCheckTID(s_TRFCCheckTID);
  s.TRFCCommit += new RFCServer.OnTRFCCommit(s_TRFCCommit);
  s.TRFCConfirm += new RFCServer.OnTRFCConfirm(s_TRFCConfirm);
  s.TRFCRollback += new RFCServer.OnTRFCRollback(s_TRFCRollback);

  // Add and register function module
  RFCServerFunction f = s.RegisteredFunctions.Add("Z_TRFC");
  f.Imports.Add("STRING1", RFCTYPE.CHAR,10 );
  f.Imports.Add("STRING2", RFCTYPE.CHAR,10 );

  // start server
  s.Start();
  Console.Write("Server started. Please press any key to stop");
  Console.ReadLine();
  s.Stop();        
}

```

The following events are fired from the client within the server program:

- TRFCCheckTID
- IncomingCall
- TRFCCommit
- TRFCConfirm
- TRFCRollback

```csharp
static void s_TRFCCheckTID(RFCServer Sender, string TID, ref bool OK)
 {
  DataTable DtTID = GetDataTableBySQL("Select * from TransactionID 
  where TID = '" + TID + "' and XExecuted = 'False'");

  if (DtTID.Rows.Count > 0)
  {
    Console.WriteLine("TransactionalID " + TID + " is already executed");
    OK = false;
  }
  else
  {
    Console.WriteLine("TRFCCheckTID is OK");
    InsertUpdateBySQL("Insert TransactionID (TID) Values ('" + TID + "')");
    OK = true;
  }
 }

static void s_IncomingCall(RFCServer Sender, RFCServerFunction CalledFunction)
 {
  if (CalledFunction.FunctionName == "Z_TRFC")
  {
   string string1 = CalledFunction.Imports["STRING1"].ToString();
   string string2 = CalledFunction.Imports["STRING2"].ToString();
   string string3 = string1 +  " " + string2 ;

   InsertUpdateBySQL("Update TransactionID set Result = '" + string3 + "',
   XExecuted = 'True' where TID = '" + Sender.LastTID.ToString() + "'");

  }
  else
  throw new ERPConnect.ERPException("Function unknown");

 }

static void s_TRFCCommit(RFCServer Sender, string TID, ref bool OK)
 {
  Console.WriteLine("TransactionalID " + TID + " is committed");
  InsertUpdateBySQL("Update TransactionID set XCommit = 'True' where TID = '" + TID + "'");
  OK = false;
 }

static void s_TRFCConfirm(RFCServer Sender, string TID, ref bool OK)
 {
   Console.WriteLine("TransactionalID " + TID + " was confirmed");
   InsertUpdateBySQL("Update TransactionID set XConfirm = 'True' where TID = '" + TID + "'");
   OK = true;
 }

static void s_TRFCRollback(RFCServer Sender, string TID)
 {
   Console.WriteLine("TransactionalID " + TID + " is rolled back");
   InsertUpdateBySQL("Update TransactionID set XRolledBack = 'True' where TID = '" + TID + "'");
 }

```

### Function Call in ABAP

In the ABAP program the RFC function is called with the ABAP function *CALL FUNCTION “Z_TRFC” IN BACKGROUND TASK* for the asynchronous execution:

```text
REPORT  ZTESTTRFC                             .

CALL FUNCTION 'Z_TRFC' in background task DESTINATION 'ERPTEST'
  EXPORTING
    STRING1  = 'Hello'
    STRING2  = 'World'.

Commit Work.

WRITE: / 'strings sent'.

```

#### Workflow

- The ABAP statement is not executed immediately, but with the EXPORTING and/or TABLES content stored in a SAP database table.
- COMMIT WORK starts the processing of the function
- .NET fires the event TRFCCheckTID.
- The transaction ID in the depicted example is checked to see if it can be found in the [table on the SQL server](#table-on-the-sql-server).
- If the transaction ID is missing, or available but not executed yet, TRFCCheckTID returns *True*.
- The IncomingCall event is fired.
- If the processing is successful, the Commit event is fired, which confirms the execution.
- The Confirm event is fired to tidy up the transaction management.

With tRFC the remote function is processed, even if at the time of the call the remote partner is not available or the connection was lost.

Contrary to the synchronous RFC you can combine different functions for the remote processing into a logical unit or work (SAP-LUW). Rollback on the whole unit is then possible.

Tip

Tools for monitoring and administration are available with SAP transaction SM58.

### Table on the SQL Server

The depicted example requires a table on the SQL server (TransactionID). The table includes:

- 4 flags (XCommit, XConfirm, XRollback and XExecuted)
- a field with the transaction ID (TID)
- a field for the result (Result).

This sample shows how to use the data packaging mechanism of the *ReadTable* class.

### About

Table extractions have a limit of table rows that can be extracted at once (between 100,000 and 1,000,000 depending on the system). To avoid this limitation, the *ReadTable* class offers a packaging mechanism to extract a huge number of table rows.

Note

The SAP standard function module RFC_READ_TABLE is not suited for mass data extraction.

### Set Up Data Packaging

Follow the steps below to set up data packaging:

1. Set the *ReadTable* property `PackageSize` to a value greater than 0 to enable packaging.
1. Set the *ReadTable* property `RaiseIncomingPackageEvent` to *true* to raise an event `IncomingPackage` when a new data packet is processed.
1. Implement the `IncomingPackage` event to process each data packet. The packet is provided as a *Datatable* object.

```csharp
using System;
using System.Data;
using ERPConnect;
using ERPConnect.Utils;

// Set your ERPConnect license
LIC.SetLic("xxxx");

using (R3Connection con = new R3Connection())
{
    con.UserName = "SAPUser";
    con.Password = "SAPPassword";
    con.Language = "EN";
    con.Client = "800";
    con.Host = "sap-erp-as05.example.com";
    con.SystemNumber = 00;
    con.Protocol = ClientProtocol.NWRFC; //use ClientProtocol.RFC for classic RFC library

    con.Open();
}

var read = new ReadTable(con)
{
    PackageSize = 10000,
    RaiseIncomingPackageEvent = true,
    TableName = "MKPF"
};

read.IncomingPackage += OnIncomingPackage;

read.Run();

Console.WriteLine("Press enter to exit");
Console.ReadLine();
return;

static void OnIncomingPackage(ReadTable sender, DataTable packageResult)
{
    Console.WriteLine($"Processing data package with {packageResult.Rows.Count} rows");
}

```

Output:

```text
Processing data package with 10000 rows
Processing data package with 10000 rows
Processing data package with 10000 rows
Processing data package with 10000 rows
Processing data package with 10000 rows
Processing data package with 10000 rows
Processing data package with 10000 rows
Processing data package with 798 rows
Press enter to exit

```

This sample shows how to upload documents to the BDS (Business Document Service) using the function module BDS_BUSINESSDOCUMENT_CREA_TAB.

### About

Upload documents like excel sheets, word documents or images to the BDS by reading the file into a byte array and sending the array line after line to the function module BDS_BUSINESSDOCUMENT_CREA_TAB.

The depicted example uploads an excel sheet to the BDS. With small code changes to the document class, the document and MIME-type you can upload other document types.

Tip

You can look up the relevant document classes and types in SAP **IMG > Basis Services > Archive Link > Basic Customizing**.

In the sample code the class name (BKPF) represents the Accounting document type. You can find other classes in the Document Navigator (TA OAOR).\
The object key (100000000115642009) for BKPF is build from the company code, document number and the fiscal year.

### Upload an Excel File to the BDS

The following sample code uploads an excel sheet to the BDS:

```csharp
static void Main(string[] args)
        {

            try
            {
                string sPath = System.IO.Path.GetDirectoryName(@"C:\temp\Material.xlsx");
                string sFile = System.IO.Path.GetFileName(@"C:\temp\Material.xlsx");
                byte[] bytes;
                R3Connection con = new R3Connection("ptmalg", 05, "xxx", "xxx", "en", "800");
                con.Open(false);

                RFCFunction func = con.CreateFunction("BDS_BUSINESSDOCUMENT_CREA_TAB");

                RFCTable tbData = func.Tables["CONTENT"];
                RFCTable tbSig = func.Tables["SIGNATURE"];
                RFCTable tbComp = func.Tables["COMPONENTS"];

                func.Exports["CLASSNAME"].ParamValue = "BKPF";
                func.Exports["CLASSTYPE"].ParamValue = "BO";
                func.Exports["OBJECT_KEY"].ParamValue = "100000000115642009";
                func.Exports["BINARY_FLAG"].ParamValue = "X";

                bytes = System.IO.File.ReadAllBytes(@"C:\temp\Material.xlsx");

                RFCStructure Content = new RFCStructure();

                for (int offset = 0; offset < bytes.Length; offset += 1022)
                {
                    byte[] ExportBytes = new byte[1022]; // In VB change the value of this array to 1021
                    if (offset + 1022 > bytes.Length)
                        Array.Copy(bytes, offset, ExportBytes, 0, bytes.Length - offset);
                    else
                        Array.Copy(bytes, offset, ExportBytes, 0, 1022);
                    Content = tbData.AddRow();
                    Content["LINE"] = ExportBytes;
                }

                RFCStructure recComp = tbComp.AddRow();

                recComp["DOC_COUNT"] = 1;
                recComp["COMP_COUNT"] = 1;
                recComp["COMP_ID"] = sFile;
                recComp["MIMETYPE"] = "application/vnd.ms-excel";
                recComp["COMP_SIZE"] = bytes.Length;

                RFCStructure recSig = tbSig.AddRow();

                recSig["DOC_COUNT"] = 1;
                recSig["DOC_ID"] = "";
                recSig["DOC_VER_NO"] = 1;
                recSig["DOC_VAR_ID"] = 1;
                recSig["DOC_VAR_TG"] = "OR";
                recSig["COMP_COUNT"] = 1;
                recSig["PROP_NAME"] = "BDS_DOCUMENTTYPE";
                recSig["PROP_VALUE"] = "BDS_SHEET";

                recSig = tbSig.AddRow();

                recSig["DOC_COUNT"] = 1;
                recSig["DOC_ID"] = "";
                recSig["DOC_VER_NO"] = 1;
                recSig["DOC_VAR_ID"] = 1;
                recSig["DOC_VAR_TG"] = "OR";
                recSig["COMP_COUNT"] = 1;
                recSig["PROP_NAME"] = "BDS_DOCUMENTCLASS";
                recSig["PROP_VALUE"] = "XLS";

                recSig = tbSig.AddRow();

                recSig["DOC_COUNT"] = 1;
                recSig["DOC_ID"] = "";
                recSig["DOC_VER_NO"] = 1;
                recSig["DOC_VAR_ID"] = 1;
                recSig["DOC_VAR_TG"] = "OR";
                recSig["COMP_COUNT"] = 1;
                recSig["PROP_NAME"] = "DESCRIPTION";
                recSig["PROP_VALUE"] = sFile;

                recSig = tbSig.AddRow();

                recSig["DOC_COUNT"] = 1;
                recSig["DOC_ID"] = "";
                recSig["DOC_VER_NO"] = 1;
                recSig["DOC_VAR_ID"] = 1;
                recSig["DOC_VAR_TG"] = "OR";
                recSig["COMP_COUNT"] = 1;
                recSig["PROP_NAME"] = "LANGUAGE";
                recSig["PROP_VALUE"] = "EN"; 
                func.Execute();
                Console.WriteLine("Upload OK");
                Console.ReadLine();
            }
            catch (Exception e1)
            {
                Console.WriteLine(e1.Message);
                Console.ReadLine();
            }
        }

```

Output:

This sample shows how to use ERPConnect in Windows PowerShell to connect to SAP, extract data from a table (MAKT) and print it to the console.

### Prerequisites

- The librfc32.dll has to be registered: `regsvr32 c:\windows\system32\librfc32.dll`
- The PowerShell script uses the file extension \*\*\* .PS1

### Extract SAP Table Data in PowerShell

The following sample code calls connects to SAP and extracts the data of SAP table MAKT directly in Powershell or within the Powershell ISE:

Table MAKT

```powershell
$ErrorActionPreference = "Stop"

# If ERPConnect is registered in the GAC then use the following line
# [Reflection.Assembly]::LoadWithPartialName("ERPConnectStandard20.dll")

# If no is it also possible to load ERPConnect directly
[Reflection.Assembly]::LoadFile("C:\Program Files\ERPConnect\ERPConnectStandard20.dll")

# Set your ERPConnect license
[ERPConnect.LIC]::SetLic("xxxx")

$hostname = "server.acme.org"
$systemid = 00
$username = "user"
$password = "passwd"
$lang     = "EN"
$client   = "001"

$connection = new-object ERPConnect.R3Connection($hostname, $systemid, $username, $password, $lang, $client)

$connection.Protocol = [ERPConnect.ClientProtocol]::NWRFC
$connection.Open()

$readTable = new-object ERPConnect.Utils.ReadTable($connection)
$readTable.AddField("MATNR")
$readTable.AddField("MAKTX")
$readTable.AddField("SPRAS")
$readTable.RowCount = 10
$readTable.WhereClause = "SPRAS = 'EN'"
$readTable.TableName = "MAKT"

$readTable.Run()

$result = $readTable.Result

$result

```

Output:

This sample shows how to use the BAPI BAPI_BARCODE_SENDLIST to send a list of barcodes to SAP.\
BAPI_BARCODE_SENDLIST is part of the ArchiveLink BAPI.

### Call BAPI_BARCODE_SENDLIST

The following sample code sends a list of barcodes to SAP:

```csharp
using System;
using ERPConnect;
using ERPConnect.Utils;

// Set your ERPConnect license
LIC.SetLic("xxxx");

// Open the connection to SAP
using var connection = new R3Connection(
    host: "server.acme.org",
    systemNumber: 00,
    userName: "user",
    password: "passwd",
    language: "EN",
    client: "001")
{
    Protocol = ClientProtocol.NWRFC,
};

connection.Open();

// create the function
RFCFunction barfunc = connection.CreateFunction("BAPI_BARCODE_SENDLIST");

// Create and fill the frist row
RFCStructure row = barfunc.Tables["BARCODETABLE"].AddRow();
row["BARCODE"] = "4711"; 
row["CONTREP"] = "Content Repository"; 
row["DOCID"] = "0045935682"; 
row["ARDATE"] = "20070701"; 
row["DOCTYPE"] = "ZTA";

// Create and fill the second row
row = barfunc.Tables["BARCODETABLE"].AddRow();
row["BARCODE"] = "4713";
row["CONTREP"] = "Content Repository";
row["DOCID"] = "0045935683";
row["ARDATE"] = "20070702";
row["DOCTYPE"] = "ZTA"; 

// Execute the function
barfunc.Execute();

// process return structure
RFCStructure ret = barfunc.Imports["RETURN"].ToStructure();

if (ret["TYPE"].ToString().Equals(""))
    Console.WriteLine("No error reported");
else
    Console.WriteLine("Message: " + ret["MESSAGE"]);

Console.WriteLine("Press Enter to exit");
Console.ReadLine();

```
# API Reference

This section contains an auto-generated API documentation.

The ERPConnect API documentation is available in the Object Browser in Visual Studio.\
To view the Object Browser, navigate to the menu **View -> Object Browser**.

Note

To make the API documentation available in Visual Studio, the file *ERPConnectXX.xml* must be in the same folder as the *ERPConnectXX.dll*.

### Namespaces

[ERPConnect.BW](../erpconnect-bw/)

[ERPConnect.Idocs](../erpconnect-idocs/)

[ERPConnect.Linq](../erpconnect-linq/)

[ERPConnect.Queries](../erpconnect-queries/)

[ERPConnect.Utils](../erpconnect-utils/)

### Classes

[ABAPProgramException](ERPConnect.ABAPProgramException/)

[ABAPRuntimeException](ERPConnect.ABAPRuntimeException/)

[AbapLanguageKey](ERPConnect.AbapLanguageKey/)

[AbapSignedNumericCharacter](ERPConnect.AbapSignedNumericCharacter/)

[AbapString](ERPConnect.AbapString/)

[RFCServer.AuthorizingEventArgs](ERPConnect.RFCServer.AuthorizingEventArgs/)

[BapiReturn](ERPConnect.BapiReturn/)

[BapiReturnCollection](ERPConnect.BapiReturnCollection/)

[BusinessObjectMethod](ERPConnect.BusinessObjectMethod/)

[CommunicationException](ERPConnect.CommunicationException/)

[ERPException](ERPConnect.ERPException/)

[Global](ERPConnect.Global/)

[IncludeStructure](ERPConnect.IncludeStructure/)

[InvalidParameterException](ERPConnect.InvalidParameterException/)

[LIC](ERPConnect.LIC/)

[LoggedEventArgs](ERPConnect.LoggedEventArgs/)

[LogonException](ERPConnect.LogonException/)

[NoAuthorityException](ERPConnect.NoAuthorityException/)

[NotAuthorizedException](ERPConnect.NotAuthorizedException/)

[Obfuscation](ERPConnect.Obfuscation/)

[R3Connection](ERPConnect.R3Connection/)

[RFCAPI](ERPConnect.RFCAPI/)

[RFCCallbackFunction](ERPConnect.RFCCallbackFunction/)

[RFCFunction](ERPConnect.RFCFunction/)

[RFCParameter](ERPConnect.RFCParameter/)

[RFCParameterCollection](ERPConnect.RFCParameterCollection/)

[RFCServer](ERPConnect.RFCServer/)

[RFCServerException](ERPConnect.RFCServerException/)

[RFCServerFunction](ERPConnect.RFCServerFunction/)

[RFCServerFunctionCollection](ERPConnect.RFCServerFunctionCollection/)

[RFCStructure](ERPConnect.RFCStructure/)

[RFCStructureCollection](ERPConnect.RFCStructureCollection/)

[RFCTable](ERPConnect.RFCTable/)

[RFCTableCollection](ERPConnect.RFCTableCollection/)

[RFCTableColumn](ERPConnect.RFCTableColumn/)

[RFCTableColumnCollection](ERPConnect.RFCTableColumnCollection/)

[RfcLibraryException](ERPConnect.RfcLibraryException/)

[SAPEncodingInfo](ERPConnect.SAPEncodingInfo/)

[SNCSettings](ERPConnect.SNCSettings/)

[SlimXmlException](ERPConnect.SlimXmlException/)

[SlimXmlReader](ERPConnect.SlimXmlReader/)

[TlsSettings](ERPConnect.TlsSettings/)

### Structs

[AbapDate](ERPConnect.AbapDate/)

[AbapPackedNumber](ERPConnect.AbapPackedNumber/)

[AbapPostingPeriod](ERPConnect.AbapPostingPeriod/)

[AbapTimestamp](ERPConnect.AbapTimestamp/)

### Interfaces

[IR3Connection](ERPConnect.IR3Connection/)

### Enums

[AbapType](ERPConnect.AbapType/)

[ClientProtocol](ERPConnect.ClientProtocol/)

[ExternalIdType](ERPConnect.ExternalIdType/)

[RFCTYPE](ERPConnect.RFCTYPE/)

[SNCMechanism](ERPConnect.SNCMechanism/)

[SNCQualityOfProtection](ERPConnect.SNCQualityOfProtection/)

[SlimXmlReadResult](ERPConnect.SlimXmlReadResult/)

[TraceLevel](ERPConnect.TraceLevel/)

### Delegates

[RFCServer.OnAuthorizing](ERPConnect.RFCServer.OnAuthorizing/)

[RFCServer.OnIncomingCall](ERPConnect.RFCServer.OnIncomingCall/)

[RFCServer.OnIncomingIdoc](ERPConnect.RFCServer.OnIncomingIdoc/)

[RFCServer.OnInternalException](ERPConnect.RFCServer.OnInternalException/)

[RFCServer.OnTRFCCheckTID](ERPConnect.RFCServer.OnTRFCCheckTID/)

[RFCServer.OnTRFCCommit](ERPConnect.RFCServer.OnTRFCCommit/)

[RFCServer.OnTRFCConfirm](ERPConnect.RFCServer.OnTRFCConfirm/)

[RFCServer.OnTRFCRollback](ERPConnect.RFCServer.OnTRFCRollback/)

[RFCServer.OnUnknownIncomingFunction](ERPConnect.RFCServer.OnUnknownIncomingFunction/)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

The exception that is thrown when a program-driven exception is raised by the ABAP program / function module.

```csharp
public class ABAPProgramException : ERPException, ISerializable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Exception](https://learn.microsoft.com/dotnet/api/system.exception) ← [ERPException](../ERPConnect.ERPException/) ← [ABAPProgramException](./)

#### Derived

[NotAuthorizedException](../ERPConnect.NotAuthorizedException/)

#### Implements

[ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable)

#### Inherited Members

[ERPException.GetObjectData(SerializationInfo, StreamingContext)](../ERPConnect.ERPException/#ERPConnect_ERPException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_), [ERPException.ABAPException](../ERPConnect.ERPException/#ERPConnect_ERPException_ABAPException), [Exception.GetBaseException()](https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception), [Exception.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata), [Exception.ToString()](https://learn.microsoft.com/dotnet/api/system.exception.tostring), [Exception.GetType()](https://learn.microsoft.com/dotnet/api/system.exception.gettype), [Exception.TargetSite](https://learn.microsoft.com/dotnet/api/system.exception.targetsite), [Exception.StackTrace](https://learn.microsoft.com/dotnet/api/system.exception.stacktrace), [Exception.Message](https://learn.microsoft.com/dotnet/api/system.exception.message), [Exception.Data](https://learn.microsoft.com/dotnet/api/system.exception.data), [Exception.InnerException](https://learn.microsoft.com/dotnet/api/system.exception.innerexception), [Exception.HelpLink](https://learn.microsoft.com/dotnet/api/system.exception.helplink), [Exception.Source](https://learn.microsoft.com/dotnet/api/system.exception.source), [Exception.HResult](https://learn.microsoft.com/dotnet/api/system.exception.hresult), [Exception.SerializeObjectState](https://learn.microsoft.com/dotnet/api/system.exception.serializeobjectstate), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### ABAPProgramException(string, string)

```csharp
public ABAPProgramException(string message, string abapException)

```

#### Parameters

`message` [string](https://learn.microsoft.com/dotnet/api/system.string)

`abapException` [string](https://learn.microsoft.com/dotnet/api/system.string)

### ABAPProgramException(SerializationInfo, StreamingContext)

```csharp
protected ABAPProgramException(SerializationInfo info, StreamingContext context)

```

#### Parameters

`info` [SerializationInfo](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.serializationinfo)

`context` [StreamingContext](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.streamingcontext)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

The exception that is thrown when a system-driven exception is raised by the ABAP runtime environment.

```csharp
public class ABAPRuntimeException : ERPException, ISerializable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Exception](https://learn.microsoft.com/dotnet/api/system.exception) ← [ERPException](../ERPConnect.ERPException/) ← [ABAPRuntimeException](./)

#### Derived

[NoAuthorityException](../ERPConnect.NoAuthorityException/)

#### Implements

[ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable)

#### Inherited Members

[ERPException.GetObjectData(SerializationInfo, StreamingContext)](../ERPConnect.ERPException/#ERPConnect_ERPException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_), [ERPException.ABAPException](../ERPConnect.ERPException/#ERPConnect_ERPException_ABAPException), [Exception.GetBaseException()](https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception), [Exception.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata), [Exception.ToString()](https://learn.microsoft.com/dotnet/api/system.exception.tostring), [Exception.GetType()](https://learn.microsoft.com/dotnet/api/system.exception.gettype), [Exception.TargetSite](https://learn.microsoft.com/dotnet/api/system.exception.targetsite), [Exception.StackTrace](https://learn.microsoft.com/dotnet/api/system.exception.stacktrace), [Exception.Message](https://learn.microsoft.com/dotnet/api/system.exception.message), [Exception.Data](https://learn.microsoft.com/dotnet/api/system.exception.data), [Exception.InnerException](https://learn.microsoft.com/dotnet/api/system.exception.innerexception), [Exception.HelpLink](https://learn.microsoft.com/dotnet/api/system.exception.helplink), [Exception.Source](https://learn.microsoft.com/dotnet/api/system.exception.source), [Exception.HResult](https://learn.microsoft.com/dotnet/api/system.exception.hresult), [Exception.SerializeObjectState](https://learn.microsoft.com/dotnet/api/system.exception.serializeobjectstate), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### ABAPRuntimeException(SerializationInfo, StreamingContext)

```csharp
protected ABAPRuntimeException(SerializationInfo info, StreamingContext context)

```

#### Parameters

`info` [SerializationInfo](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.serializationinfo)

`context` [StreamingContext](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.streamingcontext)

## Properties

### Description

```csharp
public string Description { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### GetObjectData(SerializationInfo, StreamingContext)

```csharp
public override void GetObjectData(SerializationInfo info, StreamingContext context)

```

#### Parameters

`info` [SerializationInfo](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.serializationinfo)

`context` [StreamingContext](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.streamingcontext)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Represents an SAP date (ABAP type d, or DDIC type DATS).

```csharp
public readonly struct AbapDate

```

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Remarks

The Julian calendar is used from 0001-01-01 to 1582-10-04. The Gregorian calendar is used from 1582-10-15. The date range from 1582-10-05 to 1582-10-14 is invalid.

## Constructors

### AbapDate(in ushort, in byte, in byte)

Initializes a new instance of `ERPConnect.AbapDate` using a 1-based year, month and day.

```csharp
public AbapDate(in ushort year, in byte month, in byte day)

```

#### Parameters

`year` [ushort](https://learn.microsoft.com/dotnet/api/system.uint16)

`month` [byte](https://learn.microsoft.com/dotnet/api/system.byte)

`day` [byte](https://learn.microsoft.com/dotnet/api/system.byte)

#### Exceptions

[ArgumentOutOfRangeException](https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception)

The date is invalid. e.g. month 13 or 29.02. in any other year than a leap year.

## Properties

### Day

Gets the current day in currently represented `ERPConnect.AbapDate.Month` and `ERPConnect.AbapDate.Year`.

```csharp
public byte Day { get; }

```

#### Property Value

[byte](https://learn.microsoft.com/dotnet/api/system.byte)

### InitialValue

Gets a constant value representing the initial value (ABAP string 00000000).

```csharp
public static AbapDate InitialValue { get; }

```

#### Property Value

[AbapDate](./)

### MaxValue

Gets the maximum representable date (9999-12-31).

```csharp
public static AbapDate MaxValue { get; }

```

#### Property Value

[AbapDate](./)

### MinValue

Gets the minimum representable date (0001-01-01).

```csharp
public static AbapDate MinValue { get; }

```

#### Property Value

[AbapDate](./)

### Month

Gets the current month in currently represented `ERPConnect.AbapDate.Year`.

```csharp
public byte Month { get; }

```

#### Property Value

[byte](https://learn.microsoft.com/dotnet/api/system.byte)

### Year

Gets the currently represented year.

```csharp
public ushort Year { get; }

```

#### Property Value

[ushort](https://learn.microsoft.com/dotnet/api/system.uint16)

## Methods

### IsJulianDate(in ushort, in byte, in byte)

```csharp
public static bool IsJulianDate(in ushort year, in byte month, in byte day)

```

#### Parameters

`year` [ushort](https://learn.microsoft.com/dotnet/api/system.uint16)

`month` [byte](https://learn.microsoft.com/dotnet/api/system.byte)

`day` [byte](https://learn.microsoft.com/dotnet/api/system.byte)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### IsLeapYear(in ushort)

Checks whether this year is a leap year. Years before 1582 follow the Julian rule (every 4 years) for leap years, afterwards the Gregorian rule is used for leap years.

```csharp
public static bool IsLeapYear(in ushort year)

```

#### Parameters

`year` [ushort](https://learn.microsoft.com/dotnet/api/system.uint16)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Parse(in string)

```csharp
public static AbapDate Parse(in string abapString)

```

#### Parameters

`abapString` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[AbapDate](./)

### ToString()

```csharp
public override string ToString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### TryToDateTime(out DateTime?)

Tries to convert to the corresponding `System.DateTime` value.

```csharp
public bool TryToDateTime(out DateTime? value)

```

#### Parameters

`value` [DateTime](https://learn.microsoft.com/dotnet/api/system.datetime)?

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

#### Remarks

The ABAP values 0001-01-01 and 0001-01-02 cannot be converted. Assuming the proleptic Julian calendar, they would correspond to 0000-12-30 and 0000-12-31, which is out of range for `System.DateTime`.

### UtcToday()

Gets an `ERPConnect.AbapDate` representing the current date (UTC).

```csharp
public static AbapDate UtcToday()

```

#### Returns

[AbapDate](./)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Converts between 1-character proprietary SAP language keys and 2-character ISO 639-1 language keys (also used by SAP)

```csharp
public static class AbapLanguageKey

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [AbapLanguageKey](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Methods

### GetOneCharKey(string)

Returns a matching 1-character SAP language key

```csharp
public static string GetOneCharKey(string languageKey)

```

#### Parameters

`languageKey` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Exceptions

[ArgumentException](https://learn.microsoft.com/dotnet/api/system.argumentexception)

### OneToTwoCharKey(string)

Converts an 1-character SAP language key to a 2-character ISO 639-1 language key

```csharp
public static string OneToTwoCharKey(string oneCharKey)

```

#### Parameters

`oneCharKey` [string](https://learn.microsoft.com/dotnet/api/system.string)

1-character SAP language key

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

2-character ISO 639-1 language key

#### Exceptions

[ArgumentException](https://learn.microsoft.com/dotnet/api/system.argumentexception)

### TwoToOneCharKey(string)

Converts a 2-character ISO 639-1 language key to an 1-character SAP language key

```csharp
public static string TwoToOneCharKey(string twoCharKey)

```

#### Parameters

`twoCharKey` [string](https://learn.microsoft.com/dotnet/api/system.string)

2-character ISO 639-1 language key

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

1-character SAP language key

#### Exceptions

[ArgumentException](https://learn.microsoft.com/dotnet/api/system.argumentexception)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public readonly struct AbapPackedNumber

```

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Methods

### ToDecimal(in ArraySegment<byte>, in int)

Currently we don't support all values for defined total lengths > 28. We throw an exception, only if the actual value exceeds the supported range. We only consider fully supported decimal places for range checking (no optimization for ± 7.9228 * 10^28). If we would like to support more values, we would need to store the raw BCD bytes in a struct or class, like we do for the ERPConnect.UtcLong type, and convert to string. (unless a type that supports all values is added to .NET in the future)

```csharp
public static decimal ToDecimal(in ArraySegment<byte> bcdBytesSegment, in int decimalsCount)

```

#### Parameters

`bcdBytesSegment` [ArraySegment](https://learn.microsoft.com/dotnet/api/system.arraysegment-1)\<[byte](https://learn.microsoft.com/dotnet/api/system.byte)>

`decimalsCount` [int](https://learn.microsoft.com/dotnet/api/system.int32)

#### Returns

[decimal](https://learn.microsoft.com/dotnet/api/system.decimal)

### ToDecimal(in string)

```csharp
public static decimal ToDecimal(in string abapString)

```

#### Parameters

`abapString` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[decimal](https://learn.microsoft.com/dotnet/api/system.decimal)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Represents an SAP posting period (DDIC type ACCP).

```csharp
public readonly struct AbapPostingPeriod

```

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### AbapPostingPeriod(in ushort, in byte)

```csharp
public AbapPostingPeriod(in ushort year, in byte month)

```

#### Parameters

`year` [ushort](https://learn.microsoft.com/dotnet/api/system.uint16)

`month` [byte](https://learn.microsoft.com/dotnet/api/system.byte)

## Properties

### InitialValue

Gets a constant value representing the initial value (ABAP string 000000).

```csharp
public static AbapPostingPeriod InitialValue { get; }

```

#### Property Value

[AbapPostingPeriod](./)

### MaxValue

Gets the maximum representable posting period (9999-12).

```csharp
public static AbapPostingPeriod MaxValue { get; }

```

#### Property Value

[AbapPostingPeriod](./)

### MinValue

Gets the minimum representable posting period (0001-01).

```csharp
public static AbapPostingPeriod MinValue { get; }

```

#### Property Value

[AbapPostingPeriod](./)

### Month

```csharp
public byte Month { get; }

```

#### Property Value

[byte](https://learn.microsoft.com/dotnet/api/system.byte)

### Year

```csharp
public ushort Year { get; }

```

#### Property Value

[ushort](https://learn.microsoft.com/dotnet/api/system.uint16)

## Methods

### Parse(in string)

```csharp
public static AbapPostingPeriod Parse(in string abapString)

```

#### Parameters

`abapString` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[AbapPostingPeriod](./)

### ToDateTime()

```csharp
public DateTime? ToDateTime()

```

#### Returns

[DateTime](https://learn.microsoft.com/dotnet/api/system.datetime)?

### ToString()

```csharp
public override string ToString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### UtcToday()

Gets an `ERPConnect.AbapPostingPeriod` representing the current date (UTC).

```csharp
public static AbapPostingPeriod UtcToday()

```

#### Returns

[AbapPostingPeriod](./)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public static class AbapSignedNumericCharacter

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [AbapSignedNumericCharacter](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Methods

### ToDecimal(in string)

Parses the SNUMC conversion exit.

```csharp
public static decimal ToDecimal(in string abapString)

```

#### Parameters

`abapString` [string](https://learn.microsoft.com/dotnet/api/system.string)

The string representation of the SNUMC conversion exit

#### Returns

[decimal](https://learn.microsoft.com/dotnet/api/system.decimal)

The signed integer corresponding to the string representation

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Contains methods for parsing string representations of ABAP values

```csharp
public static class AbapString

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [AbapString](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Methods

### Parse(string, AbapType)

Parses an ABAP string representation

```csharp
public static object Parse(string value, AbapType abapType)

```

#### Parameters

`value` [string](https://learn.microsoft.com/dotnet/api/system.string)

The string representation

`abapType` [AbapType](../ERPConnect.AbapType/)

The ABAP type of the representation

#### Returns

[object](https://learn.microsoft.com/dotnet/api/system.object)

The typed value of the string representation

### ParseBoolean(string)

Parses a string representation of an ABAP boolean

```csharp
public static bool ParseBoolean(string value)

```

#### Parameters

`value` [string](https://learn.microsoft.com/dotnet/api/system.string)

The string representation of the ABAP boolean

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

The typed value of the string representation

### ParseByteSequence(string)

Parses a string representation of an ABAP byte sequence

```csharp
public static byte[] ParseByteSequence(string value)

```

#### Parameters

`value` [string](https://learn.microsoft.com/dotnet/api/system.string)

The string representation of the ABAP byte sequence

#### Returns

[byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

The typed value of the string representation

### ParseFloatingPoint(string)

Parses a string representation of an ABAP floating point value

```csharp
public static double ParseFloatingPoint(string value)

```

#### Parameters

`value` [string](https://learn.microsoft.com/dotnet/api/system.string)

The string representation of the ABAP floating point value

#### Returns

[double](https://learn.microsoft.com/dotnet/api/system.double)

The typed value of the string representation

### ParsePackedNumber(string)

Parses a string representation of an ABAP packed number

```csharp
public static decimal ParsePackedNumber(string value)

```

#### Parameters

`value` [string](https://learn.microsoft.com/dotnet/api/system.string)

The string representation of the ABAP packed number

#### Returns

[decimal](https://learn.microsoft.com/dotnet/api/system.decimal)

The typed value of the string representation

### ParseSignedInteger(string)

Parses a string representation of an ABAP signed integer

```csharp
public static long ParseSignedInteger(string value)

```

#### Parameters

`value` [string](https://learn.microsoft.com/dotnet/api/system.string)

The string representation of the ABAP signed integer

#### Returns

[long](https://learn.microsoft.com/dotnet/api/system.int64)

The typed value of the string representation

### ParseSignedNumericCharacter(in string)

Parses the SNUMC conversion exit.

```csharp
public static decimal ParseSignedNumericCharacter(in string value)

```

#### Parameters

`value` [string](https://learn.microsoft.com/dotnet/api/system.string)

The string representation of the SNUMC conversion exit

#### Returns

[decimal](https://learn.microsoft.com/dotnet/api/system.decimal)

The signed integer corresponding to the string representation

### ParseUnsignedInteger(string)

Parses a string representation of an ABAP unsigned integer

```csharp
public static int ParseUnsignedInteger(string value)

```

#### Parameters

`value` [string](https://learn.microsoft.com/dotnet/api/system.string)

The string representation of the ABAP unsigned integer

#### Returns

[int](https://learn.microsoft.com/dotnet/api/system.int32)

The typed value of the string representation

### ReplaceStar(string, string)

Replaces the star in string representation of SAP table values which are too big for RFC_READ_TABLE

```csharp
public static string ReplaceStar(string value, string starReplacement)

```

#### Parameters

`value` [string](https://learn.microsoft.com/dotnet/api/system.string)

The string representation of the SAP table value

`starReplacement` [string](https://learn.microsoft.com/dotnet/api/system.string)

The replacement for the star

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

The string representation where the star has been replaced

### TryParseTime(string, out TimeSpan)

Try to parse a string representation of an ABAP TIMS (time)

```csharp
public static bool TryParseTime(string value, out TimeSpan timeSpanVal)

```

#### Parameters

`value` [string](https://learn.microsoft.com/dotnet/api/system.string)

The string representation of the ABAP Time (TIMS)

`timeSpanVal` [TimeSpan](https://learn.microsoft.com/dotnet/api/system.timespan)

If the parser succeeds, this variable shall contain a TimeSpan between 00:00:00 and 23:59:59, otherwise TimeSpan.Zero

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

True if the parser succeeds, false otherwise

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Represents an SAP timestamp, similar to `System.DateTime`. Accuracy is ticks (100 nanoseconds). Both packed numbers (data elements TIMESTAMP, TIMESTAMPL) and native (type utclong) representations are supported.

```csharp
public readonly struct AbapTimestamp : IComparable, IComparable<AbapTimestamp>, IEquatable<AbapTimestamp>

```

#### Implements

[IComparable](https://learn.microsoft.com/dotnet/api/system.icomparable), [IComparable<AbapTimestamp>](https://learn.microsoft.com/dotnet/api/system.icomparable-1), [IEquatable<AbapTimestamp>](https://learn.microsoft.com/dotnet/api/system.iequatable-1)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Remarks

The Julian calendar is used from 0001-01-01 to 1582-10-04. The Gregorian calendar is used from 1582-10-15. The date range from 1582-10-05 to 1582-10-14 is invalid.

## Constructors

### AbapTimestamp(in ulong)

Initializes a new instance of `ERPConnect.AbapTimestamp` from total ticks (100 nanoseconds passed since 01.01.0001).

```csharp
public AbapTimestamp(in ulong ticks)

```

#### Parameters

`ticks` [ulong](https://learn.microsoft.com/dotnet/api/system.uint64)

#### Exceptions

[ArgumentOutOfRangeException](https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception)

Ticks are outside the valid min or max range

### AbapTimestamp(in ushort, in byte, in byte)

Initializes a new instance of `ERPConnect.AbapTimestamp` using a 1-based year, month and day.

```csharp
public AbapTimestamp(in ushort year, in byte month, in byte day)

```

#### Parameters

`year` [ushort](https://learn.microsoft.com/dotnet/api/system.uint16)

`month` [byte](https://learn.microsoft.com/dotnet/api/system.byte)

`day` [byte](https://learn.microsoft.com/dotnet/api/system.byte)

#### Exceptions

[ArgumentOutOfRangeException](https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception)

The date is invalid. e.g. month 13 or 29.02. in any other year than a leap year.

### AbapTimestamp(in ushort, in byte, in byte, in TimeSpan)

Initializes a new instance of `ERPConnect.AbapTimestamp` using a 1-based year, month, day and the time of day.

```csharp
public AbapTimestamp(in ushort year, in byte month, in byte day, in TimeSpan time)

```

#### Parameters

`year` [ushort](https://learn.microsoft.com/dotnet/api/system.uint16)

`month` [byte](https://learn.microsoft.com/dotnet/api/system.byte)

`day` [byte](https://learn.microsoft.com/dotnet/api/system.byte)

`time` [TimeSpan](https://learn.microsoft.com/dotnet/api/system.timespan)

#### Exceptions

[ArgumentOutOfRangeException](https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception)

The date is invalid. e.g. month 13 or 29.02. in any other year than a leap year.

## Properties

### Day

Gets the current day in currently represented `ERPConnect.AbapTimestamp.Month` and `ERPConnect.AbapTimestamp.Year`.

```csharp
public byte Day { get; }

```

#### Property Value

[byte](https://learn.microsoft.com/dotnet/api/system.byte)

### InitialValue

Gets a constant value representing the initial value (0 ticks).

```csharp
public static AbapTimestamp InitialValue { get; }

```

#### Property Value

[AbapTimestamp](./)

### MaxValue

Gets the maximum representable date and time. Currently this is 31.12.9999 23:59:59.99999999

```csharp
public static AbapTimestamp MaxValue { get; }

```

#### Property Value

[AbapTimestamp](./)

### MinValue

Gets the minimum representable date and time. Currently this is 01.01.0001 00:00:00.0000000

```csharp
public static AbapTimestamp MinValue { get; }

```

#### Property Value

[AbapTimestamp](./)

### Month

Gets the current month in currently represented `ERPConnect.AbapTimestamp.Year`.

```csharp
public byte Month { get; }

```

#### Property Value

[byte](https://learn.microsoft.com/dotnet/api/system.byte)

### Ticks

Gets the total ticks. A single tick represents 100 nanoseconds since 01.01.0001.

```csharp
public ulong Ticks { get; }

```

#### Property Value

[ulong](https://learn.microsoft.com/dotnet/api/system.uint64)

### Time

Gets the current time of day.

```csharp
public TimeSpan Time { get; }

```

#### Property Value

[TimeSpan](https://learn.microsoft.com/dotnet/api/system.timespan)

### Year

Gets the currently represented year.

```csharp
public ushort Year { get; }

```

#### Property Value

[ushort](https://learn.microsoft.com/dotnet/api/system.uint16)

## Methods

### AddDays(in int)

Adds (or subtracts) the specified amount of days from the currently represented date and time.

```csharp
public AbapTimestamp AddDays(in int days)

```

#### Parameters

`days` [int](https://learn.microsoft.com/dotnet/api/system.int32)

#### Returns

[AbapTimestamp](./)

#### Exceptions

[ArgumentOutOfRangeException](https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception)

The resulting `ERPConnect.AbapTimestamp` is out of range of a representable date

### AddHours(in int)

Adds (or subtracts) the specified amount of hours from the currently represented date and time.

```csharp
public AbapTimestamp AddHours(in int hours)

```

#### Parameters

`hours` [int](https://learn.microsoft.com/dotnet/api/system.int32)

#### Returns

[AbapTimestamp](./)

#### Exceptions

[ArgumentOutOfRangeException](https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception)

The resulting `ERPConnect.AbapTimestamp` is out of range of a representable date

### AddMinutes(in long)

Adds (or subtracts) the specified amount of minutes from the currently represented date and time.

```csharp
public AbapTimestamp AddMinutes(in long minutes)

```

#### Parameters

`minutes` [long](https://learn.microsoft.com/dotnet/api/system.int64)

#### Returns

[AbapTimestamp](./)

#### Exceptions

[ArgumentOutOfRangeException](https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception)

The resulting `ERPConnect.AbapTimestamp` is out of range of a representable date

### AddSeconds(in long)

Adds (or subtracts) the specified amount of seconds from the currently represented date and time.

```csharp
public AbapTimestamp AddSeconds(in long seconds)

```

#### Parameters

`seconds` [long](https://learn.microsoft.com/dotnet/api/system.int64)

#### Returns

[AbapTimestamp](./)

#### Exceptions

[ArgumentOutOfRangeException](https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception)

The resulting `ERPConnect.AbapTimestamp` is out of range of a representable date

### AddTicks(in long)

```csharp
public AbapTimestamp AddTicks(in long ticks)

```

#### Parameters

`ticks` [long](https://learn.microsoft.com/dotnet/api/system.int64)

#### Returns

[AbapTimestamp](./)

### CompareTo(AbapTimestamp)

```csharp
public int CompareTo(AbapTimestamp other)

```

#### Parameters

`other` [AbapTimestamp](./)

#### Returns

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### CompareTo(object)

```csharp
public int CompareTo(object obj)

```

#### Parameters

`obj` [object](https://learn.microsoft.com/dotnet/api/system.object)

#### Returns

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Equals(AbapTimestamp)

```csharp
public bool Equals(AbapTimestamp other)

```

#### Parameters

`other` [AbapTimestamp](./)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Equals(object)

```csharp
public override bool Equals(object obj)

```

#### Parameters

`obj` [object](https://learn.microsoft.com/dotnet/api/system.object)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### FromPackedNumber(in decimal)

```csharp
public static AbapTimestamp FromPackedNumber(in decimal packedNumber)

```

#### Parameters

`packedNumber` [decimal](https://learn.microsoft.com/dotnet/api/system.decimal)

#### Returns

[AbapTimestamp](./)

### GetHashCode()

```csharp
public override int GetHashCode()

```

#### Returns

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Parse(in string)

```csharp
public static AbapTimestamp Parse(in string abapString)

```

#### Parameters

`abapString` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[AbapTimestamp](./)

### ToString()

```csharp
public override string ToString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### TryToDateTime(out DateTime?)

Tries to convert to the corresponding `System.DateTime` value.

```csharp
public bool TryToDateTime(out DateTime? value)

```

#### Parameters

`value` [DateTime](https://learn.microsoft.com/dotnet/api/system.datetime)?

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

#### Remarks

The ABAP values 0001-01-01 and 0001-01-02 cannot be converted. Assuming the proleptic Julian calendar, they would correspond to 0000-12-30 and 0000-12-31, which is out of range for `System.DateTime`.

### UtcNow()

Gets an `ERPConnect.AbapTimestamp` representing the current date and time (UTC).

```csharp
public static AbapTimestamp UtcNow()

```

#### Returns

[AbapTimestamp](./)

### UtcToday()

Gets an `ERPConnect.AbapTimestamp` representing the current date (UTC).

```csharp
public static AbapTimestamp UtcToday()

```

#### Returns

[AbapTimestamp](./)

## Operators

### operator +(AbapTimestamp, AbapTimestamp)

```csharp
public static AbapTimestamp operator +(AbapTimestamp a, AbapTimestamp b)

```

#### Parameters

`a` [AbapTimestamp](./)

`b` [AbapTimestamp](./)

#### Returns

[AbapTimestamp](./)

### operator ==(AbapTimestamp, AbapTimestamp)

```csharp
public static bool operator ==(AbapTimestamp a, AbapTimestamp b)

```

#### Parameters

`a` [AbapTimestamp](./)

`b` [AbapTimestamp](./)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### operator >(AbapTimestamp, AbapTimestamp)

```csharp
public static bool operator >(AbapTimestamp a, AbapTimestamp b)

```

#### Parameters

`a` [AbapTimestamp](./)

`b` [AbapTimestamp](./)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### operator !=(AbapTimestamp, AbapTimestamp)

```csharp
public static bool operator !=(AbapTimestamp a, AbapTimestamp b)

```

#### Parameters

`a` [AbapTimestamp](./)

`b` [AbapTimestamp](./)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### operator \<(AbapTimestamp, AbapTimestamp)

```csharp
public static bool operator <(AbapTimestamp a, AbapTimestamp b)

```

#### Parameters

`a` [AbapTimestamp](./)

`b` [AbapTimestamp](./)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### operator -(AbapTimestamp, AbapTimestamp)

```csharp
public static AbapTimestamp operator -(AbapTimestamp a, AbapTimestamp b)

```

#### Parameters

`a` [AbapTimestamp](./)

`b` [AbapTimestamp](./)

#### Returns

[AbapTimestamp](./)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public enum AbapType

```

## Fields

`ByteSequence = 6`

Uninterpreted byte sequence, 1 - 65,535 bytes (ABAP type x, DDIC type RAW, LRAW)

`ByteSequenceOfVariableLength = 12`

Uninterpreted byte sequence, variable length (ABAP type xstring, DDIC type RAWSTRING)

`CharacterString = 7`

Character string, 1 - 65,535 characters (ABAP type c, DDIC type CHAR, LCHAR)

`CharacterStringOfVariableLength = 13`

Character string, variable length (ABAP type string, DDIC type STRING, SSTRING)

`Date = 9`

Date field (yyyyMMdd), 8 characters (ABAP type d, DDIC type DATS, DATN) Uses Julian calendar for dates before 1582-10-15.

`DecimalFloatingPoint16 = 14`

Decimal floating point number with 16 places (ABAP type decfloat16, DDIC type DECFLOAT16, DF16_DEC, DF16_RAW)

`DecimalFloatingPoint34 = 15`

Decimal floating point number with 34 places (ABAP type decfloat34, DDIC type DECFLOAT34, DF34_DEC, DF34_RAW)

`DecimalTimeStampSeconds = 17`

Timestamp accurate to seconds, stored as `ERPConnect.AbapType.PackedNumber`, 15 digits, 0 decimals (DDIC data element TIMESTAMP). Uses Julian calendar for dates before 1582-10-15.

`DecimalTimeStampTicks = 18`

Timestamp accurate to ticks (100 nanoseconds), stored as `ERPConnect.AbapType.PackedNumber`, 21 digits, 7 decimals (DDIC data element TIMESTAMPL). Uses Julian calendar for dates before 1582-10-15.

`EightByteInteger = 4`

Signed integer, 8 bytes (ABAP type int8, DDIC type INT8)

`FloatingPoint = 5`

Floating point number, 8 bytes (ABAP type f, DDIC type FLTP)

`FourByteInteger = 3`

Signed integer, 4 bytes (ABAP type i, DDIC type INT4)

`GeometryEwkb = 20`

Geometric data in extended well-known binary representation (DDIC type GEOM_EWKB).

`NativeTimeStamp = 16`

Timestamp accurate to ticks (100 nanoseconds), internally stored as `ERPConnect.AbapType.EightByteInteger` (ABAP type utclong, DDIC type UTCLONG). Uses Julian calendar for dates before 1582-10-15.

`None = 0`

ABAP type undefined

`NumericCharacterString = 8`

Character string (only digits), 1 - 65,535 characters (ABAP type n, DDIC type NUMC)

`OneByteInteger = 1`

Unsigned integer, 1 byte (ABAP type b, DDIC type INT1)

`PackedNumber = 11`

Packed number (decimal representation), 1 - 16 bytes (ABAP type p, DDIC type DEC, QUAN, CURR)

`PostingPeriod = 19`

Posting period (yyyyMM), 6 characters (ABAP type n, DDIC type ACCP).

`Time = 10`

Time field (HHmmss), 6 characters (ABAP type t, DDIC type TIMS, TIMN)

`TwoByteInteger = 2`

Signed integer, 2 bytes (ABAP type s, DDIC type INT2)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Represents a message returned from a BAPI.

```csharp
public class BapiReturn

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [BapiReturn](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### BapiReturn()

Initializes a new BapiReturn object.

```csharp
public BapiReturn()

```

## Properties

### Code

Message Code

```csharp
public string Code { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### LogMessageNumber

Number of system log message

```csharp
public string LogMessageNumber { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### LogNumber

Log Number

```csharp
public string LogNumber { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Message

Message

```csharp
public string Message { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MessageVariable1

Variable contained in the message string

```csharp
public string MessageVariable1 { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MessageVariable2

Variable contained in the message string

```csharp
public string MessageVariable2 { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MessageVariable3

Variable contained in the message string

```csharp
public string MessageVariable3 { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MessageVariable4

Variable contained in the message string

```csharp
public string MessageVariable4 { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Type

Message type (e.g. W for warning or E for error)

```csharp
public string Type { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Collection of BapiReturn objects

```csharp
public class BapiReturnCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [BapiReturnCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.OnSet(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onset), [CollectionBase.OnInsert(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsert), [CollectionBase.OnClear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclear), [CollectionBase.OnRemove(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremove), [CollectionBase.OnValidate(object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onvalidate), [CollectionBase.OnSetComplete(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onsetcomplete), [CollectionBase.OnInsertComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsertcomplete), [CollectionBase.OnClearComplete()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclearcomplete), [CollectionBase.OnRemoveComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremovecomplete), [CollectionBase.InnerList](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.innerlist), [CollectionBase.List](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.list), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### BapiReturnCollection()

```csharp
public BapiReturnCollection()

```

## Properties

### this[int]

Returns a BapiReturn object at a given position

```csharp
public virtual BapiReturn this[int Index] { get; }

```

#### Property Value

[BapiReturn](../ERPConnect.BapiReturn/)

## Methods

### Add(BapiReturn)

Adds a new BapiReturn object to the collection.

```csharp
public virtual void Add(BapiReturn NewBapiReturn)

```

#### Parameters

`NewBapiReturn` [BapiReturn](../ERPConnect.BapiReturn/)

The BapiReturn to be aded

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Represents a single method of a SAP business object. Please use R3Connection.CreateBapi to create a properly defined instance of this class.

```csharp
public sealed class BusinessObjectMethod : RFCFunction

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCFunction](../ERPConnect.RFCFunction/) ← [BusinessObjectMethod](./)

#### Inherited Members

[RFCFunction.Execute(string, string)](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_Execute_System_String_System_String_), [RFCFunction.Execute(string)](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_Execute_System_String_), [RFCFunction.Execute()](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_Execute), [RFCFunction.SaveToXML(XmlWriter)](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_SaveToXML_System_Xml_XmlWriter_), [RFCFunction.SaveToXML(string)](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_SaveToXML_System_String_), [RFCFunction.SaveToXML()](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_SaveToXML), [RFCFunction.LoadFromXML(XmlReader)](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_LoadFromXML_System_Xml_XmlReader_), [RFCFunction.LoadFromXML(string)](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_LoadFromXML_System_String_), [RFCFunction.LoadFromXML(TextReader)](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_LoadFromXML_System_IO_TextReader_), [RFCFunction.LoadFromXMLString(string)](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_LoadFromXMLString_System_String_), [RFCFunction.Name](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_Name), [RFCFunction.Connection](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_Connection), [RFCFunction.Imports](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_Imports), [RFCFunction.Exports](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_Exports), [RFCFunction.Changings](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_Changings), [RFCFunction.Tables](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_Tables), [RFCFunction.CallbackFunctions](../ERPConnect.RFCFunction/#ERPConnect_RFCFunction_CallbackFunctions), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### BusinessObjectMethod(R3Connection)

Initializes an BusinessObjectMethod

```csharp
public BusinessObjectMethod(R3Connection Connection)

```

#### Parameters

`Connection` [R3Connection](../ERPConnect.R3Connection/)

R3Connection object

## Properties

### MethodName

The Name of the Method of the SAP Business Object

```csharp
public string MethodName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### ObjectName

The Name of the SAP Business Object

```csharp
public string ObjectName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Returns

Rteurns a collection of BapiReturn object that represent all the BAPI return messages.

```csharp
public BapiReturnCollection Returns { get; set; }

```

#### Property Value

[BapiReturnCollection](../ERPConnect.BapiReturnCollection/)

## Methods

### CommitWork(bool)

Execute external Commit when using BAPIs (only few BAPIs need this function)

```csharp
public void CommitWork(bool Wait)

```

#### Parameters

`Wait` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Wait until Commit is processed

### Execute()

Exectutes the BAPI

```csharp
public override void Execute()

```

### RollbackWork()

Execute external Rollback when using BAPIs (only few BAPIs support this function)

```csharp
public void RollbackWork()

```

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Possible client protocols

```csharp
public enum ClientProtocol

```

## Fields

`NWRFC = 2`

RFC protocol, NetWeaver API

`RFC = 0`

RFC protocol, classic API

Obsolete and not supported by SAP any more. Please use `ERPConnect.ClientProtocol.NWRFC` instead.

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

The exception that is thrown when an error during network communication occurs.

```csharp
public sealed class CommunicationException : ERPException, ISerializable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Exception](https://learn.microsoft.com/dotnet/api/system.exception) ← [ERPException](../ERPConnect.ERPException/) ← [CommunicationException](./)

#### Implements

[ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable)

#### Inherited Members

[ERPException.GetObjectData(SerializationInfo, StreamingContext)](../ERPConnect.ERPException/#ERPConnect_ERPException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_), [ERPException.ABAPException](../ERPConnect.ERPException/#ERPConnect_ERPException_ABAPException), [Exception.GetBaseException()](https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception), [Exception.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata), [Exception.ToString()](https://learn.microsoft.com/dotnet/api/system.exception.tostring), [Exception.GetType()](https://learn.microsoft.com/dotnet/api/system.exception.gettype), [Exception.TargetSite](https://learn.microsoft.com/dotnet/api/system.exception.targetsite), [Exception.StackTrace](https://learn.microsoft.com/dotnet/api/system.exception.stacktrace), [Exception.Message](https://learn.microsoft.com/dotnet/api/system.exception.message), [Exception.Data](https://learn.microsoft.com/dotnet/api/system.exception.data), [Exception.InnerException](https://learn.microsoft.com/dotnet/api/system.exception.innerexception), [Exception.HelpLink](https://learn.microsoft.com/dotnet/api/system.exception.helplink), [Exception.Source](https://learn.microsoft.com/dotnet/api/system.exception.source), [Exception.HResult](https://learn.microsoft.com/dotnet/api/system.exception.hresult), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

ERPException class

```csharp
public class ERPException : Exception, ISerializable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Exception](https://learn.microsoft.com/dotnet/api/system.exception) ← [ERPException](./)

#### Derived

[ABAPProgramException](../ERPConnect.ABAPProgramException/), [ABAPRuntimeException](../ERPConnect.ABAPRuntimeException/), [CommunicationException](../ERPConnect.CommunicationException/), [InvalidParameterException](../ERPConnect.InvalidParameterException/), [LogonException](../ERPConnect.LogonException/), [RfcLibraryException](../ERPConnect.RfcLibraryException/)

#### Implements

[ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable)

#### Inherited Members

[Exception.GetBaseException()](https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception), [Exception.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata), [Exception.ToString()](https://learn.microsoft.com/dotnet/api/system.exception.tostring), [Exception.GetType()](https://learn.microsoft.com/dotnet/api/system.exception.gettype), [Exception.TargetSite](https://learn.microsoft.com/dotnet/api/system.exception.targetsite), [Exception.StackTrace](https://learn.microsoft.com/dotnet/api/system.exception.stacktrace), [Exception.Message](https://learn.microsoft.com/dotnet/api/system.exception.message), [Exception.Data](https://learn.microsoft.com/dotnet/api/system.exception.data), [Exception.InnerException](https://learn.microsoft.com/dotnet/api/system.exception.innerexception), [Exception.HelpLink](https://learn.microsoft.com/dotnet/api/system.exception.helplink), [Exception.Source](https://learn.microsoft.com/dotnet/api/system.exception.source), [Exception.HResult](https://learn.microsoft.com/dotnet/api/system.exception.hresult), [Exception.SerializeObjectState](https://learn.microsoft.com/dotnet/api/system.exception.serializeobjectstate), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### ERPException()

Initializes a new instance of the ERPException class.

```csharp
public ERPException()

```

### ERPException(string, string)

Initializes a new instance of the ERPException class.

```csharp
public ERPException(string message, string AbapException)

```

#### Parameters

`message` [string](https://learn.microsoft.com/dotnet/api/system.string)

Plain message

`AbapException` [string](https://learn.microsoft.com/dotnet/api/system.string)

ABAP exception (e.g. TABLE_NOT_FOUND)

### ERPException(string, Exception)

Initializes a new instance of the ERPException class.

```csharp
public ERPException(string message, Exception InnerException)

```

#### Parameters

`message` [string](https://learn.microsoft.com/dotnet/api/system.string)

Plain message

`InnerException` [Exception](https://learn.microsoft.com/dotnet/api/system.exception)

InnerException

### ERPException(string, Exception, string)

Initializes a new instance of the ERPException class.

```csharp
public ERPException(string message, Exception InnerException, string AbapException)

```

#### Parameters

`message` [string](https://learn.microsoft.com/dotnet/api/system.string)

Plain message

`InnerException` [Exception](https://learn.microsoft.com/dotnet/api/system.exception)

InnerException

`AbapException` [string](https://learn.microsoft.com/dotnet/api/system.string)

ABAP exception (e.g. TABLE_NOT_FOUND)

### ERPException(string)

Initializes a new instance of the ERPException class.

```csharp
public ERPException(string message)

```

#### Parameters

`message` [string](https://learn.microsoft.com/dotnet/api/system.string)

Exception message

### ERPException(SerializationInfo, StreamingContext)

```csharp
protected ERPException(SerializationInfo info, StreamingContext context)

```

#### Parameters

`info` [SerializationInfo](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.serializationinfo)

`context` [StreamingContext](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.streamingcontext)

## Properties

### ABAPException

The original ABAP Exception

```csharp
public string ABAPException { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### GetObjectData(SerializationInfo, StreamingContext)

```csharp
[SecurityCritical]
public override void GetObjectData(SerializationInfo info, StreamingContext context)

```

#### Parameters

`info` [SerializationInfo](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.serializationinfo)

`context` [StreamingContext](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.streamingcontext)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public enum ExternalIdType

```

## Fields

`Email = 1`

`Kerberos = 2`

`SapUserName = 6`

`Transient = 3`

`Unspecified = 0`

`WindowsName = 4`

`X509SubjectName = 5`

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public static class Global

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Global](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Methods

### SetCpicConnectTimeout(in ushort)

Sets the max. number of milliseconds for establishing the underlying CPIC connection. Must be set before any connections are opened an cannot be reset.

```csharp
public static void SetCpicConnectTimeout(in ushort milliseconds)

```

#### Parameters

`milliseconds` [ushort](https://learn.microsoft.com/dotnet/api/system.uint16)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Represents a connection to a SAP R/3 System

```csharp
public interface IR3Connection : IDisposable

```

#### Implements

[IDisposable](https://learn.microsoft.com/dotnet/api/system.idisposable)

## Properties

### Codepage

```csharp
string Codepage { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### IsOpen

Gets a value indicating whether this connection has been successfully established and has been valid when the last message has been received/sent.

```csharp
bool IsOpen { get; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### IsUnicode

Defines whether the partner system is a unicode system

```csharp
bool IsUnicode { get; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Language

Gets the logon language

```csharp
string Language { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Examples

DE od EN

### LogDir

Gets or sets the path to the directory in which trace files and XML log files are stored

```csharp
string LogDir { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Remarks

To enable logging, set the value to an existing directory to which the process has write access. To disable logging set the value to string.Empty. Property must be set before the connection is opened.

### Logging

Gets or sets a value which indicates whether detailed RFC tracing is enabled or not

```csharp
bool Logging { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

#### Remarks

Must be set before the connection is opened. `ERPConnect.IR3Connection.LogDir` must also be set.

### PartnerRelease

The release number of the SAP-BASIS of the system

```csharp
string PartnerRelease { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Examples

700

### Protocol

The `ERPConnect.ClientProtocol` used for the communication between client and SAP server

```csharp
ClientProtocol Protocol { get; }

```

#### Property Value

[ClientProtocol](../ERPConnect.ClientProtocol/)

### ReadTableFunctionName

Gets or sets the name of the function module that is used by `ERPConnect.Utils.ReadTable`. This will be overriden by `ERPConnect.Utils.ReadTable.SetCustomFunctionName(System.String)`.

```csharp
string ReadTableFunctionName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SAPEncodingInfo

Gets information about data encoding

```csharp
SAPEncodingInfo SAPEncodingInfo { get; }

```

#### Property Value

[SAPEncodingInfo](../ERPConnect.SAPEncodingInfo/)

### SNCSettings

Gets or sets the settings for SNC

```csharp
SNCSettings SNCSettings { get; set; }

```

#### Property Value

[SNCSettings](../ERPConnect.SNCSettings/)

#### See Also

[IR3Connection](./).[SNCSettings](./#ERPConnect_IR3Connection_SNCSettings)

## Methods

### Close()

Closes the client connection

```csharp
void Close()

```

### CreateFunction(string)

Creates a function by the name of the SAP function module

```csharp
RFCFunction CreateFunction(string name)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the function module

#### Returns

[RFCFunction](../ERPConnect.RFCFunction/)

A RFCFunction object

#### Examples

[C#]

```
static void Main(string[] args)
{
    R3Connection con = new R3Connection("hamlet",11,"theobald","pw","DE","800");
    con.Open(false);

    // Create a function object
    RFCFunction func = con.CreateFunction("RFC_CUSTOMER_GET");

    Console.WriteLine("Please enter customer number ...");
    Console.WriteLine("(and do not forget the leading zeros ...");

    // fill the export parameter
    StringBuilder CustomerNo =  new StringBuilder(Console.ReadLine());
    func.Exports["KUNNR"].ParamValue = CustomerNo.ToString();

    try 
    {
    func.Execute();
    }
    catch (ERPException e)
    {
        Console.WriteLine(e.Message);
        Console.ReadLine();
        return;
    }

    // Output the result of the function module
    Console.WriteLine("Name of customer:");
    Console.WriteLine(func.Tables["CUSTOMER_T"].Rows[0,"NAME1"]);
    Console.ReadLine();
}
```

[VB]

```
Sub Main()
    Dim con As New R3Connection("hamlet", 11, "theobald", "pw", "DE", "800")
    con.Open(False)

    ' Create a function object
    Dim func = con.CreateFunction("RFC_CUSTOMER_GET")

    Console.WriteLine("Please enter customer number ...")
    Console.WriteLine("(and do not forget the leading zeros ...")

    ' fill the export parameter
    Dim CustomerNo As New StringBuilder(Console.ReadLine())
    func.Exports("KUNNR").ParamValue = CustomerNo.ToString()

    Try
        func.Execute()
    Catch e As ERPException
        Console.WriteLine(e.Message)
        Console.ReadLine()
        Return
    End Try

    ' Output the result of the function module
    Console.WriteLine("Name of customer:")
    Console.WriteLine(func.Tables("CUSTOMER_T").Rows(0, "NAME1"))
    Console.ReadLine()
End Sub
```

#### Remarks

The following example demonstrates, how to logon, to create a function object and to execute the function

### Execute(RFCFunction)

Assigns this connection to the supplied `ERPConnect.RFCFunction` and then executes the function.

```csharp
void Execute(RFCFunction function)

```

#### Parameters

`function` [RFCFunction](../ERPConnect.RFCFunction/)

### Open()

Opens a connection to an SAP R/3 system.

```csharp
void Open()

```

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Represents an include structure within a structure

```csharp
public sealed class IncludeStructure

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [IncludeStructure](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### IncludeStructure(int, string, int)

Initializes a new instance of the IncludeStructure class

```csharp
public IncludeStructure(int firstElementIndex, string structureName, int elementsCount)

```

#### Parameters

`firstElementIndex` [int](https://learn.microsoft.com/dotnet/api/system.int32)

First element of the include structure

`structureName` [string](https://learn.microsoft.com/dotnet/api/system.string)

DDIC name of the include structure

`elementsCount` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Number of elements of the include structure

## Properties

### ElementsCount

Gets the number of elements of the include structure

```csharp
public int ElementsCount { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### FirstElementIndex

Gets the index of the first element of the include structure

```csharp
public int FirstElementIndex { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### LastElementIndex

Gets the index of the last element of the include structure

```csharp
public int LastElementIndex { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### StructureName

Gets the DDIC name of the include structure

```csharp
public string StructureName { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

The exception that is thrown when a parameter has an invalid value (e. g. in connection string).

```csharp
public sealed class InvalidParameterException : ERPException, ISerializable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Exception](https://learn.microsoft.com/dotnet/api/system.exception) ← [ERPException](../ERPConnect.ERPException/) ← [InvalidParameterException](./)

#### Implements

[ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable)

#### Inherited Members

[ERPException.GetObjectData(SerializationInfo, StreamingContext)](../ERPConnect.ERPException/#ERPConnect_ERPException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_), [ERPException.ABAPException](../ERPConnect.ERPException/#ERPConnect_ERPException_ABAPException), [Exception.GetBaseException()](https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception), [Exception.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata), [Exception.ToString()](https://learn.microsoft.com/dotnet/api/system.exception.tostring), [Exception.GetType()](https://learn.microsoft.com/dotnet/api/system.exception.gettype), [Exception.TargetSite](https://learn.microsoft.com/dotnet/api/system.exception.targetsite), [Exception.StackTrace](https://learn.microsoft.com/dotnet/api/system.exception.stacktrace), [Exception.Message](https://learn.microsoft.com/dotnet/api/system.exception.message), [Exception.Data](https://learn.microsoft.com/dotnet/api/system.exception.data), [Exception.InnerException](https://learn.microsoft.com/dotnet/api/system.exception.innerexception), [Exception.HelpLink](https://learn.microsoft.com/dotnet/api/system.exception.helplink), [Exception.Source](https://learn.microsoft.com/dotnet/api/system.exception.source), [Exception.HResult](https://learn.microsoft.com/dotnet/api/system.exception.hresult), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

This class is for licensing purpose

```csharp
public static class LIC

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [LIC](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### ExpirationDate

Date on which the license key expires

```csharp
public static DateTime ExpirationDate { get; }

```

#### Property Value

[DateTime](https://learn.microsoft.com/dotnet/api/system.datetime)

## Methods

### IsValid()

Checks if the current license key is valid.

```csharp
public static bool IsValid()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

#### Exceptions

[ERPException](../ERPConnect.ERPException/)

Thrown, if current license is not valid.

### SetLic(string)

Sets the current licence key

```csharp
public static void SetLic(string key)

```

#### Parameters

`key` [string](https://learn.microsoft.com/dotnet/api/system.string)

Licence key

#### Remarks

Use this Method to set a valid licence key before opening a server or client connection to SAP

```
ERPConnect.LIC.SetLic("XXXXXXXXXX");
```

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class LoggedEventArgs : EventArgs

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [EventArgs](https://learn.microsoft.com/dotnet/api/system.eventargs) ← [LoggedEventArgs](./)

#### Inherited Members

[EventArgs.Empty](https://learn.microsoft.com/dotnet/api/system.eventargs.empty), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### Message

```csharp
public string Message { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

The exception that is thrown when an error during SAP user logon occurs.

```csharp
public sealed class LogonException : ERPException, ISerializable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Exception](https://learn.microsoft.com/dotnet/api/system.exception) ← [ERPException](../ERPConnect.ERPException/) ← [LogonException](./)

#### Implements

[ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable)

#### Inherited Members

[ERPException.GetObjectData(SerializationInfo, StreamingContext)](../ERPConnect.ERPException/#ERPConnect_ERPException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_), [ERPException.ABAPException](../ERPConnect.ERPException/#ERPConnect_ERPException_ABAPException), [Exception.GetBaseException()](https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception), [Exception.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata), [Exception.ToString()](https://learn.microsoft.com/dotnet/api/system.exception.tostring), [Exception.GetType()](https://learn.microsoft.com/dotnet/api/system.exception.gettype), [Exception.TargetSite](https://learn.microsoft.com/dotnet/api/system.exception.targetsite), [Exception.StackTrace](https://learn.microsoft.com/dotnet/api/system.exception.stacktrace), [Exception.Message](https://learn.microsoft.com/dotnet/api/system.exception.message), [Exception.Data](https://learn.microsoft.com/dotnet/api/system.exception.data), [Exception.InnerException](https://learn.microsoft.com/dotnet/api/system.exception.innerexception), [Exception.HelpLink](https://learn.microsoft.com/dotnet/api/system.exception.helplink), [Exception.Source](https://learn.microsoft.com/dotnet/api/system.exception.source), [Exception.HResult](https://learn.microsoft.com/dotnet/api/system.exception.hresult), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Methods

### GetObjectData(SerializationInfo, StreamingContext)

```csharp
public override void GetObjectData(SerializationInfo info, StreamingContext context)

```

#### Parameters

`info` [SerializationInfo](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.serializationinfo)

`context` [StreamingContext](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.streamingcontext)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

The exception that is thrown when a system-driven exception is raised by the ABAP runtime environment, which is related to authorization problems.

```csharp
public sealed class NoAuthorityException : ABAPRuntimeException, ISerializable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Exception](https://learn.microsoft.com/dotnet/api/system.exception) ← [ERPException](../ERPConnect.ERPException/) ← [ABAPRuntimeException](../ERPConnect.ABAPRuntimeException/) ← [NoAuthorityException](./)

#### Implements

[ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable)

#### Inherited Members

[ABAPRuntimeException.GetObjectData(SerializationInfo, StreamingContext)](../ERPConnect.ABAPRuntimeException/#ERPConnect_ABAPRuntimeException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_), [ABAPRuntimeException.Description](../ERPConnect.ABAPRuntimeException/#ERPConnect_ABAPRuntimeException_Description), [ERPException.GetObjectData(SerializationInfo, StreamingContext)](../ERPConnect.ERPException/#ERPConnect_ERPException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_), [ERPException.ABAPException](../ERPConnect.ERPException/#ERPConnect_ERPException_ABAPException), [Exception.GetBaseException()](https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception), [Exception.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata), [Exception.ToString()](https://learn.microsoft.com/dotnet/api/system.exception.tostring), [Exception.GetType()](https://learn.microsoft.com/dotnet/api/system.exception.gettype), [Exception.TargetSite](https://learn.microsoft.com/dotnet/api/system.exception.targetsite), [Exception.StackTrace](https://learn.microsoft.com/dotnet/api/system.exception.stacktrace), [Exception.Message](https://learn.microsoft.com/dotnet/api/system.exception.message), [Exception.Data](https://learn.microsoft.com/dotnet/api/system.exception.data), [Exception.InnerException](https://learn.microsoft.com/dotnet/api/system.exception.innerexception), [Exception.HelpLink](https://learn.microsoft.com/dotnet/api/system.exception.helplink), [Exception.Source](https://learn.microsoft.com/dotnet/api/system.exception.source), [Exception.HResult](https://learn.microsoft.com/dotnet/api/system.exception.hresult), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

The exception that is thrown when a program-driven exception is raised by the ABAP program / function module, which is related to authorization problems.

```csharp
public sealed class NotAuthorizedException : ABAPProgramException, ISerializable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Exception](https://learn.microsoft.com/dotnet/api/system.exception) ← [ERPException](../ERPConnect.ERPException/) ← [ABAPProgramException](../ERPConnect.ABAPProgramException/) ← [NotAuthorizedException](./)

#### Implements

[ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable)

#### Inherited Members

[ERPException.GetObjectData(SerializationInfo, StreamingContext)](../ERPConnect.ERPException/#ERPConnect_ERPException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_), [ERPException.ABAPException](../ERPConnect.ERPException/#ERPConnect_ERPException_ABAPException), [Exception.GetBaseException()](https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception), [Exception.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata), [Exception.ToString()](https://learn.microsoft.com/dotnet/api/system.exception.tostring), [Exception.GetType()](https://learn.microsoft.com/dotnet/api/system.exception.gettype), [Exception.TargetSite](https://learn.microsoft.com/dotnet/api/system.exception.targetsite), [Exception.StackTrace](https://learn.microsoft.com/dotnet/api/system.exception.stacktrace), [Exception.Message](https://learn.microsoft.com/dotnet/api/system.exception.message), [Exception.Data](https://learn.microsoft.com/dotnet/api/system.exception.data), [Exception.InnerException](https://learn.microsoft.com/dotnet/api/system.exception.innerexception), [Exception.HelpLink](https://learn.microsoft.com/dotnet/api/system.exception.helplink), [Exception.Source](https://learn.microsoft.com/dotnet/api/system.exception.source), [Exception.HResult](https://learn.microsoft.com/dotnet/api/system.exception.hresult), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### NotAuthorizedException(string, ABAPProgramException)

```csharp
public NotAuthorizedException(string message, ABAPProgramException innerException)

```

#### Parameters

`message` [string](https://learn.microsoft.com/dotnet/api/system.string)

`innerException` [ABAPProgramException](../ERPConnect.ABAPProgramException/)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Obfuscation for storing sensitive data This is no encryption. It only protects data from being read directly by humans.

```csharp
public static class Obfuscation

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Obfuscation](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Methods

### Deobfuscate(byte[], byte[], byte[])

```csharp
public static byte[] Deobfuscate(byte[] obfuscatedData, byte[] key, byte[] iv)

```

#### Parameters

`obfuscatedData` [byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

`key` [byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

`iv` [byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

#### Returns

[byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

### Deobfuscate(string, Encoding, byte[], byte[])

```csharp
public static string Deobfuscate(string obfuscatedText, Encoding encoding, byte[] key, byte[] iv)

```

#### Parameters

`obfuscatedText` [string](https://learn.microsoft.com/dotnet/api/system.string)

`encoding` [Encoding](https://learn.microsoft.com/dotnet/api/system.text.encoding)

`key` [byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

`iv` [byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Deobfuscate(string)

```csharp
public static string Deobfuscate(string obfuscatedText)

```

#### Parameters

`obfuscatedText` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### DeobfuscateMore(string)

```csharp
[Obsolete("Only for backward compatibilty, please use Deobfuscate(string obfuscatedText) instead")]
public static string DeobfuscateMore(string text)

```

#### Parameters

`text` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Obfuscate(byte[], byte[], byte[])

```csharp
public static byte[] Obfuscate(byte[] data, byte[] key, byte[] iv)

```

#### Parameters

`data` [byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

`key` [byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

`iv` [byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

#### Returns

[byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

### Obfuscate(string, Encoding, byte[], byte[])

```csharp
public static string Obfuscate(string cleartext, Encoding encoding, byte[] key, byte[] iv)

```

#### Parameters

`cleartext` [string](https://learn.microsoft.com/dotnet/api/system.string)

`encoding` [Encoding](https://learn.microsoft.com/dotnet/api/system.text.encoding)

`key` [byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

`iv` [byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Obfuscate(string)

```csharp
public static string Obfuscate(string cleartext)

```

#### Parameters

`cleartext` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### ObfuscateMore(string)

```csharp
[Obsolete("Only for backward compatibilty, please use Obfuscate(string cleartext) instead")]
public static string ObfuscateMore(string cleartext)

```

#### Parameters

`cleartext` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

R3Connection represents a connection to a SAP R/3 System

```csharp
public class R3Connection : IR3Connection, IDisposable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [R3Connection](./)

#### Implements

[IR3Connection](../ERPConnect.IR3Connection/), [IDisposable](https://learn.microsoft.com/dotnet/api/system.idisposable)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### R3Connection()

Initializes a new instance of the R3Connection class

```csharp
public R3Connection()

```

### R3Connection(string, int, string, string, string, string)

Initializes a new instance of the R3Connection class and sets the logon data for a single application server

```csharp
public R3Connection(string host, int systemNumber, string userName, string password, string language, string client)

```

#### Parameters

`host` [string](https://learn.microsoft.com/dotnet/api/system.string)

Host name of the application server

`systemNumber` [int](https://learn.microsoft.com/dotnet/api/system.int32)

System number of the application server

`userName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Logon name

`password` [string](https://learn.microsoft.com/dotnet/api/system.string)

Logon password

`language` [string](https://learn.microsoft.com/dotnet/api/system.string)

Logon language

`client` [string](https://learn.microsoft.com/dotnet/api/system.string)

Logon client

### R3Connection(string, int, SNCSettings, string, string)

Initializes a new instance of the R3Connection class and sets the logon data for a single application server with SNC authentication

```csharp
public R3Connection(string host, int systemNumber, SNCSettings sncSettings, string language, string client)

```

#### Parameters

`host` [string](https://learn.microsoft.com/dotnet/api/system.string)

Host name of the application server

`systemNumber` [int](https://learn.microsoft.com/dotnet/api/system.int32)

System number of the application server

`sncSettings` [SNCSettings](../ERPConnect.SNCSettings/)

Settings for SNC

`language` [string](https://learn.microsoft.com/dotnet/api/system.string)

Logon language

`client` [string](https://learn.microsoft.com/dotnet/api/system.string)

Logon client

## Properties

### AliasUser

```csharp
public string AliasUser { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### CacheMetadata

Get / sets whether the meta data of functions, queries etc. is stored and recycled when a new Create... statement is called.

```csharp
public bool CacheMetadata { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Client

Gets / sets the logon client

```csharp
public string Client { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Codepage

```csharp
public string Codepage { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### CpicConversationId

Gets the Id of the underlying CPI-C connection

```csharp
public string CpicConversationId { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### DynamicABAPCustomFunction

Sets the name of the function module which is used by the ABAPCode class.

```csharp
public string DynamicABAPCustomFunction { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Host

Gets / sets the host name

```csharp
public string Host { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Remarks

Only required when using logon to a single application server

### InitialEncoding

Gets or sets initial encoding (required for some special characters in passwords).

```csharp
public SAPEncodingInfo InitialEncoding { get; set; }

```

#### Property Value

[SAPEncodingInfo](../ERPConnect.SAPEncodingInfo/)

#### Remarks

`ERPConnect.ClientProtocol.NWRFC` only.

### IsOpen

Gets a value indicating whether this connection has been successfully established and has been valid when the last message has been received/sent. To actively check the current state, please use `ERPConnect.R3Connection.Ping`

```csharp
public bool IsOpen { get; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### IsUnicode

Defines whether the partner system is a unicode system

```csharp
public bool IsUnicode { get; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### KernelRelease

The kernel release number of the SAP system

```csharp
public string KernelRelease { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Examples

700

### Language

Gets / sets the logon language

```csharp
public string Language { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Examples

DE od EN

### LogDir

Gets or sets the path to the directory in which trace files and XML log files are stored

```csharp
public string LogDir { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Remarks

To enable logging, set the value to an existing directory to which the process has write access. To disable logging set the value to string.Empty. Property must be set before the connection is opened.

### Logging

Gets or sets a value which indicates whether detailed RFC tracing is enabled or not

```csharp
public bool Logging { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

#### Remarks

Must be set before the connection is opened. `ERPConnect.IR3Connection.LogDir` must also be set.

### LogonGroup

Gets / sets the logon group

```csharp
public string LogonGroup { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Remarks

Only required when using logon by load balancing

### LogonTicket

```csharp
public string LogonTicket { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MessageServer

Gets / sets the SAP message server

```csharp
public string MessageServer { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Remarks

Required for logon via load balancing

### MessageServerService

Gets or sets the non-standard service the message server listens on. Corresponds to NetWeaver connection parameter "MSSERV".

```csharp
public string MessageServerService { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### PartnerRelease

The release number of the SAP-BASIS of the system

```csharp
public string PartnerRelease { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Examples

700

### Password

Gets/ sets the user's password for authentication

```csharp
public string Password { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Protocol

Get / sets the `ERPConnect.ClientProtocol` for the communication between client and SAP server

```csharp
public ClientProtocol Protocol { get; set; }

```

#### Property Value

[ClientProtocol](../ERPConnect.ClientProtocol/)

### ReadTableFunctionName

Gets or sets the name of the function module that is used by `ERPConnect.Utils.ReadTable`. This will be overriden by `ERPConnect.Utils.ReadTable.SetCustomFunctionName(System.String)`.

```csharp
public string ReadTableFunctionName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SAPEncodingInfo

Gets information about data encoding

```csharp
public SAPEncodingInfo SAPEncodingInfo { get; }

```

#### Property Value

[SAPEncodingInfo](../ERPConnect.SAPEncodingInfo/)

### SAProuterString

Gets or sets the parameters to use when the connection should be made through a SAProuter. Corresponds to NetWeaver connection parameter "SAPROUTER".

```csharp
public string SAProuterString { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SID

Gets / sets SAP System ID

```csharp
public string SID { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Remarks

Only required when using logon by load balancing

### SNCSettings

Gets or sets the settings for SNC

```csharp
public SNCSettings SNCSettings { get; set; }

```

#### Property Value

[SNCSettings](../ERPConnect.SNCSettings/)

#### See Also

[IR3Connection](../ERPConnect.IR3Connection/).[SNCSettings](../ERPConnect.IR3Connection/#ERPConnect_IR3Connection_SNCSettings)

### SkipGetSystemInfo

Gets or sets a value which indicates whether details about the SAP system are obtained through an RFC function call, if necessary.

```csharp
public bool SkipGetSystemInfo { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

#### Remarks

Only set to true, if there's no other way!

### SystemNumber

Gets / sets the system number

```csharp
public int SystemNumber { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

#### Remarks

Only required when using logon to a single application server

### TlsSettings

Gets or sets TLS settings to use when connecting using WebSockets. Corresponds to NetWeaver connection parameters related to TLS. Only used when `ERPConnect.R3Connection.UsesWebSocket` is set to true and using `ERPConnect.ClientProtocol.NWRFC`.

```csharp
public TlsSettings TlsSettings { get; set; }

```

#### Property Value

[TlsSettings](../ERPConnect.TlsSettings/)

#### Remarks

SAP systems require you to use TLS (`ERPConnect.R3Connection.TlsSettings`) when connecting with RFC over WebSocket.

### TraceLevel

Verbosity of NetWeaver RFC library trace messages.

```csharp
public TraceLevel TraceLevel { get; set; }

```

#### Property Value

[TraceLevel](../ERPConnect.TraceLevel/)

### UseDeltaManager

Gets or sets whether the delta manager is to be used for (de-)serializing TABLES parameters. If unset (null) the default NetWeaver library value is used. Corresponds to NetWeaver connection parameter "DELTA".

```csharp
public bool? UseDeltaManager { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)?

### UseGui

Defines whether the SAP GUI should be used

```csharp
public bool UseGui { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### UserName

Gets / sets the user name for authentication

```csharp
public string UserName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### UsesLoadBalancing

Gets or sets a value indicating whether load balancing is used or not

```csharp
public bool UsesLoadBalancing { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### UsesWebSocket

Gets or sets whether to use RFC over WebSocket. When set to true the following properties have to be specified:

- `ERPConnect.R3Connection.WebSocketHost`
- `ERPConnect.R3Connection.WebSocketPort`
- `ERPConnect.R3Connection.TlsSettings`

```csharp
public bool UsesWebSocket { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

#### Remarks

SAP systems require you to use TLS (`ERPConnect.R3Connection.TlsSettings`) when connecting with RFC over WebSocket.

### WebSocketHost

Gets or sets the hostname to use when connecting using WebSockets. Corresponds to NetWeaver connection parameter "WSHOST". Only used when `ERPConnect.R3Connection.UsesWebSocket` is set to true and using `ERPConnect.ClientProtocol.NWRFC`.

```csharp
public string WebSocketHost { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Remarks

SAP systems require you to use TLS (`ERPConnect.R3Connection.TlsSettings`) when connecting with RFC over WebSocket.

### WebSocketPort

Gets or sets the WebSocket port to use when connecting using WebSockets. Corresponds to NetWeaver connection parameter "WSPORT". Only used when `ERPConnect.R3Connection.UsesWebSocket` is set to true and using `ERPConnect.ClientProtocol.NWRFC`.

```csharp
public ushort WebSocketPort { get; set; }

```

#### Property Value

[ushort](https://learn.microsoft.com/dotnet/api/system.uint16)

### X509Certificate

Gets or sets an X.509 client certificate

```csharp
public X509Certificate2 X509Certificate { get; set; }

```

#### Property Value

[X509Certificate2](https://learn.microsoft.com/dotnet/api/system.security.cryptography.x509certificates.x509certificate2)

## Methods

### AppendToConnectionString(StringBuilder, string, object)

Appends a key/value-pair to a connection string.

```csharp
public static void AppendToConnectionString(StringBuilder connectionStringBuilder, string parameterName, object parameterValue)

```

#### Parameters

`connectionStringBuilder` [StringBuilder](https://learn.microsoft.com/dotnet/api/system.text.stringbuilder)

`parameterName` [string](https://learn.microsoft.com/dotnet/api/system.string)

`parameterValue` [object](https://learn.microsoft.com/dotnet/api/system.object)

#### Remarks

Usage of connection strings is discouraged, connection properties are preferred.

### Clone()

Clones the connection object, but doesn't open it!!!! Please use Open() to open it

```csharp
public R3Connection Clone()

```

#### Returns

[R3Connection](./)

The cloned R3Connection object

### Close()

Closes the client connection

```csharp
public void Close()

```

### ConfirmTID(string)

Confirms a Transaction ID

```csharp
public void ConfirmTID(string tid)

```

#### Parameters

`tid` [string](https://learn.microsoft.com/dotnet/api/system.string)

Transaction ID

### CreateBWCube(string)

Creates a new BWCube object. Please refer to the manual for a sample

```csharp
public BWCube CreateBWCube(string cubeName)

```

#### Parameters

`cubeName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of BW cube or BW query

#### Returns

[BWCube](../../erpconnect-bw/ERPConnect.BW.BWCube/)

The created BWCube object

### CreateBapi(string, string)

Creates a new BusinessObjectMethod object.

```csharp
public BusinessObjectMethod CreateBapi(string businessObjectName, string methodName)

```

#### Parameters

`businessObjectName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the Business Object. Case-sensitive

`methodName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of Business Object's method. Case-sensitive

#### Returns

[BusinessObjectMethod](../ERPConnect.BusinessObjectMethod/)

A BusinessObjectMethod object

#### Remarks

Please go to folder BAPIGetQty in your Examples folder for example source code.

### CreateEmptyIdoc(string, string)

Creates an Idoc object. The segments are empty and have to be filled. Therefore use Idoc.CreateSegment

```csharp
public Idoc CreateEmptyIdoc(string idocType, string enhancement)

```

#### Parameters

`idocType` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the Idoc type (e.g. MATMAS01)

`enhancement` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the Idoc enhancement (may be empty if no enhancement is needed)

#### Returns

[Idoc](../../erpconnect-idocs/ERPConnect.Idocs.Idoc/)

An empty Idoc object

### CreateFunction(string)

Creates a function by the name of the SAP function module

```csharp
public RFCFunction CreateFunction(string name)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the function module

#### Returns

[RFCFunction](../ERPConnect.RFCFunction/)

A RFCFunction object

#### Examples

[C#]

```
static void Main(string[] args)
{
    R3Connection con = new R3Connection("hamlet",11,"theobald","pw","DE","800");
    con.Open(false);

    // Create a function object
    RFCFunction func = con.CreateFunction("RFC_CUSTOMER_GET");

    Console.WriteLine("Please enter customer number ...");
    Console.WriteLine("(and do not forget the leading zeros ...");

    // fill the export parameter
    StringBuilder CustomerNo =  new StringBuilder(Console.ReadLine());
    func.Exports["KUNNR"].ParamValue = CustomerNo.ToString();

    try 
    {
    func.Execute();
    }
    catch (ERPException e)
    {
        Console.WriteLine(e.Message);
        Console.ReadLine();
        return;
    }

    // Output the result of the function module
    Console.WriteLine("Name of customer:");
    Console.WriteLine(func.Tables["CUSTOMER_T"].Rows[0,"NAME1"]);
    Console.ReadLine();
}
```

[VB]

```
Sub Main()
    Dim con As New R3Connection("hamlet", 11, "theobald", "pw", "DE", "800")
    con.Open(False)

    ' Create a function object
    Dim func = con.CreateFunction("RFC_CUSTOMER_GET")

    Console.WriteLine("Please enter customer number ...")
    Console.WriteLine("(and do not forget the leading zeros ...")

    ' fill the export parameter
    Dim CustomerNo As New StringBuilder(Console.ReadLine())
    func.Exports("KUNNR").ParamValue = CustomerNo.ToString()

    Try
        func.Execute()
    Catch e As ERPException
        Console.WriteLine(e.Message)
        Console.ReadLine()
        Return
    End Try

    ' Output the result of the function module
    Console.WriteLine("Name of customer:")
    Console.WriteLine(func.Tables("CUSTOMER_T").Rows(0, "NAME1"))
    Console.ReadLine()
End Sub
```

#### Remarks

The following example demonstrates, how to logon, to create a function object and to execute the function

### CreateIdoc(string, string)

Creates a fully initialized Idoc object ready to send ...

```csharp
public Idoc CreateIdoc(string idocType, string enhancement)

```

#### Parameters

`idocType` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the Idoc type (e.g. MATMAS01)

`enhancement` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the Idoc enhancement (may be empty is no enhancement is needed)

#### Returns

[Idoc](../../erpconnect-idocs/ERPConnect.Idocs.Idoc/)

A new Idoc object ready for use

### CreateQuery(WorkSpace, string, string)

Creates a new Query object

```csharp
public Query CreateQuery(WorkSpace workSpace, string userGroup, string queryName)

```

#### Parameters

`workSpace` [WorkSpace](../../erpconnect-queries/ERPConnect.Queries.WorkSpace/)

Workspace local / global

`userGroup` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of user group

`queryName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of query

#### Returns

[Query](../../erpconnect-queries/ERPConnect.Queries.Query/)

The new created Query object

### CreateTID()

Creates a new transaction ID

```csharp
public string CreateTID()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

New transaction ID

### Dispose()

```csharp
public void Dispose()

```

### Execute(RFCFunction)

Assigns this connection to the supplied `ERPConnect.RFCFunction` and then executes the function.

```csharp
public void Execute(RFCFunction function)

```

#### Parameters

`function` [RFCFunction](../ERPConnect.RFCFunction/)

### FromConnectionString(string)

```csharp
public static R3Connection FromConnectionString(string connectionString)

```

#### Parameters

`connectionString` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[R3Connection](./)

### GetConnectionStringParameterValue(string, string)

Extracts the value of a parameter from a connection string

```csharp
public static string GetConnectionStringParameterValue(string connectionString, string parameterName)

```

#### Parameters

`connectionString` [string](https://learn.microsoft.com/dotnet/api/system.string)

The connection string from which the value should be extracted

`parameterName` [string](https://learn.microsoft.com/dotnet/api/system.string)

The name of the parameter of which the value should be extracted

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

The value of the parameter

### GetSSOTicket()

```csharp
public string GetSSOTicket()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### IsSystemEditable()

Checks, whether dynamic ABAP code can be executed.

```csharp
public bool IsSystemEditable()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Log(string)

This function can be used to access the internal log mechanism

```csharp
public void Log(string message)

```

#### Parameters

`message` [string](https://learn.microsoft.com/dotnet/api/system.string)

Message to be logged

### Open()

Opens a connection to an SAP R/3 system.

```csharp
public void Open()

```

#### Remarks

For opening via Load Balancing please set `ERPConnect.R3Connection.UsesLoadBalancing` = true

### ParseConnectionString(string)

Parses a connection string and sets all properties accordingly

```csharp
public void ParseConnectionString(string connectionString)

```

#### Parameters

`connectionString` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Remarks

Does not change the `ERPConnect.R3Connection.ConnectionString` property

### Ping()

Checks, whether the established connection is available

```csharp
public bool Ping()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Whether the operation was successful. No exception is thrown

#### Remarks

Marks the connection as closed if the operation is not successful.

### ToConnectionString()

Generates a connection string based on the values of properties (ignores the `ERPConnect.R3Connection.ConnectionString` property).

```csharp
public string ToConnectionString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Remarks

Usage of connection strings is discouraged, connection properties are preferred.

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public static class RFCAPI

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCAPI](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### RequestWaitTime

Gets or sets the time in milliseconds for which the current thread sleeps between checks for new RFC requests. Only change this value if you are experiencing performance issues

```csharp
public static int RequestWaitTime { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### SynchronizationEnabled

Gets or sets a value indicating whether parallel calls to the classic RFC API are synchronized to prevent resource conflicts. Only change this value if you are experiencing performance issues. Do not set this value to false if multiple threads are using ERPConnect. Otherwise memory access violations may occur which may corrupt the state of your process.

```csharp
public static bool SynchronizationEnabled { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class RFCCallbackFunction

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCCallbackFunction](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCCallbackFunction(string, Action<RFCCallbackFunction>)

Initializes a new `ERPConnect.RFCCallbackFunction` object

```csharp
public RFCCallbackFunction(string name, Action<RFCCallbackFunction> callback)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

The name of this function used to dispatch incoming callbacks

`callback` [Action](https://learn.microsoft.com/dotnet/api/system.action-1)\<[RFCCallbackFunction](./)>

The handling method which is called when a callback for this function is received

## Properties

### Callback

Gets the delegate that is used to handle incoming callbacks

```csharp
public Action<RFCCallbackFunction> Callback { get; }

```

#### Property Value

[Action](https://learn.microsoft.com/dotnet/api/system.action-1)\<[RFCCallbackFunction](./)>

### Exports

Gets a RFCParamter collection which represents the export parameters to be exchanged with the SAP system

```csharp
public RFCParameterCollection Exports { get; }

```

#### Property Value

[RFCParameterCollection](../ERPConnect.RFCParameterCollection/)

### Imports

Gets a RFCParamter collction which represents the import parameters to be exchanged with the SAP system

```csharp
public RFCParameterCollection Imports { get; }

```

#### Property Value

[RFCParameterCollection](../ERPConnect.RFCParameterCollection/)

### Name

Gets the name of this callback function

```csharp
public string Name { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Tables

Gets a RFCTable collection which represents the tables to be exchanged with the SAP system

```csharp
public RFCTableCollection Tables { get; }

```

#### Property Value

[RFCTableCollection](../ERPConnect.RFCTableCollection/)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

RFCFunction objects represent SAP function modules that can be executed in the SAP system.

```csharp
public class RFCFunction

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCFunction](./)

#### Derived

[BusinessObjectMethod](../ERPConnect.BusinessObjectMethod/)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCFunction(string)

Initializes a new RFCFunction object

```csharp
public RFCFunction(string functionName)

```

#### Parameters

`functionName` [string](https://learn.microsoft.com/dotnet/api/system.string)

The name of the function module

### RFCFunction(IR3Connection, string)

Initializes a new RFCFunction object

```csharp
public RFCFunction(IR3Connection connection, string functionName)

```

#### Parameters

`connection` [IR3Connection](../ERPConnect.IR3Connection/)

A R3Connection object

`functionName` [string](https://learn.microsoft.com/dotnet/api/system.string)

The name of the function module

## Properties

### CallbackFunctions

Gets a list of associated callback functions that are used for handling incoming callbacks

```csharp
public IList<RFCCallbackFunction> CallbackFunctions { get; }

```

#### Property Value

[IList](https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1)\<[RFCCallbackFunction](../ERPConnect.RFCCallbackFunction/)>

### Changings

Returns a RFCParameter collection which represents the export parameters to be exchanged with the SAP system

```csharp
public RFCParameterCollection Changings { get; }

```

#### Property Value

[RFCParameterCollection](../ERPConnect.RFCParameterCollection/)

### Connection

Gets / sets the R3Connection object which is assigned to the function

```csharp
public IR3Connection Connection { get; set; }

```

#### Property Value

[IR3Connection](../ERPConnect.IR3Connection/)

### Exports

Returns a RFCParameter collection which represents the export parameters to be exchanged with the SAP system

```csharp
public RFCParameterCollection Exports { get; }

```

#### Property Value

[RFCParameterCollection](../ERPConnect.RFCParameterCollection/)

### Imports

Returns a RFCParameter collection which represents the import parameters to be exchanged with the SAP system

```csharp
public RFCParameterCollection Imports { get; }

```

#### Property Value

[RFCParameterCollection](../ERPConnect.RFCParameterCollection/)

### Name

Gets / sets the name of the function module

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Tables

Returns a RFCTable collection which represents the tables to be exchanged with the SAP system

```csharp
public RFCTableCollection Tables { get; }

```

#### Property Value

[RFCTableCollection](../ERPConnect.RFCTableCollection/)

## Methods

### Execute(string, string)

Executes a function in qRFC context. No import parameters are passed back to the calling program

```csharp
public void Execute(string tid, string queue)

```

#### Parameters

`tid` [string](https://learn.microsoft.com/dotnet/api/system.string)

Transaction ID

`queue` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the inbound queue

### Execute(string)

Executes a function in tRFC context. No import parameters are passed back to the calling program

```csharp
public void Execute(string tid)

```

#### Parameters

`tid` [string](https://learn.microsoft.com/dotnet/api/system.string)

Transaction ID

### Execute()

Executes the function module. Consider using `ERPConnect.R3Connection.Execute(ERPConnect.RFCFunction)` instead.

```csharp
public virtual void Execute()

```

### LoadFromXML(XmlReader)

Loads the RFCFunction object from XML

```csharp
public void LoadFromXML(XmlReader reader)

```

#### Parameters

`reader` XmlReader

XmlReader object for reading the XML

### LoadFromXML(string)

Loads the RFCFunction object from XML

```csharp
public void LoadFromXML(string path)

```

#### Parameters

`path` [string](https://learn.microsoft.com/dotnet/api/system.string)

Path to the source file

### LoadFromXML(TextReader)

Loads the RFCFunction object from XML

```csharp
public void LoadFromXML(TextReader reader)

```

#### Parameters

`reader` [TextReader](https://learn.microsoft.com/dotnet/api/system.io.textreader)

TextReader object for reading the XML

### LoadFromXMLString(string)

Loads the RFCFunction object from a string which contains XML

```csharp
public void LoadFromXMLString(string xml)

```

#### Parameters

`xml` [string](https://learn.microsoft.com/dotnet/api/system.string)

String which contains the XML

### RetrieveMetadata()

```csharp
protected void RetrieveMetadata()

```

### SaveToXML(XmlWriter)

Saves the RFCFunction object to XML

```csharp
public void SaveToXML(XmlWriter writer)

```

#### Parameters

`writer` XmlWriter

XmlWriter object for writing the XML

### SaveToXML(string)

Saves the RFCFunction object to XML

```csharp
public void SaveToXML(string path)

```

#### Parameters

`path` [string](https://learn.microsoft.com/dotnet/api/system.string)

Path to the output file

### SaveToXML()

Saves the RFCFunction object to XML

```csharp
public string SaveToXML()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

String which contains the XML

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

RFCParameters object represent the parameters to be exchanged with the SAP function module

```csharp
public sealed class RFCParameter

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCParameter](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCParameter(string, RFCTYPE, int, int, object)

Initializes a new RFCParameter object

```csharp
public RFCParameter(string name, RFCTYPE type, int length, int decimals, object paramValue)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name as provided in the function module

`type` [RFCTYPE](../ERPConnect.RFCTYPE/)

RFC type of the parameter

`length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of the parameter in bytes

`decimals` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Number of decimal digits

`paramValue` [object](https://learn.microsoft.com/dotnet/api/system.object)

Object which represnts the value that is exchanged with the SAP system

### RFCParameter(string, RFCTYPE, int, int)

Initializes a new RFCParameter object

```csharp
public RFCParameter(string name, RFCTYPE type, int length, int decimals)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name as provided in the function module

`type` [RFCTYPE](../ERPConnect.RFCTYPE/)

RFC type of the parameter

`length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of the parameter in bytes

`decimals` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Number of decimal digits

### RFCParameter(string, RFCTYPE, int)

Initializes a new RFCParameter object

```csharp
public RFCParameter(string name, RFCTYPE type, int length)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name as provided in the function module

`type` [RFCTYPE](../ERPConnect.RFCTYPE/)

RFC type of the parameter

`length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of the parameter in bytes

### RFCParameter(string, RFCTYPE)

Initializes a new RFCParameter object

```csharp
public RFCParameter(string name, RFCTYPE type)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name as provided in the function module

`type` [RFCTYPE](../ERPConnect.RFCTYPE/)

RFC type of the parameter

### RFCParameter(string, RFCTableColumnCollection)

Initializes a new RFCParameter object that is a structure

```csharp
public RFCParameter(string name, RFCTableColumnCollection columns)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name as provided in the function module

`columns` [RFCTableColumnCollection](../ERPConnect.RFCTableColumnCollection/)

ColumnCollection object for structured parameters

## Properties

### DDICFieldType

Represents the DDIC field type

```csharp
public string DDICFieldType { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Decimals

Gets / sets the number decimals digits

```csharp
public int Decimals { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### IsSupplied

Gets or sets a value indicating whether this parameter is included in the remote function call.

Exports/Changings:\
If this property is set to `false`, no value will be sent to SAP and the default value as defined in the function module will be used. That's the default behaviour for `RFCFunction.Exports`, unless a value has been assigned through `ParamValue`.

Imports/Changings:\
If this property is set to `false`, no value will be received from SAP.\
When using NWRFC, some function modules might not even calculate the result. The FM can use `IS SUPPLIED` to check whether the parameter was requested.

```csharp
public bool IsSupplied { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Length

Gets / sets the parameter length in bytes

```csharp
public int Length { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Name

Gets or sets the name of the parameter (as defined in the function module)

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### ParamValue

Get or sets the value of the parameter. Please pay close attention to the data type and the RFC type:

- ABAP type C -> System.String
- ABAP type I -> System.Int32
- ABAP type F -> System.Double
- ABAP type D -> System.String (YYYYMMDD)
- ABAP type T -> System.String (HHMMSS)
- ABAP type P -> System.Decimal
- ABAP type N -> System.String
- ABAP type X -> System.Byte[]
- ABAP type utclong -> System.DateTime? (nullable)
- ABAP Type structure -> RFCStructure object

```csharp
public object ParamValue { get; set; }

```

#### Property Value

[object](https://learn.microsoft.com/dotnet/api/system.object)

### Tag

A tag that can be used for everything

```csharp
public object Tag { get; set; }

```

#### Property Value

[object](https://learn.microsoft.com/dotnet/api/system.object)

### Type

Gets or sets this parameters RFC type

```csharp
public RFCTYPE Type { get; set; }

```

#### Property Value

[RFCTYPE](../ERPConnect.RFCTYPE/)

## Methods

### GetLength()

```csharp
[Obsolete("Please use Length instead")]
public int GetLength()

```

#### Returns

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### IsStructure()

Returns whether the parameter is a structured data type

```csharp
public bool IsStructure()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

true / false

### IsTable()

Returns whether the parameter is an internal table

```csharp
public bool IsTable()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

true / false

### RetrieveColumnsByStructure(IR3Connection, string)

Retrieves a structure from the SAP Data Dictionary

```csharp
public void RetrieveColumnsByStructure(IR3Connection connection, string structureName)

```

#### Parameters

`connection` [IR3Connection](../ERPConnect.IR3Connection/)

R3Connection object

`structureName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the DDIC structure

### SetValueInternal(object)

Sets the parameter value directly without any checks or conversions

```csharp
public void SetValueInternal(object value)

```

#### Parameters

`value` [object](https://learn.microsoft.com/dotnet/api/system.object)

### ToBytes()

Converts the parameter value to System.Byte[]

```csharp
public byte[] ToBytes()

```

#### Returns

[byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

System.Byte[] object

### ToDouble()

Converts the parameter value to System.Double

```csharp
public double ToDouble()

```

#### Returns

[double](https://learn.microsoft.com/dotnet/api/system.double)

System.Double object

### ToInt32()

Converts the parameter value to System.Int32

```csharp
public int ToInt32()

```

#### Returns

[int](https://learn.microsoft.com/dotnet/api/system.int32)

System.Int32 object

### ToString()

Converts the paramter value to System.String

```csharp
public override string ToString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

System.String object

### ToStructure()

Converts the parameter value to RFCStructure

```csharp
public RFCStructure ToStructure()

```

#### Returns

[RFCStructure](../ERPConnect.RFCStructure/)

RFCStructure object

### ToTable()

Converts the parameter value to RFCTable

```csharp
public RFCTable ToTable()

```

#### Returns

[RFCTable](../ERPConnect.RFCTable/)

RFCTable object

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Collection of im- or export parameters of function module

```csharp
public sealed class RFCParameterCollection : IList<RFCParameter>, ICollection<RFCParameter>, IEnumerable<RFCParameter>, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCParameterCollection](./)

#### Implements

[IList<RFCParameter>](https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1), [ICollection<RFCParameter>](https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1), [IEnumerable<RFCParameter>](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCParameterCollection()

```csharp
public RFCParameterCollection()

```

## Properties

### Count

```csharp
public int Count { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### this[int]

returns a RFCParameter object from the collection.

```csharp
public RFCParameter this[int index] { get; set; }

```

#### Property Value

[RFCParameter](../ERPConnect.RFCParameter/)

### this[string]

Returns a RFCParameter object by a given name.

```csharp
public RFCParameter this[string name] { get; set; }

```

#### Property Value

[RFCParameter](../ERPConnect.RFCParameter/)

## Methods

### Add(RFCParameter)

Adds a RFCParameter object to the collection

```csharp
public void Add(RFCParameter newParameter)

```

#### Parameters

`newParameter` [RFCParameter](../ERPConnect.RFCParameter/)

RFCParameter object

### Add(string, RFCTYPE, int, int, object)

Constructs a new parameter object by giving several properties

```csharp
public RFCParameter Add(string name, RFCTYPE type, int length, int decimals, object paramValue)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the paramneter in the function module

`type` [RFCTYPE](../ERPConnect.RFCTYPE/)

RFC type

`length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of Colum

`decimals` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Number of decimal digits

`paramValue` [object](https://learn.microsoft.com/dotnet/api/system.object)

Value of the parameter

#### Returns

[RFCParameter](../ERPConnect.RFCParameter/)

A new RFCParameter object

### Add(string, RFCTYPE, int, int)

Constructs a new parameter object by giving several properties

```csharp
public RFCParameter Add(string name, RFCTYPE type, int length, int decimals)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the paramneter in the function module

`type` [RFCTYPE](../ERPConnect.RFCTYPE/)

RFC type

`length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of Colum

`decimals` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Number of decimal digits

#### Returns

[RFCParameter](../ERPConnect.RFCParameter/)

A new RFCParameter object

### Add(string, RFCTYPE, int)

Adds and returns a new RFCParameter object

```csharp
public RFCParameter Add(string name, RFCTYPE type, int length)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the parameter as defined in the function module

`type` [RFCTYPE](../ERPConnect.RFCTYPE/)

RFC type of the new parameter

`length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of the new parameter in bytes

#### Returns

[RFCParameter](../ERPConnect.RFCParameter/)

The new RFCParameter object

### Add(string, RFCTYPE)

Adds and returns a new RFCParameter object

```csharp
public RFCParameter Add(string name, RFCTYPE type)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the parameter as defined in the function module

`type` [RFCTYPE](../ERPConnect.RFCTYPE/)

RFC type of the new parameter

#### Returns

[RFCParameter](../ERPConnect.RFCParameter/)

The new RFCParameter object

### Add(string, RFCTableColumnCollection)

Adds and returns a new RFCParameter object

```csharp
public RFCParameter Add(string name, RFCTableColumnCollection columns)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the parameter as defined in the function module

`columns` [RFCTableColumnCollection](../ERPConnect.RFCTableColumnCollection/)

Columns collection for the RFCStructure

#### Returns

[RFCParameter](../ERPConnect.RFCParameter/)

The new RFCParameter object

### Clear()

```csharp
public void Clear()

```

### Contains(RFCParameter)

```csharp
public bool Contains(RFCParameter item)

```

#### Parameters

`item` [RFCParameter](../ERPConnect.RFCParameter/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Contains(string)

```csharp
public bool Contains(string parameterName)

```

#### Parameters

`parameterName` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### CopyTo(RFCParameter[], int)

```csharp
public void CopyTo(RFCParameter[] array, int arrayIndex)

```

#### Parameters

`array` [RFCParameter](../ERPConnect.RFCParameter/)[]

`arrayIndex` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### GetEnumerator()

```csharp
public IEnumerator<RFCParameter> GetEnumerator()

```

#### Returns

[IEnumerator](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1)\<[RFCParameter](../ERPConnect.RFCParameter/)>

### IndexOf(RFCParameter)

```csharp
public int IndexOf(RFCParameter item)

```

#### Parameters

`item` [RFCParameter](../ERPConnect.RFCParameter/)

#### Returns

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Insert(int, RFCParameter)

```csharp
public void Insert(int index, RFCParameter item)

```

#### Parameters

`index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

`item` [RFCParameter](../ERPConnect.RFCParameter/)

### Remove(RFCParameter)

```csharp
public bool Remove(RFCParameter item)

```

#### Parameters

`item` [RFCParameter](../ERPConnect.RFCParameter/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### RemoveAt(int)

```csharp
public void RemoveAt(int index)

```

#### Parameters

`index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### RemoveAt(string)

```csharp
public void RemoveAt(string parameterName)

```

#### Parameters

`parameterName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Arguments for OnAuthorizing event

```csharp
public sealed class RFCServer.AuthorizingEventArgs : EventArgs

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [EventArgs](https://learn.microsoft.com/dotnet/api/system.eventargs) ← [RFCServer.AuthorizingEventArgs](./)

#### Inherited Members

[EventArgs.Empty](https://learn.microsoft.com/dotnet/api/system.eventargs.empty), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### FunctionName

```csharp
public string FunctionName { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### HostName

```csharp
public string HostName { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### IsAuthorized

```csharp
public bool IsAuthorized { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### ProgramName

```csharp
public string ProgramName { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SID

```csharp
public string SID { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SystemNumber

```csharp
public string SystemNumber { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Username

```csharp
public string Username { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void RFCServer.OnAuthorizing(RFCServer sender, RFCServer.AuthorizingEventArgs e)

```

#### Parameters

`sender` [RFCServer](../ERPConnect.RFCServer/)

`e` [RFCServer](../ERPConnect.RFCServer/).[AuthorizingEventArgs](../ERPConnect.RFCServer.AuthorizingEventArgs/)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void RFCServer.OnIncomingCall(RFCServer sender, RFCServerFunction calledFunction)

```

#### Parameters

`sender` [RFCServer](../ERPConnect.RFCServer/)

`calledFunction` [RFCServerFunction](../ERPConnect.RFCServerFunction/)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void RFCServer.OnIncomingIdoc(RFCServer sender, Idoc idoc)

```

#### Parameters

`sender` [RFCServer](../ERPConnect.RFCServer/)

`idoc` [Idoc](../../erpconnect-idocs/ERPConnect.Idocs.Idoc/)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void RFCServer.OnInternalException(RFCServer sender, Exception exception)

```

#### Parameters

`sender` [RFCServer](../ERPConnect.RFCServer/)

`exception` [Exception](https://learn.microsoft.com/dotnet/api/system.exception)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void RFCServer.OnTRFCCheckTID(RFCServer sender, string tid, ref bool ok)

```

#### Parameters

`sender` [RFCServer](../ERPConnect.RFCServer/)

`tid` [string](https://learn.microsoft.com/dotnet/api/system.string)

`ok` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void RFCServer.OnTRFCCommit(RFCServer sender, string tid)

```

#### Parameters

`sender` [RFCServer](../ERPConnect.RFCServer/)

`tid` [string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void RFCServer.OnTRFCConfirm(RFCServer sender, string tid, ref bool ok)

```

#### Parameters

`sender` [RFCServer](../ERPConnect.RFCServer/)

`tid` [string](https://learn.microsoft.com/dotnet/api/system.string)

`ok` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void RFCServer.OnTRFCRollback(RFCServer sender, string tid)

```

#### Parameters

`sender` [RFCServer](../ERPConnect.RFCServer/)

`tid` [string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void RFCServer.OnUnknownIncomingFunction(RFCServer sender, string functionName, ref bool ignore)

```

#### Parameters

`sender` [RFCServer](../ERPConnect.RFCServer/)

`functionName` [string](https://learn.microsoft.com/dotnet/api/system.string)

`ignore` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

RFCServer represents a running server, that can handle incoming RFC calls from a superposed SAP system

```csharp
public sealed class RFCServer : IDisposable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCServer](./)

#### Implements

[IDisposable](https://learn.microsoft.com/dotnet/api/system.idisposable)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCServer()

Initializes a RFCServer object

```csharp
public RFCServer()

```

### RFCServer(bool)

Initializes a new instance of the RFCServer class

```csharp
public RFCServer(bool nonUnicodeIsBigEndian)

```

#### Parameters

`nonUnicodeIsBigEndian` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Indicates, whether non-Unicode systems are treated as big endian systems

### RFCServer(string, string, string)

Initializes a RFCServer object

```csharp
public RFCServer(string gatewayHost, string gatewayService, string programId)

```

#### Parameters

`gatewayHost` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the Gateway host

`gatewayService` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the Gateway service ("sapgwXX" -> XX = system number)

`programId` [string](https://learn.microsoft.com/dotnet/api/system.string)

Program ID as defined in SM59

### RFCServer(string)

Initializes a RFCServer object

```csharp
public RFCServer(string connectionString)

```

#### Parameters

`connectionString` [string](https://learn.microsoft.com/dotnet/api/system.string)

Connection String

### RFCServer(string, string, string, SNCSettings)

Initializes a RFCServer object

```csharp
public RFCServer(string gatewayHost, string gatewayService, string programId, SNCSettings sncSettings)

```

#### Parameters

`gatewayHost` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the Gateway host

`gatewayService` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the Gateway service ("sapgwXX" -> XX = system number)

`programId` [string](https://learn.microsoft.com/dotnet/api/system.string)

Program ID as defined in SM59

`sncSettings` [SNCSettings](../ERPConnect.SNCSettings/)

Settings for SNC

## Properties

### CanReceiveIdocs

Defines, whether the server object should be able to receive idocs.

```csharp
public bool CanReceiveIdocs { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### GatewayHost

Name of the gatewayhost

```csharp
public string GatewayHost { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Remarks

Have a look at `ERPConnect.RFCServer.Start?text=ERPConnect.RFCServer.Start` for a complete example.

### GatewayService

Name of the gateysevice ("sapgwXX" replace XX by the SAP system number)

```csharp
public string GatewayService { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Remarks

Have a look at `ERPConnect.RFCServer.Start?text=ERPConnect.RFCServer.Start` for a complete example.

### IsRunning

Defines, whether the server thread is running at the moment

```csharp
public bool IsRunning { get; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

#### Remarks

Have a look at `ERPConnect.RFCServer.Start?text=ERPConnect.RFCServer.Start` for a complete example.

### IsUnicode

Defines whether the partner system is a unicode system

```csharp
public bool IsUnicode { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### LastTID

Transaction ID of last incoming call

```csharp
public string LastTID { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### LogDir

If this directory is set, every call will be saved there in a XML file

```csharp
public string LogDir { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Logging

Defines, if the calls will be logged to local trace file.

```csharp
public bool Logging { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### ProgramID

ProgrammID as definied in the RFC destintion (Transaction SM59)

```csharp
public string ProgramID { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

#### Remarks

Have a look at `ERPConnect.RFCServer.Start?text=ERPConnect.RFCServer.Start` for a complete example.

### Protocol

Gets or sets the communication protocol/API

```csharp
public ClientProtocol Protocol { get; set; }

```

#### Property Value

[ClientProtocol](../ERPConnect.ClientProtocol/)

### RegisteredFunctions

A collection of all RFCServerFunction objects that the connected SAP system can call.

```csharp
public RFCServerFunctionCollection RegisteredFunctions { get; }

```

#### Property Value

[RFCServerFunctionCollection](../ERPConnect.RFCServerFunctionCollection/)

#### Remarks

Have a look at `ERPConnect.RFCServer.Start?text=ERPConnect.RFCServer.Start` for a complete example.

### SAPEncodingInfo

Gets information about data encoding

```csharp
public SAPEncodingInfo SAPEncodingInfo { get; }

```

#### Property Value

[SAPEncodingInfo](../ERPConnect.SAPEncodingInfo/)

### SNCSettings

Gets or sets the settings for SNC

```csharp
public SNCSettings SNCSettings { get; set; }

```

#### Property Value

[SNCSettings](../ERPConnect.SNCSettings/)

## Methods

### CancelRegisteredServers()

Ends all servers that are registered with the given Program ID at the SAP Host

```csharp
public void CancelRegisteredServers()

```

### Dispose()

```csharp
public void Dispose()

```

### ~RFCServer()

```csharp
protected ~RFCServer()

```

### Log(string)

```csharp
public void Log(string message)

```

#### Parameters

`message` [string](https://learn.microsoft.com/dotnet/api/system.string)

### Start()

Starts the server.

```csharp
public void Start()

```

#### Remarks

Please make sure to have all server functions defined, before starting the server.

### Start(bool)

Starts the server.

```csharp
public void Start(bool blocking)

```

#### Parameters

`blocking` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Defines whether the server should run in an own thread (false) or not (true).

#### Remarks

Please make sure to have all server functions defined, before starting the server.

### Stop()

Stop the running server

```csharp
public void Stop()

```

#### Remarks

Have a look at `ERPConnect.RFCServer.Start?text=ERPConnect.RFCServer.Start` for a complete example.

### Authorizing

Authorizing is fired, when the RFC Server is authorizing an incoming function call. If this event has no subscribers, all calls are authorized. Otherwise AuthorizingEventArgs.IsAuthorized must be set to 'true' to authorize a call.

```csharp
public event RFCServer.OnAuthorizing Authorizing

```

#### Event Type

[RFCServer](./).[OnAuthorizing](../ERPConnect.RFCServer.OnAuthorizing/)

### IncomingCall

IncomingCall is fired, when the SAP system call the RFC server

```csharp
public event RFCServer.OnIncomingCall IncomingCall

```

#### Event Type

[RFCServer](./).[OnIncomingCall](../ERPConnect.RFCServer.OnIncomingCall/)

### IncomingIdoc

IncomingIdoc is fired, when the SAP system calls the RFC Server to send an idoc

```csharp
public event RFCServer.OnIncomingIdoc IncomingIdoc

```

#### Event Type

[RFCServer](./).[OnIncomingIdoc](../ERPConnect.RFCServer.OnIncomingIdoc/)

### InternalException

An error occured within the server object while the server is running

```csharp
public event RFCServer.OnInternalException InternalException

```

#### Event Type

[RFCServer](./).[OnInternalException](../ERPConnect.RFCServer.OnInternalException/)

### Logged

```csharp
public event EventHandler<LoggedEventArgs> Logged

```

#### Event Type

[EventHandler](https://learn.microsoft.com/dotnet/api/system.eventhandler-1)\<[LoggedEventArgs](../ERPConnect.LoggedEventArgs/)>

### Started

Fires after the server has been started

```csharp
public event EventHandler<EventArgs> Started

```

#### Event Type

[EventHandler](https://learn.microsoft.com/dotnet/api/system.eventhandler-1)\<[EventArgs](https://learn.microsoft.com/dotnet/api/system.eventargs)>

### Stopped

Fires after the server has been stopped

```csharp
public event EventHandler<EventArgs> Stopped

```

#### Event Type

[EventHandler](https://learn.microsoft.com/dotnet/api/system.eventhandler-1)\<[EventArgs](https://learn.microsoft.com/dotnet/api/system.eventargs)>

### TRFCCheckTID

TRFCCheckTID is fired, when the SAP system wants the client to check, if a call can be sent.

```csharp
public event RFCServer.OnTRFCCheckTID TRFCCheckTID

```

#### Event Type

[RFCServer](./).[OnTRFCCheckTID](../ERPConnect.RFCServer.OnTRFCCheckTID/)

### TRFCCommit

TRFCCommit is fired, when the SAP system wants to have an Transaktion comitted

```csharp
public event RFCServer.OnTRFCCommit TRFCCommit

```

#### Event Type

[RFCServer](./).[OnTRFCCommit](../ERPConnect.RFCServer.OnTRFCCommit/)

### TRFCConfirm

TRFCConfirm is fired, when the SAP system a transaction to be rolled back due to an error.

```csharp
public event RFCServer.OnTRFCConfirm TRFCConfirm

```

#### Event Type

[RFCServer](./).[OnTRFCConfirm](../ERPConnect.RFCServer.OnTRFCConfirm/)

### TRFCRollback

TRFCRollback is fired, when the SAP system a transaction to be rolled back due to an error.

```csharp
public event RFCServer.OnTRFCRollback TRFCRollback

```

#### Event Type

[RFCServer](./).[OnTRFCRollback](../ERPConnect.RFCServer.OnTRFCRollback/)

### UnknownIncomingFunction

UnknownIncomingFunction is fired, when the SAP system calls a function module that is not contained in the RegisteredFunctions collection.

```csharp
public event RFCServer.OnUnknownIncomingFunction UnknownIncomingFunction

```

#### Event Type

[RFCServer](./).[OnUnknownIncomingFunction](../ERPConnect.RFCServer.OnUnknownIncomingFunction/)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

This class provides a SAP exception which is thrown into the SAP system during a server call. Please make sure to fill the ABAPException properly before throwing in a way, that SAP unterstands ...

```csharp
public sealed class RFCServerException : Exception, ISerializable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Exception](https://learn.microsoft.com/dotnet/api/system.exception) ← [RFCServerException](./)

#### Implements

[ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable)

#### Inherited Members

[Exception.GetBaseException()](https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception), [Exception.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata), [Exception.ToString()](https://learn.microsoft.com/dotnet/api/system.exception.tostring), [Exception.GetType()](https://learn.microsoft.com/dotnet/api/system.exception.gettype), [Exception.TargetSite](https://learn.microsoft.com/dotnet/api/system.exception.targetsite), [Exception.StackTrace](https://learn.microsoft.com/dotnet/api/system.exception.stacktrace), [Exception.Message](https://learn.microsoft.com/dotnet/api/system.exception.message), [Exception.Data](https://learn.microsoft.com/dotnet/api/system.exception.data), [Exception.InnerException](https://learn.microsoft.com/dotnet/api/system.exception.innerexception), [Exception.HelpLink](https://learn.microsoft.com/dotnet/api/system.exception.helplink), [Exception.Source](https://learn.microsoft.com/dotnet/api/system.exception.source), [Exception.HResult](https://learn.microsoft.com/dotnet/api/system.exception.hresult), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCServerException(string)

initializes a new RFCServerException object

```csharp
public RFCServerException(string AbapException)

```

#### Parameters

`AbapException` [string](https://learn.microsoft.com/dotnet/api/system.string)

String that appears as system exception in the calling SAP system

## Fields

### ABAPException

ABAP exception

```csharp
public string ABAPException

```

#### Field Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

RFCServerFunction represents a single function that can be assigned to an RFCServer object

```csharp
public sealed class RFCServerFunction

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCServerFunction](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCServerFunction(string)

Initializes a new RFCServerFunction object. You can also use RFCServer.RegisteredFunctions.add()

```csharp
public RFCServerFunction(string functionName)

```

#### Parameters

`functionName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the function module to be called by SAP system

## Properties

### Exports

A collection of RFCParameter objects that represents the export parameters that are exchanged during a call.

```csharp
public RFCParameterCollection Exports { get; }

```

#### Property Value

[RFCParameterCollection](../ERPConnect.RFCParameterCollection/)

### FunctionName

Name of the function module

```csharp
public string FunctionName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Imports

A collection of RFCParameter objects that represents the import parameters that are exchanged during a call.

```csharp
public RFCParameterCollection Imports { get; }

```

#### Property Value

[RFCParameterCollection](../ERPConnect.RFCParameterCollection/)

### Tables

A collection of RFCTable objects that represents the table parameters that are exchanged during a call.

```csharp
public RFCTableCollection Tables { get; }

```

#### Property Value

[RFCTableCollection](../ERPConnect.RFCTableCollection/)

### UseTRFC

Defines whether transactional RFC is expected or not.

```csharp
public bool UseTRFC { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

## Methods

### LoadFromXML(string)

Loads the RFCServerFunction object from XML

```csharp
public void LoadFromXML(string path)

```

#### Parameters

`path` [string](https://learn.microsoft.com/dotnet/api/system.string)

Path to the source file

### LoadFromXML(TextReader)

Loads the RFCServerFunction object from XML

```csharp
public void LoadFromXML(TextReader reader)

```

#### Parameters

`reader` [TextReader](https://learn.microsoft.com/dotnet/api/system.io.textreader)

TextReader object for reading the XML

### LoadFromXMLString(string)

Loads the RFCServerFunction object from a string which contains XML

```csharp
public void LoadFromXMLString(string xml)

```

#### Parameters

`xml` [string](https://learn.microsoft.com/dotnet/api/system.string)

String which contains the XML

### SaveToXML(string)

Saves the RFCServerFunction object to XML

```csharp
public void SaveToXML(string path)

```

#### Parameters

`path` [string](https://learn.microsoft.com/dotnet/api/system.string)

Path to the output file

### SaveToXML()

Saves the RFCServerFunction object to XML

```csharp
public string SaveToXML()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

String which contains the XML

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

A set of RFCServerFunction objects

```csharp
public sealed class RFCServerFunctionCollection : IList<RFCServerFunction>, ICollection<RFCServerFunction>, IEnumerable<RFCServerFunction>, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCServerFunctionCollection](./)

#### Implements

[IList<RFCServerFunction>](https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1), [ICollection<RFCServerFunction>](https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1), [IEnumerable<RFCServerFunction>](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCServerFunctionCollection()

```csharp
public RFCServerFunctionCollection()

```

## Properties

### Count

```csharp
public int Count { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### this[int]

```csharp
public RFCServerFunction this[int index] { get; set; }

```

#### Property Value

[RFCServerFunction](../ERPConnect.RFCServerFunction/)

### this[string]

```csharp
public RFCServerFunction this[string name] { get; set; }

```

#### Property Value

[RFCServerFunction](../ERPConnect.RFCServerFunction/)

## Methods

### Add(RFCServerFunction)

Adds a new Item to the Collection

```csharp
public void Add(RFCServerFunction rfcServerFunction)

```

#### Parameters

`rfcServerFunction` [RFCServerFunction](../ERPConnect.RFCServerFunction/)

RFCServerFunction to be added

### Add(string)

Adds a new function object to the collection

```csharp
public RFCServerFunction Add(string functionName)

```

#### Parameters

`functionName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the function module to be added

#### Returns

[RFCServerFunction](../ERPConnect.RFCServerFunction/)

A newly created RFCServerFunction object

### Clear()

```csharp
public void Clear()

```

### Contains(RFCServerFunction)

```csharp
public bool Contains(RFCServerFunction item)

```

#### Parameters

`item` [RFCServerFunction](../ERPConnect.RFCServerFunction/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Contains(string)

```csharp
public bool Contains(string name)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### CopyTo(RFCServerFunction[], int)

```csharp
public void CopyTo(RFCServerFunction[] array, int arrayIndex)

```

#### Parameters

`array` [RFCServerFunction](../ERPConnect.RFCServerFunction/)[]

`arrayIndex` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### GetEnumerator()

```csharp
public IEnumerator<RFCServerFunction> GetEnumerator()

```

#### Returns

[IEnumerator](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1)\<[RFCServerFunction](../ERPConnect.RFCServerFunction/)>

### IndexOf(RFCServerFunction)

```csharp
public int IndexOf(RFCServerFunction item)

```

#### Parameters

`item` [RFCServerFunction](../ERPConnect.RFCServerFunction/)

#### Returns

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Insert(int, RFCServerFunction)

```csharp
public void Insert(int index, RFCServerFunction item)

```

#### Parameters

`index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

`item` [RFCServerFunction](../ERPConnect.RFCServerFunction/)

### Remove(RFCServerFunction)

```csharp
public bool Remove(RFCServerFunction item)

```

#### Parameters

`item` [RFCServerFunction](../ERPConnect.RFCServerFunction/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### RemoveAt(int)

```csharp
public void RemoveAt(int index)

```

#### Parameters

`index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### RemoveAt(string)

```csharp
public void RemoveAt(string name)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

RFCStructure object represent a real structure or a row in a RFC table

```csharp
public sealed class RFCStructure

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCStructure](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCStructure()

Initializes a new RFCStructure object

```csharp
public RFCStructure()

```

### RFCStructure(RFCTableColumnCollection)

Constructs a new RFCStructure. The structure is defined by the RFCTableColumnCollection

```csharp
public RFCStructure(RFCTableColumnCollection columns)

```

#### Parameters

`columns` [RFCTableColumnCollection](../ERPConnect.RFCTableColumnCollection/)

A RFCTableColumnCollections

## Properties

### Columns

Returns a RFCTableColumn collection

```csharp
public RFCTableColumnCollection Columns { get; }

```

#### Property Value

[RFCTableColumnCollection](../ERPConnect.RFCTableColumnCollection/)

### Length

returns the overall width of a structured Type

```csharp
public int Length { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### this[int]

Returns the value of a structure element by providing the index of element

```csharp
public object this[int index] { get; set; }

```

#### Property Value

[object](https://learn.microsoft.com/dotnet/api/system.object)

### this[string]

Returns the value of a structure element by providing the name of element

```csharp
public object this[string columnName] { get; set; }

```

#### Property Value

[object](https://learn.microsoft.com/dotnet/api/system.object)

## Methods

### CopyValues(RFCStructure)

Sets all values that have a matching column name

```csharp
public void CopyValues(RFCStructure copyFrom)

```

#### Parameters

`copyFrom` [RFCStructure](./)

### IsStructure(string)

Returns whether a component of a structure is a structure

```csharp
public bool IsStructure(string componentName)

```

#### Parameters

`componentName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the component

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### IsStructure(int)

Returns wether a component of a structure is a structure

```csharp
public bool IsStructure(int componentIndex)

```

#### Parameters

`componentIndex` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Index of the component

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### IsTable(string)

Returns whether a component of a structure is a table

```csharp
public bool IsTable(string componentName)

```

#### Parameters

`componentName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the component

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### IsTable(int)

Returns whether a component of a structure is a table

```csharp
public bool IsTable(int componentIndex)

```

#### Parameters

`componentIndex` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Index of the component

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### SetValueInternal(int, object)

Sets the parameter value for a structure element directly without any checks or conversions

```csharp
public void SetValueInternal(int index, object value)

```

#### Parameters

`index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

`value` [object](https://learn.microsoft.com/dotnet/api/system.object)

### ToStructure(string)

Converts a component of the structure to RFCStructure

```csharp
public RFCStructure ToStructure(string componentName)

```

#### Parameters

`componentName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the component

#### Returns

[RFCStructure](./)

Component converted to RFCStructure

### ToStructure(int)

Converts a component of the structure to RFCStructure

```csharp
public RFCStructure ToStructure(int componentIndex)

```

#### Parameters

`componentIndex` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Index of the component

#### Returns

[RFCStructure](./)

Component converted to RFCStructure

### ToTable(string)

Converts a component of the structure to RFCTable

```csharp
public RFCTable ToTable(string componentName)

```

#### Parameters

`componentName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the component

#### Returns

[RFCTable](../ERPConnect.RFCTable/)

Component converted to RFCTable

### ToTable(int)

Converts a component of the structure to RFCTable

```csharp
public RFCTable ToTable(int componentIndex)

```

#### Parameters

`componentIndex` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Index of the component

#### Returns

[RFCTable](../ERPConnect.RFCTable/)

Component converted to RFCTable

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Collection over RFCStruture objects which represents a row of a table

```csharp
public sealed class RFCStructureCollection : IList<RFCStructure>, ICollection<RFCStructure>, IEnumerable<RFCStructure>, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCStructureCollection](./)

#### Implements

[IList<RFCStructure>](https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1), [ICollection<RFCStructure>](https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1), [IEnumerable<RFCStructure>](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCStructureCollection(RFCTableColumnCollection)

```csharp
public RFCStructureCollection(RFCTableColumnCollection columns)

```

#### Parameters

`columns` [RFCTableColumnCollection](../ERPConnect.RFCTableColumnCollection/)

### RFCStructureCollection()

```csharp
public RFCStructureCollection()

```

## Properties

### Capacity

```csharp
public int Capacity { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Count

```csharp
public int Count { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### this[int]

Returns a RFCStructure object

```csharp
public RFCStructure this[int index] { get; set; }

```

#### Property Value

[RFCStructure](../ERPConnect.RFCStructure/)

### this[int, int]

Returns the value at a given position in the table (index of the row and index the column)

```csharp
public object this[int rowIndex, int columnIndex] { get; set; }

```

#### Property Value

[object](https://learn.microsoft.com/dotnet/api/system.object)

### this[int, string]

Returns the value at a given position in the table (index of the row and name of the column)

```csharp
public object this[int rowIndex, string columnName] { get; set; }

```

#### Property Value

[object](https://learn.microsoft.com/dotnet/api/system.object)

## Methods

### Add(RFCStructure)

Adds a new Item to the Collection

```csharp
public void Add(RFCStructure newStructure)

```

#### Parameters

`newStructure` [RFCStructure](../ERPConnect.RFCStructure/)

RFCStructure to be added

### Add()

Creates a new RFCStructure object and adds it to the collection.

```csharp
public RFCStructure Add()

```

#### Returns

[RFCStructure](../ERPConnect.RFCStructure/)

A RFCStructure object which represents a new table row

### Clear()

```csharp
public void Clear()

```

### Contains(RFCStructure)

```csharp
public bool Contains(RFCStructure item)

```

#### Parameters

`item` [RFCStructure](../ERPConnect.RFCStructure/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### CopyTo(RFCStructure[], int)

```csharp
public void CopyTo(RFCStructure[] array, int arrayIndex)

```

#### Parameters

`array` [RFCStructure](../ERPConnect.RFCStructure/)[]

`arrayIndex` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### GetEnumerator()

```csharp
public IEnumerator<RFCStructure> GetEnumerator()

```

#### Returns

[IEnumerator](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1)\<[RFCStructure](../ERPConnect.RFCStructure/)>

### IndexOf(RFCStructure)

```csharp
public int IndexOf(RFCStructure item)

```

#### Parameters

`item` [RFCStructure](../ERPConnect.RFCStructure/)

#### Returns

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Insert(int, RFCStructure)

```csharp
public void Insert(int index, RFCStructure item)

```

#### Parameters

`index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

`item` [RFCStructure](../ERPConnect.RFCStructure/)

### Remove(RFCStructure)

```csharp
public bool Remove(RFCStructure item)

```

#### Parameters

`item` [RFCStructure](../ERPConnect.RFCStructure/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### RemoveAt(int)

```csharp
public void RemoveAt(int index)

```

#### Parameters

`index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Enum which defines all possible RFC-types

```csharp
public enum RFCTYPE

```

## Fields

`BCD = 2`

Binary Coded Decimal (ABAP type P)

`BYTE = 4`

Raw Bytes (ABAP type X)

`CHAR = 0`

Character string (ABAP type C)

`DATE = 1`

Date field (ABAP type D)

`DECF16 = 23`

IEEE 754r decimal floating point, 8 bytes (ABAP type decfloat16)

`DECF34 = 24`

IEEE 754r decimal floating point, 16 bytes (ABAP type decfloat34)

`FLOAT = 7`

Double precision floating point (ABAP type F)

`INT = 8`

4-byte signed integer (ABAP type I)

`INT1 = 10`

1-byte unsigned integer (ABAP type b)

`INT2 = 9`

2-byte signed integer (ABAP type s)

`INT8 = 31`

8-byte signed integer (ABAP type int8)

`ITAB = 5`

Internal table

`NUM = 6`

Numeric character string

`STRING = 29`

Character string of variable length (ABAP type string)

`STRUCTURE = 17`

Complex type (ABAP structure)

`TIME = 3`

Time (ABAP type T) These fields are strings of the form HHMMSS

`UTCLONG = 32`

8-byte signed integer (ABAP type utclong) representing a timestamp accurate to 100 nanoseconds.

`XSTRING = 30`

Byte string of variable length (ABAP type xstring)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

RFCTable represents a single table to be assigned to a RFCServerFunction object or to a RFCFunction object

```csharp
public sealed class RFCTable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCTable](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCTable()

Initializes a new RFCTable object

```csharp
public RFCTable()

```

### RFCTable(string)

Initializes a new RFCTable object and sets the name of the table

```csharp
public RFCTable(string name)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the table

### RFCTable(string, RFCTableColumnCollection)

Initializes a new RFCTable object and sets the name and columns of the table

```csharp
public RFCTable(string name, RFCTableColumnCollection columns)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the table

`columns` [RFCTableColumnCollection](../ERPConnect.RFCTableColumnCollection/)

Columns of the table

## Properties

### Columns

Returns a collection of RFCTableColumn objects which represent the columns of the table.

```csharp
public RFCTableColumnCollection Columns { get; }

```

#### Property Value

[RFCTableColumnCollection](../ERPConnect.RFCTableColumnCollection/)

### IsSupplied

Gets or sets a value indicating whether this table is included in the remote function call. By default this is `true`.

```csharp
public bool IsSupplied { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

#### Remarks

When using NWRFC, some function modules might not even calculate the result. The FM can use `IS SUPPLIED` to check whether the table was supplied or requested.

### Name

Returns the name of the table as provided by the function module

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### RowCount

Returns the number of rows contained in this table

```csharp
public int RowCount { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Rows

Returns a collection of RFCStructure object which represent the rows of the table

```csharp
public RFCStructureCollection Rows { get; }

```

#### Property Value

[RFCStructureCollection](../ERPConnect.RFCStructureCollection/)

### this[int]

Returns a row represented by a RFCStructure object at a given index

```csharp
public object this[int rowIndex] { get; }

```

#### Property Value

[object](https://learn.microsoft.com/dotnet/api/system.object)

### this[int, int]

Returns the value of table line at row RowIndex and column index ColIndex

```csharp
public object this[int rowIndex, int columnIndex] { get; set; }

```

#### Property Value

[object](https://learn.microsoft.com/dotnet/api/system.object)

### this[int, string]

Returns the value of table line at row RowIndex and column ColName

```csharp
public object this[int rowIndex, string columnName] { get; set; }

```

#### Property Value

[object](https://learn.microsoft.com/dotnet/api/system.object)

## Methods

### AddRow()

Adds a new row and returns the new RFCStructure object

```csharp
public RFCStructure AddRow()

```

#### Returns

[RFCStructure](../ERPConnect.RFCStructure/)

The new RFCStrucure object which represents the new row

### Clear()

Empties the table

```csharp
public void Clear()

```

### CopyValues(RFCTable)

Sets values for all cells that have a matching column name

```csharp
public void CopyValues(RFCTable copyFrom)

```

#### Parameters

`copyFrom` [RFCTable](./)

### NewRows()

Replaces the current `ERPConnect.RFCTable.Rows` instance with a new one

```csharp
public void NewRows()

```

### RetrieveColumnsByStructure(string, IR3Connection)

Retrieves the columns directly from the SAP Data Dictionary. The RFCColumn collection will be overwritten

```csharp
public void RetrieveColumnsByStructure(string structureName, IR3Connection connection)

```

#### Parameters

`structureName` [string](https://learn.microsoft.com/dotnet/api/system.string)

DDIC name of the structure

`connection` [IR3Connection](../ERPConnect.IR3Connection/)

R3Connection object

### RowLength()

Returns the width of one table row

```csharp
public int RowLength()

```

#### Returns

[int](https://learn.microsoft.com/dotnet/api/system.int32)

The width of a table row

### ToADOTable()

Converts the RFCTable object into an ADO.NET DataTable object

```csharp
public DataTable ToADOTable()

```

#### Returns

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

A newly created ADO.NET DataTable

### ToADOTable(string[])

Converts the RFCTable object into an ADO.NET DataTable object

```csharp
public DataTable ToADOTable(string[] columnNames)

```

#### Parameters

`columnNames` [string](https://learn.microsoft.com/dotnet/api/system.string)[]

Column array

#### Returns

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

A newly created DataTable object

### ToADOTable(string)

Converts the RFCTable object into an ADO.NET DataTable object

```csharp
public DataTable ToADOTable(string filter)

```

#### Parameters

`filter` [string](https://learn.microsoft.com/dotnet/api/system.string)

Filter expression

#### Returns

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

A newly created DataTable object

### ToADOTable(string[], string)

Converts the RFCTable object into an ADO.NET DataTable object

```csharp
public DataTable ToADOTable(string[] columnNames, string filter)

```

#### Parameters

`columnNames` [string](https://learn.microsoft.com/dotnet/api/system.string)[]

Column array

`filter` [string](https://learn.microsoft.com/dotnet/api/system.string)

Filter expression

#### Returns

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

A newly created DataTable object

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

This represents a set of tables to be exchanged with a function module

```csharp
public sealed class RFCTableCollection : IList<RFCTable>, ICollection<RFCTable>, IEnumerable<RFCTable>, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCTableCollection](./)

#### Implements

[IList<RFCTable>](https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1), [ICollection<RFCTable>](https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1), [IEnumerable<RFCTable>](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCTableCollection()

```csharp
public RFCTableCollection()

```

### RFCTableCollection(int)

```csharp
public RFCTableCollection(int capacity)

```

#### Parameters

`capacity` [int](https://learn.microsoft.com/dotnet/api/system.int32)

## Properties

### Count

```csharp
public int Count { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### this[int]

returns a RFCTable object by a given index

```csharp
public RFCTable this[int index] { get; set; }

```

#### Property Value

[RFCTable](../ERPConnect.RFCTable/)

### this[string]

returns a RFCTable object by a given table name

```csharp
public RFCTable this[string name] { get; set; }

```

#### Property Value

[RFCTable](../ERPConnect.RFCTable/)

## Methods

### Add(RFCTable)

Adds a RFCTable object to the collection

```csharp
public void Add(RFCTable newTable)

```

#### Parameters

`newTable` [RFCTable](../ERPConnect.RFCTable/)

RFCTable object

### Add(string)

Create a new RFCTable by a given name a return the new RFCTable object

```csharp
public RFCTable Add(string name)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the table as provided in the function module

#### Returns

[RFCTable](../ERPConnect.RFCTable/)

A RFCTable object

### Clear()

```csharp
public void Clear()

```

### Contains(RFCTable)

```csharp
public bool Contains(RFCTable item)

```

#### Parameters

`item` [RFCTable](../ERPConnect.RFCTable/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Contains(string)

```csharp
public bool Contains(string name)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### CopyTo(RFCTable[], int)

```csharp
public void CopyTo(RFCTable[] array, int arrayIndex)

```

#### Parameters

`array` [RFCTable](../ERPConnect.RFCTable/)[]

`arrayIndex` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### GetEnumerator()

```csharp
public IEnumerator<RFCTable> GetEnumerator()

```

#### Returns

[IEnumerator](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1)\<[RFCTable](../ERPConnect.RFCTable/)>

### IndexOf(RFCTable)

```csharp
public int IndexOf(RFCTable item)

```

#### Parameters

`item` [RFCTable](../ERPConnect.RFCTable/)

#### Returns

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Insert(int, RFCTable)

```csharp
public void Insert(int index, RFCTable item)

```

#### Parameters

`index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

`item` [RFCTable](../ERPConnect.RFCTable/)

### Remove(RFCTable)

```csharp
public bool Remove(RFCTable item)

```

#### Parameters

`item` [RFCTable](../ERPConnect.RFCTable/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### RemoveAt(int)

```csharp
public void RemoveAt(int index)

```

#### Parameters

`index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### RemoveAt(string)

```csharp
public void RemoveAt(string parameterName)

```

#### Parameters

`parameterName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

RFCTableColumn object represent an one column in a table or a structure to be exchanged with a function module

```csharp
public sealed class RFCTableColumn

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCTableColumn](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCTableColumn(string)

return a RFCTableColumn object by a given name

```csharp
public RFCTableColumn(string name)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name auf the column

### RFCTableColumn(string, int, RFCTYPE)

constructs a RFCTableColumn object

```csharp
public RFCTableColumn(string name, int length, RFCTYPE type)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the column

`length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of the column

`type` [RFCTYPE](../ERPConnect.RFCTYPE/)

RFC type of the column

### RFCTableColumn(string, int, int, RFCTYPE)

constucts a RFCTableColumn object

```csharp
public RFCTableColumn(string name, int length, int decimals, RFCTYPE type)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the column

`length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of the column (be careful with BCD types)

`decimals` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Number of decimal digits

`type` [RFCTYPE](../ERPConnect.RFCTYPE/)

RFC type

## Properties

### Decimals

Number of decimal digits of the table column

```csharp
public int Decimals { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### IsNonStructureLineType

Gets a value which indicates if this column is a wrapper column for a non-structure line type (single value or table). This is needed because RFCTable objects can only have RFCStructure objects as lines

```csharp
public bool IsNonStructureLineType { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Length

Length of the column

```csharp
public int Length { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Name

Name of the column

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### NestedColumns

Gets or sets the columns nested inside this column

```csharp
public RFCTableColumnCollection NestedColumns { get; set; }

```

#### Property Value

[RFCTableColumnCollection](../ERPConnect.RFCTableColumnCollection/)

### Offset

Offset of the column

```csharp
public int Offset { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Tag

A tag that can be used for everything

```csharp
public object Tag { get; set; }

```

#### Property Value

[object](https://learn.microsoft.com/dotnet/api/system.object)

### Type

RFC type of the table column

```csharp
public RFCTYPE Type { get; set; }

```

#### Property Value

[RFCTYPE](../ERPConnect.RFCTYPE/)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Represents a collection of RFCTableColumn objects for a RFCTable or a RFCStructure.

```csharp
public sealed class RFCTableColumnCollection : IList<RFCTableColumn>, ICollection<RFCTableColumn>, IEnumerable<RFCTableColumn>, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [RFCTableColumnCollection](./)

#### Implements

[IList<RFCTableColumn>](https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1), [ICollection<RFCTableColumn>](https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1), [IEnumerable<RFCTableColumn>](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RFCTableColumnCollection()

```csharp
public RFCTableColumnCollection()

```

## Properties

### ABAPStructureName

The name of the ABAP structure

```csharp
public string ABAPStructureName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Count

```csharp
public int Count { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Includes

```csharp
public IList<IncludeStructure> Includes { get; }

```

#### Property Value

[IList](https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1)\<[IncludeStructure](../ERPConnect.IncludeStructure/)>

### RowLength

Gets or sets the number bytes required for a table row / structure based on these columns

```csharp
public int RowLength { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### this[int]

returns a single RFCTableColumn object from the collection

```csharp
public RFCTableColumn this[int index] { get; set; }

```

#### Property Value

[RFCTableColumn](../ERPConnect.RFCTableColumn/)

### this[string]

returns a single RFCTableColumn object from the collection

```csharp
public RFCTableColumn this[string columnName] { get; set; }

```

#### Property Value

[RFCTableColumn](../ERPConnect.RFCTableColumn/)

## Methods

### Add(RFCTableColumn)

Adds a new RFCTableColumn object to the collection.

```csharp
public void Add(RFCTableColumn newColumn)

```

#### Parameters

`newColumn` [RFCTableColumn](../ERPConnect.RFCTableColumn/)

### Add(string, int, int, RFCTYPE, int)

Adds a new RFCTableColumn object to the collection.

```csharp
public void Add(string name, int length, int decimals, RFCTYPE type, int offset)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the column as provieded in the DDIC

`length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of the column

`decimals` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Number of decimal digits

`type` [RFCTYPE](../ERPConnect.RFCTYPE/)

RFC type of the column

`offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Byte-Offset

### Add(string, int, int, RFCTYPE)

Adds a new RFCTableColumn object to the collection.

```csharp
public void Add(string name, int length, int decimals, RFCTYPE type)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the column as provieded in the DDIC

`length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of the column

`decimals` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Number of decimal digits

`type` [RFCTYPE](../ERPConnect.RFCTYPE/)

RFC type of the column

### Add(string, int, RFCTYPE)

Adds a new RFCTableColumn object to the collection.

```csharp
public void Add(string name, int length, RFCTYPE type)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the column as provieded in the DDIC

`length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of the column

`type` [RFCTYPE](../ERPConnect.RFCTYPE/)

RFC type of the column

### Clear()

```csharp
public void Clear()

```

### Contains(RFCTableColumn)

```csharp
public bool Contains(RFCTableColumn item)

```

#### Parameters

`item` [RFCTableColumn](../ERPConnect.RFCTableColumn/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Contains(string)

```csharp
public bool Contains(string columnName)

```

#### Parameters

`columnName` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### CopyTo(RFCTableColumn[], int)

```csharp
public void CopyTo(RFCTableColumn[] array, int arrayIndex)

```

#### Parameters

`array` [RFCTableColumn](../ERPConnect.RFCTableColumn/)[]

`arrayIndex` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### GetEnumerator()

```csharp
public IEnumerator<RFCTableColumn> GetEnumerator()

```

#### Returns

[IEnumerator](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1)\<[RFCTableColumn](../ERPConnect.RFCTableColumn/)>

### IndexOf(RFCTableColumn)

```csharp
public int IndexOf(RFCTableColumn item)

```

#### Parameters

`item` [RFCTableColumn](../ERPConnect.RFCTableColumn/)

#### Returns

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Insert(int, RFCTableColumn)

```csharp
public void Insert(int index, RFCTableColumn item)

```

#### Parameters

`index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

`item` [RFCTableColumn](../ERPConnect.RFCTableColumn/)

### Remove(RFCTableColumn)

```csharp
public bool Remove(RFCTableColumn item)

```

#### Parameters

`item` [RFCTableColumn](../ERPConnect.RFCTableColumn/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### RemoveAt(int)

```csharp
public void RemoveAt(int index)

```

#### Parameters

`index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### RemoveAt(string)

```csharp
public void RemoveAt(string columnName)

```

#### Parameters

`columnName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

The exception that is thrown when the RFC library could not be used (e. g. because it is missing)

```csharp
public sealed class RfcLibraryException : ERPException, ISerializable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Exception](https://learn.microsoft.com/dotnet/api/system.exception) ← [ERPException](../ERPConnect.ERPException/) ← [RfcLibraryException](./)

#### Implements

[ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable)

#### Inherited Members

[ERPException.GetObjectData(SerializationInfo, StreamingContext)](../ERPConnect.ERPException/#ERPConnect_ERPException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_), [ERPException.ABAPException](../ERPConnect.ERPException/#ERPConnect_ERPException_ABAPException), [Exception.GetBaseException()](https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception), [Exception.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata), [Exception.ToString()](https://learn.microsoft.com/dotnet/api/system.exception.tostring), [Exception.GetType()](https://learn.microsoft.com/dotnet/api/system.exception.gettype), [Exception.TargetSite](https://learn.microsoft.com/dotnet/api/system.exception.targetsite), [Exception.StackTrace](https://learn.microsoft.com/dotnet/api/system.exception.stacktrace), [Exception.Message](https://learn.microsoft.com/dotnet/api/system.exception.message), [Exception.Data](https://learn.microsoft.com/dotnet/api/system.exception.data), [Exception.InnerException](https://learn.microsoft.com/dotnet/api/system.exception.innerexception), [Exception.HelpLink](https://learn.microsoft.com/dotnet/api/system.exception.helplink), [Exception.Source](https://learn.microsoft.com/dotnet/api/system.exception.source), [Exception.HResult](https://learn.microsoft.com/dotnet/api/system.exception.hresult), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class SAPEncodingInfo

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [SAPEncodingInfo](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### DefaultLittleEndian

SAP codepage 1100, little endian

```csharp
public static SAPEncodingInfo DefaultLittleEndian { get; }

```

#### Property Value

[SAPEncodingInfo](./)

### IsBigEndian

```csharp
public bool IsBigEndian { get; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### SAPCodepage

```csharp
public ushort SAPCodepage { get; }

```

#### Property Value

[ushort](https://learn.microsoft.com/dotnet/api/system.uint16)

### TwoBytesPerCharacter

```csharp
public bool TwoBytesPerCharacter { get; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### UTF16BigEndian

SAP codepage 4102, big endian

```csharp
public static SAPEncodingInfo UTF16BigEndian { get; }

```

#### Property Value

[SAPEncodingInfo](./)

### UTF16LittleEndian

SAP codepage 4103, little endian

```csharp
public static SAPEncodingInfo UTF16LittleEndian { get; }

```

#### Property Value

[SAPEncodingInfo](./)

## Methods

### GetEncoding()

```csharp
public Encoding GetEncoding()

```

#### Returns

[Encoding](https://learn.microsoft.com/dotnet/api/system.text.encoding)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Specifies the GSSAPI mechanism for SNC connections

```csharp
public enum SNCMechanism

```

## Fields

`Kerberos5 = 1`

Kerberos 5 Security Service Provider

`NTLM = 0`

NTLM Security Service Provider

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Specifies the quality of protection (security level) for SNC connections

```csharp
public enum SNCQualityOfProtection

```

## Fields

`Authentication = 1`

Authentication only

`Default = 8`

Default protection

`Integrity = 2`

Integrity protection

`Maximum = 9`

Maximum available protection

`Privacy = 3`

Privacy protection

`Undefined = 0`

QoP is undefined

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Represents settings for SNC connections

```csharp
public sealed class SNCSettings

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [SNCSettings](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### SNCSettings()

```csharp
public SNCSettings()

```

## Properties

### Enabled

Gets or sets a value indicating whether SNC is used or not

```csharp
public bool Enabled { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### ExternalIdData

When authenticating via External ID, provide the username etc. using this property. Please make sure to set the correct `ERPConnect.SNCSettings.ExternalIdType` as well.

```csharp
public string ExternalIdData { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### ExternalIdType

The type of `ERPConnect.SNCSettings.ExternalIdData`.

```csharp
public ExternalIdType ExternalIdType { get; set; }

```

#### Property Value

[ExternalIdType](../ERPConnect.ExternalIdType/)

### LibraryPath

Gets or sets the path to the SNC DLL

```csharp
public string LibraryPath { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Mechanism

Gets or sets the GSS-API mechansim used for SNC connections

```csharp
public SNCMechanism Mechanism { get; set; }

```

#### Property Value

[SNCMechanism](../ERPConnect.SNCMechanism/)

### OwnName

Gets or sets the own SNC name

```csharp
public string OwnName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### PartnerName

Gets or sets the SNC partner name

```csharp
public string PartnerName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### QualityOfProtection

Gets or sets the preferred quality of protection (security level) for SNC connections

```csharp
public SNCQualityOfProtection QualityOfProtection { get; set; }

```

#### Property Value

[SNCQualityOfProtection](../ERPConnect.SNCQualityOfProtection/)

### RunImpersonated

Impersonates a different user when opening a new RFC connection. Typically used for

```
WindowsIdentity.RunImpersonated()
```

. This property allows to reduce the code that runs in the impersonated context to a minimum, e. g. to avoid access restriction issues.

```csharp
public Action<Action> RunImpersonated { get; set; }

```

#### Property Value

[Action](https://learn.microsoft.com/dotnet/api/system.action-1)\<[Action](https://learn.microsoft.com/dotnet/api/system.action)>

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class SlimXmlException : Exception, ISerializable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Exception](https://learn.microsoft.com/dotnet/api/system.exception) ← [SlimXmlException](./)

#### Implements

[ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable)

#### Inherited Members

[Exception.GetBaseException()](https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception), [Exception.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata), [Exception.ToString()](https://learn.microsoft.com/dotnet/api/system.exception.tostring), [Exception.GetType()](https://learn.microsoft.com/dotnet/api/system.exception.gettype), [Exception.TargetSite](https://learn.microsoft.com/dotnet/api/system.exception.targetsite), [Exception.StackTrace](https://learn.microsoft.com/dotnet/api/system.exception.stacktrace), [Exception.Message](https://learn.microsoft.com/dotnet/api/system.exception.message), [Exception.Data](https://learn.microsoft.com/dotnet/api/system.exception.data), [Exception.InnerException](https://learn.microsoft.com/dotnet/api/system.exception.innerexception), [Exception.HelpLink](https://learn.microsoft.com/dotnet/api/system.exception.helplink), [Exception.Source](https://learn.microsoft.com/dotnet/api/system.exception.source), [Exception.HResult](https://learn.microsoft.com/dotnet/api/system.exception.hresult), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### SlimXmlException(string)

```csharp
public SlimXmlException(string message)

```

#### Parameters

`message` [string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public enum SlimXmlReadResult

```

## Fields

`Content = 2`

`EOF = 4`

`EmptyElementTag = 5`

`EndTag = 3`

`None = 0`

`StartTag = 1`

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

Lightweight XML reader, that is able to process somewhat invalid XML (e. g. unescaped control characters in content)

```csharp
public sealed class SlimXmlReader

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [SlimXmlReader](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### SlimXmlReader(TextReader)

```csharp
public SlimXmlReader(TextReader textReader)

```

#### Parameters

`textReader` [TextReader](https://learn.microsoft.com/dotnet/api/system.io.textreader)

## Methods

### BufferToString()

```csharp
public string BufferToString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### GetElementName()

```csharp
public string GetElementName()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Read()

```csharp
public SlimXmlReadResult Read()

```

#### Returns

[SlimXmlReadResult](../ERPConnect.SlimXmlReadResult/)

### ReadElementString()

Assumes current position is `ERPConnect.SlimXmlReadResult.StartTag`. Expects the content of the element to contain no child elements. Returns the unescaped content and advances the current position to `ERPConnect.SlimXmlReadResult.EndTag`.

```csharp
public string ReadElementString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### ReadElements(Action<string>)

```csharp
public void ReadElements(Action<string> readElement)

```

#### Parameters

`readElement` [Action](https://learn.microsoft.com/dotnet/api/system.action-1)\<[string](https://learn.microsoft.com/dotnet/api/system.string)>

### ReadRootElement()

```csharp
public string ReadRootElement()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Skip()

```csharp
public void Skip()

```

### Unescape(string)

```csharp
public static string Unescape(string content)

```

#### Parameters

`content` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class TlsSettings

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [TlsSettings](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### TlsSettings()

```csharp
public TlsSettings()

```

## Properties

### ClientCertificateLogon

Gets or sets whether a certificate found in the `ERPConnect.TlsSettings.ClientPse` should be used for authentication instead of user and password. If unset (null) the default NetWeaver library value is used. Corresponds to NetWeaver connection parameter "TLS_CLIENT_CERTIFICATE_LOGON".

```csharp
public bool? ClientCertificateLogon { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)?

### ClientPse

The name of the client PSE file to use. When using `ERPConnect.TlsSettings.ClientCertificateLogon` it should also contain the client certificate used for authentication. Corresponds to NetWeaver connection parameter "TLS_CLIENT_PSE".

```csharp
public string ClientPse { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### CryptoLibrary

Gets or sets the path to the crypto library to use. The library will be loaded when opening an `ERPConnect.R3Connection` and cannot be changed once loaded for the current process, even when using a different `ERPConnect.R3Connection`. Corresponds fo NetWeaver ini parameter "TLS_SAPCRYPTOLIB".

```csharp
public string CryptoLibrary { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### IsEnabled

Gets or sets whether TLS is enabled. If unset (null) the default NetWeaver library value is used. Corresponds to NetWeaver connection parameter "USE_TLS".

```csharp
public bool? IsEnabled { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)?

### TrustAll

Gets or sets whether certificate trust checks should be skipped. If unset (null) the default NetWeaver library value is used. Corresponds to NetWeaver connection parameter "TLS_TRUST_ALL".

```csharp
public bool? TrustAll { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)?

Namespace: [ERPConnect](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public enum TraceLevel

```

## Fields

`Brief = 1`

`Detailed = 3`

`Full = 4`

`Off = 0`

`Verbose = 2`

### Classes

[BWCube](ERPConnect.BW.BWCube/)

[BWVariable](ERPConnect.BW.BWVariable/)

[BWVariableCollection](ERPConnect.BW.BWVariableCollection/)

[Dimension](ERPConnect.BW.Dimension/)

[DimensionCollection](ERPConnect.BW.DimensionCollection/)

[Hierarchy](ERPConnect.BW.Hierarchy/)

[HierarchyCollection](ERPConnect.BW.HierarchyCollection/)

[HierarchyLevel](ERPConnect.BW.HierarchyLevel/)

[HierarchyLevelCollection](ERPConnect.BW.HierarchyLevelCollection/)

[MDXExecuter](ERPConnect.BW.MDXExecuter/)

[MembersDataTable](ERPConnect.BW.MembersDataTable/)

[MembersRow](ERPConnect.BW.MembersRow/)

[Property](ERPConnect.BW.Property/)

[PropertyCollection](ERPConnect.BW.PropertyCollection/)

[Slicer](ERPConnect.BW.Slicer/)

### Enums

[BWVariableSelectionType](ERPConnect.BW.BWVariableSelectionType/)

[BWVariableType](ERPConnect.BW.BWVariableType/)

[DimensionType](ERPConnect.BW.DimensionType/)

[SlicerType](ERPConnect.BW.SlicerType/)

### Delegates

[MDXExecuter.OnDebuggingDetails](ERPConnect.BW.MDXExecuter.OnDebuggingDetails/)

[BWCube.OnIncomingPackage](ERPConnect.BW.BWCube.OnIncomingPackage/)

[MDXExecuter.OnIncomingPackage](ERPConnect.BW.MDXExecuter.OnIncomingPackage/)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void BWCube.OnIncomingPackage(BWCube Sender, MDXExecuter mdxexecuter, DataTable PackageResult)

```

#### Parameters

`Sender` [BWCube](../ERPConnect.BW.BWCube/)

`mdxexecuter` [MDXExecuter](../ERPConnect.BW.MDXExecuter/)

`PackageResult` [DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

BWCube represents a BW Cube to extract data from

```csharp
public class BWCube

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [BWCube](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### BWCube(R3Connection)

Constructs a BWCube object

```csharp
public BWCube(R3Connection connection)

```

#### Parameters

`connection` [R3Connection](../../erpconnect/ERPConnect.R3Connection/)

Reference to a valid R3Connection object

## Properties

### AdjustFlatOutputColumnsOrdinal

DO NOT USE!!! FOR INTERNAL USE ONLY!!!!

```csharp
public bool AdjustFlatOutputColumnsOrdinal { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Connection

Reference to a valid R3Connection object

```csharp
public R3Connection Connection { get; set; }

```

#### Property Value

[R3Connection](../../erpconnect/ERPConnect.R3Connection/)

### Dimensions

This collection repesents all dimensions of the BW Cube / BW Query

```csharp
public DimensionCollection Dimensions { get; set; }

```

#### Property Value

[DimensionCollection](../ERPConnect.BW.DimensionCollection/)

### Measures

This collection repesents all measures of the BW Cube / BW Query

```csharp
public DimensionCollection Measures { get; set; }

```

#### Property Value

[DimensionCollection](../ERPConnect.BW.DimensionCollection/)

### Name

Name of the cube

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### PackageSize

Determines if the data should be retreived in packages and if so, how many rows should be in one package

```csharp
public int PackageSize { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### UseFormattedValue

Determines if the data should be formatted as defined in the query designer (e.g. number of decimals or factor)

```csharp
public bool UseFormattedValue { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### UseNewOlapBapis

Gets or sets a value indicating whether the new OLAP BAPIs should be used for the extraction (see SAP note 1232751)

```csharp
public bool UseNewOlapBapis { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Variables

This collection repesents all variables of the BW Query

```csharp
public BWVariableCollection Variables { get; set; }

```

#### Property Value

[BWVariableCollection](../ERPConnect.BW.BWVariableCollection/)

## Methods

### CreateCube(string)

Constructs a BWCube object with all its dimensions, properties and measures

```csharp
public void CreateCube(string cubeName)

```

#### Parameters

`cubeName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the Cube or Query Cube (e.g. 0D_DECU or 0D_DECU/VARDEMO01)

### Execute()

Executes the cube / query extraction

```csharp
public DataTable Execute()

```

#### Returns

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

DataTable object with flat result

### GetFlatMDX()

Returns a MDX string that represents the query for the cube's data

```csharp
public string GetFlatMDX()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

A MDX string

### LoadFromXML(string)

Load a BWCube object hierachy from an XML file

```csharp
public void LoadFromXML(string FileName)

```

#### Parameters

`FileName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Filename

### LoadFromXML(StreamReader)

Load a BWCube object hierachy from an XML file

```csharp
public void LoadFromXML(StreamReader reader)

```

#### Parameters

`reader` [StreamReader](https://learn.microsoft.com/dotnet/api/system.io.streamreader)

StreamReader to XML resource

### LoadFromXMLString(string)

Load a BWCube object hierachy from an XML string

```csharp
public void LoadFromXMLString(string XMLString)

```

#### Parameters

`XMLString` [string](https://learn.microsoft.com/dotnet/api/system.string)

XML string

### RefreshMetaData()

```csharp
public void RefreshMetaData()

```

### RefreshMetaData(bool)

For internal use only

```csharp
public void RefreshMetaData(bool onlyStructures)

```

#### Parameters

`onlyStructures` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### SaveToXML(string)

Saves the current object to XML

```csharp
public void SaveToXML(string Filename)

```

#### Parameters

`Filename` [string](https://learn.microsoft.com/dotnet/api/system.string)

File name

### SaveToXML()

Saves the current object to XML

```csharp
public string SaveToXML()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

A string which contains the XML file

### SelectAllForFlatMDX()

Do not use! For internal use only

```csharp
public void SelectAllForFlatMDX()

```

### SetBWDateFlags()

For internal use only

```csharp
public void SetBWDateFlags()

```

### ToString()

Returns an object description text

```csharp
public override string ToString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

Object description text

### IncomingPackage

IncomingPackage is fired, when addtional data packages are fetched from SAP.

```csharp
public event BWCube.OnIncomingPackage IncomingPackage

```

#### Event Type

[BWCube](./).[OnIncomingPackage](../ERPConnect.BW.BWCube.OnIncomingPackage/)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

A cube's variable

```csharp
public class BWVariable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [BWVariable](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### BWVariable()

Constructs a new BWVariable object

```csharp
public BWVariable()

```

### BWVariable(BWCube, string, string, string, bool, BWVariableSelectionType, string, BWVariableType)

Constructs a new BWVariable object

```csharp
public BWVariable(BWCube cube, string name, string caption, string dataType, bool isRequired, BWVariableSelectionType selectionType, string referenceDimension, BWVariableType type)

```

#### Parameters

`cube` [BWCube](../ERPConnect.BW.BWCube/)

Reference to the cube the variable is belonging to

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the variable

`caption` [string](https://learn.microsoft.com/dotnet/api/system.string)

Caption or description of the variable

`dataType` [string](https://learn.microsoft.com/dotnet/api/system.string)

DataType of the variable

`isRequired` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Defines if this variable is obligatory or not

`selectionType` [BWVariableSelectionType](../ERPConnect.BW.BWVariableSelectionType/)

Defines the type of the variable (complex, single or interval)

`referenceDimension` [string](https://learn.microsoft.com/dotnet/api/system.string)

Defines which dimension this variable refers to

`type` [BWVariableType](../ERPConnect.BW.BWVariableType/)

Defines if the variable is numeric, member or hierarchy

## Properties

### Caption

Caption or description of the variable

```csharp
public string Caption { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### ComplexRanges

Represents a collection of ranges when the selection type is complex

```csharp
public RangeCollection ComplexRanges { get; set; }

```

#### Property Value

[RangeCollection](../../erpconnect-queries/ERPConnect.Queries.RangeCollection/)

### Cube

Reference to the cube the variable is belonging to

```csharp
public BWCube Cube { get; set; }

```

#### Property Value

[BWCube](../ERPConnect.BW.BWCube/)

### DataType

DataType of the variable

```csharp
public string DataType { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Name

Name of the variable

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### ReferenceDimensionName

Defines which dimension this variable refers to

```csharp
public string ReferenceDimensionName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Required

Defines if this variable is obligatory or not

```csharp
public bool Required { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### SelectionType

Defines the type of the variable (complex, single or interval)

```csharp
public BWVariableSelectionType SelectionType { get; set; }

```

#### Property Value

[BWVariableSelectionType](../ERPConnect.BW.BWVariableSelectionType/)

### SingleRange

Represents a single range when the selection type is interval or single

```csharp
public Range SingleRange { get; set; }

```

#### Property Value

[Range](../../erpconnect-queries/ERPConnect.Queries.Range/)

### Type

Defines if the variable is numeric, member or hierarchy

```csharp
public BWVariableType Type { get; set; }

```

#### Property Value

[BWVariableType](../ERPConnect.BW.BWVariableType/)

## Methods

### GetMembers(int, int)

Returns all members of this variable (can be used for designing a value help)

```csharp
public MembersDataTable GetMembers(int StartRow, int EndRow)

```

#### Parameters

`StartRow` [int](https://learn.microsoft.com/dotnet/api/system.int32)

The row number the selection starts with

`EndRow` [int](https://learn.microsoft.com/dotnet/api/system.int32)

The row number the selection ends with

#### Returns

[MembersDataTable](../ERPConnect.BW.MembersDataTable/)

A DataTable that contains the members

### ToString()

Converts this object to string

```csharp
public override string ToString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

The string

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

A class that holds a set of BWVariable objects

```csharp
public class BWVariableCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [BWVariableCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.OnSet(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onset), [CollectionBase.OnInsert(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsert), [CollectionBase.OnClear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclear), [CollectionBase.OnRemove(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremove), [CollectionBase.OnValidate(object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onvalidate), [CollectionBase.OnSetComplete(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onsetcomplete), [CollectionBase.OnInsertComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsertcomplete), [CollectionBase.OnClearComplete()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclearcomplete), [CollectionBase.OnRemoveComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremovecomplete), [CollectionBase.InnerList](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.innerlist), [CollectionBase.List](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.list), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### BWVariableCollection()

Constructs a new BWVariableCollection object

```csharp
public BWVariableCollection()

```

## Properties

### this[int]

Returns the BWVariable object at a given index

```csharp
public virtual BWVariable this[int Index] { get; set; }

```

#### Property Value

[BWVariable](../ERPConnect.BW.BWVariable/)

### this[string]

Returns the BWVariable object with the given name

```csharp
public virtual BWVariable this[string Name] { get; set; }

```

#### Property Value

[BWVariable](../ERPConnect.BW.BWVariable/)

## Methods

### Add(BWVariable)

Adds a new BWVariable object to the collection

```csharp
public virtual void Add(BWVariable NewParameter)

```

#### Parameters

`NewParameter` [BWVariable](../ERPConnect.BW.BWVariable/)

A new BWVariable object

### Add(BWCube, string, string, string, bool, BWVariableSelectionType, string, BWVariableType)

Adds a new BWVariable object to the collection

```csharp
public virtual BWVariable Add(BWCube Cube, string Name, string Caption, string DataType, bool Required, BWVariableSelectionType SelectionType, string ReferenceDimensionName, BWVariableType Type)

```

#### Parameters

`Cube` [BWCube](../ERPConnect.BW.BWCube/)

Reference to the cube the variable is belonging to

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the variable

`Caption` [string](https://learn.microsoft.com/dotnet/api/system.string)

Caption or description of the variable

`DataType` [string](https://learn.microsoft.com/dotnet/api/system.string)

DataType of the variable

`Required` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Defines if this variable is obligatory or not

`SelectionType` [BWVariableSelectionType](../ERPConnect.BW.BWVariableSelectionType/)

Defines the type of the variable (complex, single or interval)

`ReferenceDimensionName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Defines which dimension this variable refers to

`Type` [BWVariableType](../ERPConnect.BW.BWVariableType/)

Defines if the variable is numeric, member or hierarchy

#### Returns

[BWVariable](../ERPConnect.BW.BWVariable/)

The new BWVariable object

### Insert(int, BWVariable)

Insert a BWVariable object into the collection at a given index

```csharp
public virtual void Insert(int Index, BWVariable NewParameter)

```

#### Parameters

`Index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

The ordinal number where the BWVariable object is to be inserted at

`NewParameter` [BWVariable](../ERPConnect.BW.BWVariable/)

The BWVariable object to be inserted

### Remove(string)

```csharp
public virtual void Remove(string Name)

```

#### Parameters

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

### ToString()

Converts the object to a string

```csharp
public override string ToString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

The string

### TryGetValue(string, out BWVariable)

```csharp
public bool TryGetValue(string name, out BWVariable value)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

`value` [BWVariable](../ERPConnect.BW.BWVariable/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

This enum represents the SelectionType of a BWVariable

```csharp
public enum BWVariableSelectionType

```

## Fields

`Complex = 2`

The variable consists of a complex range (see BWCube.Ranges for details)

`Interval = 1`

The variable consists of a interval (e.g. MATNR beween '100' and '200')

`MultipleSingle = 3`

Multiple single values

`Single = 0`

The Variable consists of a single value

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

This enum represents the type of the variable (Member, Numeric, Hierarchy)

```csharp
public enum BWVariableType

```

## Fields

`Hierarchy = 3`

The variable is a hierarchy

`Member = 1`

The variable references to a dimension and only members of this dimension a valid for this variable

`Numeric = 2`

The variable is numeric

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

A cube's dimension

```csharp
public class Dimension

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Dimension](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Dimension()

Constructs a new, empty dimension

```csharp
public Dimension()

```

### Dimension(R3Connection, BWCube, string, string, string, string, DimensionType)

Constructs a new dimension that is ready to use

```csharp
public Dimension(R3Connection Connection, BWCube Cube, string Name, string UniqueName, string Description, string Caption, DimensionType Type)

```

#### Parameters

`Connection` [R3Connection](../../erpconnect/ERPConnect.R3Connection/)

A valid connection object

`Cube` [BWCube](../ERPConnect.BW.BWCube/)

A BWCube object

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

The name of the dimension

`UniqueName` [string](https://learn.microsoft.com/dotnet/api/system.string)

The unique name of the dimension

`Description` [string](https://learn.microsoft.com/dotnet/api/system.string)

The description of the dimension

`Caption` [string](https://learn.microsoft.com/dotnet/api/system.string)

The caption of the dimension

`Type` [DimensionType](../ERPConnect.BW.DimensionType/)

The type of the dimension (measure, normal or time)

### Dimension(R3Connection, BWCube, string, string, string, string, DimensionType, string, int)

Constructs a new dimension that is ready to use

```csharp
public Dimension(R3Connection Connection, BWCube Cube, string Name, string UniqueName, string Description, string Caption, DimensionType Type, string DataType, int Decimals)

```

#### Parameters

`Connection` [R3Connection](../../erpconnect/ERPConnect.R3Connection/)

A valid connection object

`Cube` [BWCube](../ERPConnect.BW.BWCube/)

A BWCube object

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

The name of the dimension

`UniqueName` [string](https://learn.microsoft.com/dotnet/api/system.string)

The unique name of the dimension

`Description` [string](https://learn.microsoft.com/dotnet/api/system.string)

The description of the dimension

`Caption` [string](https://learn.microsoft.com/dotnet/api/system.string)

The caption of the dimension

`Type` [DimensionType](../ERPConnect.BW.DimensionType/)

The type of the dimension (measure, normal or time)

`DataType` [string](https://learn.microsoft.com/dotnet/api/system.string)

The data type of the dimension (e.g. CHAR)

`Decimals` [int](https://learn.microsoft.com/dotnet/api/system.int32)

The number of decimals digits (if the DataType is DEC)

## Properties

### Caption

The caption of the dimension

```csharp
public string Caption { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Connection

A valid connection object

```csharp
public R3Connection Connection { get; set; }

```

#### Property Value

[R3Connection](../../erpconnect/ERPConnect.R3Connection/)

### Cube

Reference to the BWCube object the dimension belongs to

```csharp
public BWCube Cube { get; set; }

```

#### Property Value

[BWCube](../ERPConnect.BW.BWCube/)

### DataType

The data type of the dimension (e.g. CHAR)

```csharp
public string DataType { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Decimals

The number of decimals digits (if the DataType is DEC)

```csharp
public int Decimals { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Description

The description of the dimension

```csharp
public string Description { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### FlatOrdinal

The ordinal number of this dimension when the dimension is contained in the flat mdx statement

```csharp
public int FlatOrdinal { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Hierarchies

A reference to the Hierarchies collection, if this dimension contains hierarchies

```csharp
public HierarchyCollection Hierarchies { get; set; }

```

#### Property Value

[HierarchyCollection](../ERPConnect.BW.HierarchyCollection/)

### IsBWDate

True if it is a Field of type BW Date

```csharp
public bool IsBWDate { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Name

The name of the dimension

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Properties

A reference to the Properties collection of this dimension

```csharp
public PropertyCollection Properties { get; set; }

```

#### Property Value

[PropertyCollection](../ERPConnect.BW.PropertyCollection/)

### SelectForFlatMDX

Defines if this dimension is contained in the flat mdx functionality

```csharp
public bool SelectForFlatMDX { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Type

The type of the dimension (measure, normal or time)

```csharp
public DimensionType Type { get; set; }

```

#### Property Value

[DimensionType](../ERPConnect.BW.DimensionType/)

### UniqueName

The unique name of the dimension

```csharp
public string UniqueName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### GetMembers()

Returns a DataTable object with all members of the dimension

```csharp
public MembersDataTable GetMembers()

```

#### Returns

[MembersDataTable](../ERPConnect.BW.MembersDataTable/)

A DataTable with the members of the dimension

### GetMembers(int, int)

Returns a DataTable object with all members of the dimension

```csharp
public MembersDataTable GetMembers(int StartRow, int EndRow)

```

#### Parameters

`StartRow` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Start row

`EndRow` [int](https://learn.microsoft.com/dotnet/api/system.int32)

End row

#### Returns

[MembersDataTable](../ERPConnect.BW.MembersDataTable/)

A DataTable with the members of the dimension

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

A collection of BWDimension objects

```csharp
public class DimensionCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [DimensionCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.OnSet(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onset), [CollectionBase.OnInsert(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsert), [CollectionBase.OnClear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclear), [CollectionBase.OnRemove(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremove), [CollectionBase.OnValidate(object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onvalidate), [CollectionBase.OnSetComplete(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onsetcomplete), [CollectionBase.OnInsertComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsertcomplete), [CollectionBase.OnClearComplete()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclearcomplete), [CollectionBase.OnRemoveComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremovecomplete), [CollectionBase.InnerList](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.innerlist), [CollectionBase.List](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.list), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### DimensionCollection()

Constructs a new DimensionCollection object

```csharp
public DimensionCollection()

```

## Properties

### this[int]

Returns a BWDimension object at a given position

```csharp
public virtual Dimension this[int Index] { get; set; }

```

#### Property Value

[Dimension](../ERPConnect.BW.Dimension/)

### this[string]

Returns a BWDimension object for a given name

```csharp
public virtual Dimension this[string UniqueName] { get; set; }

```

#### Property Value

[Dimension](../ERPConnect.BW.Dimension/)

## Methods

### Add(Dimension)

Adds an existing BWDimension object to the collection

```csharp
public virtual void Add(Dimension NewParameter)

```

#### Parameters

`NewParameter` [Dimension](../ERPConnect.BW.Dimension/)

The BWDimension object to be added

### Add(R3Connection, BWCube, string, string, string, string, DimensionType)

Creates a new BWDimension object and adds it to the collection

```csharp
public virtual Dimension Add(R3Connection Connection, BWCube Cube, string Name, string UniqueName, string Description, string Caption, DimensionType Type)

```

#### Parameters

`Connection` [R3Connection](../../erpconnect/ERPConnect.R3Connection/)

A valid connection object

`Cube` [BWCube](../ERPConnect.BW.BWCube/)

A BWCube object

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

The name of the dimension

`UniqueName` [string](https://learn.microsoft.com/dotnet/api/system.string)

The unique name of the dimension

`Description` [string](https://learn.microsoft.com/dotnet/api/system.string)

The description of the dimension

`Caption` [string](https://learn.microsoft.com/dotnet/api/system.string)

The caption of the dimension

`Type` [DimensionType](../ERPConnect.BW.DimensionType/)

The type of the dimension (measure, normal or time)

#### Returns

[Dimension](../ERPConnect.BW.Dimension/)

The BWDimension object that is created and added to the collection

### Add(R3Connection, BWCube, string, string, string, string, DimensionType, string, int)

Creates a new BWDimension object and adds it to the collection

```csharp
public virtual Dimension Add(R3Connection Connection, BWCube Cube, string Name, string UniqueName, string Description, string Caption, DimensionType Type, string DataType, int Decimals)

```

#### Parameters

`Connection` [R3Connection](../../erpconnect/ERPConnect.R3Connection/)

A valid connection object

`Cube` [BWCube](../ERPConnect.BW.BWCube/)

A BWCube object

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

The name of the dimension

`UniqueName` [string](https://learn.microsoft.com/dotnet/api/system.string)

The unique name of the dimension

`Description` [string](https://learn.microsoft.com/dotnet/api/system.string)

The description of the dimension

`Caption` [string](https://learn.microsoft.com/dotnet/api/system.string)

The caption of the dimension

`Type` [DimensionType](../ERPConnect.BW.DimensionType/)

The type of the dimension (measure, normal or time)

`DataType` [string](https://learn.microsoft.com/dotnet/api/system.string)

The data type of the dimension (e.g. CHAR)

`Decimals` [int](https://learn.microsoft.com/dotnet/api/system.int32)

The number of decimals digits (if the DataType is DEC)

#### Returns

[Dimension](../ERPConnect.BW.Dimension/)

The BWDimension object that is created and added to the collection

### ContainsDimension(string)

Detects if the diemnsion with a given name is contained in the collection

```csharp
public bool ContainsDimension(string DimensionName)

```

#### Parameters

`DimensionName` [string](https://learn.microsoft.com/dotnet/api/system.string)

The name of the dimension to be looked up for

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

true / false depending if the dimension is already added to the collection

### Insert(int, Dimension)

Inserts an existing BWDimension object to the collection

```csharp
public virtual void Insert(int Index, Dimension NewParameter)

```

#### Parameters

`Index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

The index where the object should be added at

`NewParameter` [Dimension](../ERPConnect.BW.Dimension/)

The BWDimension object to be added

### Remove(string)

```csharp
public void Remove(string DimensionName)

```

#### Parameters

`DimensionName` [string](https://learn.microsoft.com/dotnet/api/system.string)

### TryGetValue(string, out Dimension)

```csharp
public bool TryGetValue(string uniqueName, out Dimension value)

```

#### Parameters

`uniqueName` [string](https://learn.microsoft.com/dotnet/api/system.string)

`value` [Dimension](../ERPConnect.BW.Dimension/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

Type of the dimension

```csharp
public enum DimensionType

```

## Fields

`Measure = 2`

Measure

`Normal = 0`

Normal

`NormalWithNoAggregation = 4`

Normal with no aggregation

`Time = 1`

Time dimension

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

This class represents a SAP BW Hierarchy

```csharp
public class Hierarchy

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Hierarchy](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Hierarchy()

Constructs a new, empty BW Hierarchy

```csharp
public Hierarchy()

```

### Hierarchy(Dimension, string, string, string)

Constructs a new BW Hierarchy

```csharp
public Hierarchy(Dimension Dimension, string Name, string UniqueName, string Caption)

```

#### Parameters

`Dimension` [Dimension](../ERPConnect.BW.Dimension/)

Reference of the Dimension this hierarchy belongs to

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the hierarchy

`UniqueName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Unique name of the hierarchy

`Caption` [string](https://learn.microsoft.com/dotnet/api/system.string)

A brief description text

## Properties

### Caption

A brief description text

```csharp
public string Caption { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Dimension

Reference of the cube this hierarchy belongs to

```csharp
public Dimension Dimension { get; set; }

```

#### Property Value

[Dimension](../ERPConnect.BW.Dimension/)

### Levels

A collection of levels

```csharp
public HierarchyLevelCollection Levels { get; set; }

```

#### Property Value

[HierarchyLevelCollection](../ERPConnect.BW.HierarchyLevelCollection/)

### Name

Name of the hierarchy

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SelectForFlatMDX

Defines if this hierarchy is contained in the flat mdx functionality

```csharp
public bool SelectForFlatMDX { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### UniqueName

Unique name of the hierarchy

```csharp
public string UniqueName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

This collecton class represents a set of hierarchy objects

```csharp
public class HierarchyCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [HierarchyCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.OnSet(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onset), [CollectionBase.OnInsert(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsert), [CollectionBase.OnClear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclear), [CollectionBase.OnRemove(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremove), [CollectionBase.OnValidate(object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onvalidate), [CollectionBase.OnSetComplete(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onsetcomplete), [CollectionBase.OnInsertComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsertcomplete), [CollectionBase.OnClearComplete()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclearcomplete), [CollectionBase.OnRemoveComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremovecomplete), [CollectionBase.InnerList](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.innerlist), [CollectionBase.List](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.list), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### HierarchyCollection()

Constructs a new HierarchyCollection object

```csharp
public HierarchyCollection()

```

## Properties

### this[int]

Returns an hierarchy object of a given position

```csharp
public virtual Hierarchy this[int Index] { get; set; }

```

#### Property Value

[Hierarchy](../ERPConnect.BW.Hierarchy/)

### this[string]

Returns a Hierarchy object by its name

```csharp
public virtual Hierarchy this[string UniqueName] { get; set; }

```

#### Property Value

[Hierarchy](../ERPConnect.BW.Hierarchy/)

## Methods

### Add(Hierarchy)

Adds an existing Hierarchy object to the collection

```csharp
public virtual void Add(Hierarchy NewParameter)

```

#### Parameters

`NewParameter` [Hierarchy](../ERPConnect.BW.Hierarchy/)

The Hierarchy object to be added

### Add(Dimension, string, string, string)

Adds a new Hierarchy object to the collection

```csharp
public virtual Hierarchy Add(Dimension Dimension, string Name, string UniqueName, string Caption)

```

#### Parameters

`Dimension` [Dimension](../ERPConnect.BW.Dimension/)

Reference to a Dimension object

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the hierarchy

`UniqueName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Unique name of the hierarchy

`Caption` [string](https://learn.microsoft.com/dotnet/api/system.string)

A brief description text

#### Returns

[Hierarchy](../ERPConnect.BW.Hierarchy/)

The hierarchy object that was created and added to the collection

### ContainsHierarchy(string)

Detects if the hierarchy with a given name is contained in the collection

```csharp
public bool ContainsHierarchy(string HierarchyName)

```

#### Parameters

`HierarchyName` [string](https://learn.microsoft.com/dotnet/api/system.string)

The name of the hierarchy to be looked up for

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

true / false depending if the hierarchy is already added to the collection

### Insert(int, Hierarchy)

Inserts an existing Hierarchy object to the collection

```csharp
public virtual void Insert(int Index, Hierarchy NewParameter)

```

#### Parameters

`Index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Oridnal number of the position

`NewParameter` [Hierarchy](../ERPConnect.BW.Hierarchy/)

The Hierarchy object to be added

### TryGetValue(string, out Hierarchy)

```csharp
public bool TryGetValue(string uniqueName, out Hierarchy value)

```

#### Parameters

`uniqueName` [string](https://learn.microsoft.com/dotnet/api/system.string)

`value` [Hierarchy](../ERPConnect.BW.Hierarchy/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

This class represents a SAP BW Hierarchy Level

```csharp
public class HierarchyLevel

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [HierarchyLevel](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### HierarchyLevel()

Constructs a new, empty BW Hierarchy

```csharp
public HierarchyLevel()

```

### HierarchyLevel(Hierarchy, string, string, string)

Constructs a new BW Hierarchy Level

```csharp
public HierarchyLevel(Hierarchy Hierarchy, string Name, string UniqueName, string Caption)

```

#### Parameters

`Hierarchy` [Hierarchy](../ERPConnect.BW.Hierarchy/)

Reference of the Hierarchy this level belongs to

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the hierarchy

`UniqueName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Unique name of the hierarchy

`Caption` [string](https://learn.microsoft.com/dotnet/api/system.string)

A brief description text

## Properties

### Caption

A brief description text

```csharp
public string Caption { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Hierarchy

Reference of the cube this hierarchy belongs to

```csharp
public Hierarchy Hierarchy { get; set; }

```

#### Property Value

[Hierarchy](../ERPConnect.BW.Hierarchy/)

### Name

Name of the hierarchy

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### UniqueName

Unique name of the hierarchy

```csharp
public string UniqueName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

This collecton class represents a set of hierarchy objects

```csharp
public class HierarchyLevelCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [HierarchyLevelCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.OnSet(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onset), [CollectionBase.OnInsert(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsert), [CollectionBase.OnClear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclear), [CollectionBase.OnRemove(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremove), [CollectionBase.OnValidate(object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onvalidate), [CollectionBase.OnSetComplete(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onsetcomplete), [CollectionBase.OnInsertComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsertcomplete), [CollectionBase.OnClearComplete()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclearcomplete), [CollectionBase.OnRemoveComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremovecomplete), [CollectionBase.InnerList](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.innerlist), [CollectionBase.List](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.list), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### HierarchyLevelCollection()

Constructs a new HierarchyCollection object

```csharp
public HierarchyLevelCollection()

```

## Properties

### this[int]

Returns an hierarchy object of a given position

```csharp
public virtual HierarchyLevel this[int Index] { get; set; }

```

#### Property Value

[HierarchyLevel](../ERPConnect.BW.HierarchyLevel/)

### this[string]

Returns a HierarchyLevel object by its name

```csharp
public virtual HierarchyLevel this[string UniqueName] { get; set; }

```

#### Property Value

[HierarchyLevel](../ERPConnect.BW.HierarchyLevel/)

## Methods

### Add(HierarchyLevel)

Adds an existing Hierarchy object to the collection

```csharp
public virtual void Add(HierarchyLevel NewParameter)

```

#### Parameters

`NewParameter` [HierarchyLevel](../ERPConnect.BW.HierarchyLevel/)

The Hierarchy object to be added

### Add(Hierarchy, string, string, string)

Adds a new Hierarchy Level object to the collection

```csharp
public virtual HierarchyLevel Add(Hierarchy Hierarchy, string Name, string UniqueName, string Caption)

```

#### Parameters

`Hierarchy` [Hierarchy](../ERPConnect.BW.Hierarchy/)

Reference to a Hierarchy Level object

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the hierarchy

`UniqueName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Unique name of the hierarchy

`Caption` [string](https://learn.microsoft.com/dotnet/api/system.string)

A brief description text

#### Returns

[HierarchyLevel](../ERPConnect.BW.HierarchyLevel/)

The hierarchy object that was created and added to the collection

### Insert(int, HierarchyLevel)

Inserts an existing HierarchyLevel object to the collection

```csharp
public virtual void Insert(int Index, HierarchyLevel NewParameter)

```

#### Parameters

`Index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Oridnal number of the position

`NewParameter` [HierarchyLevel](../ERPConnect.BW.HierarchyLevel/)

The Hierarchy object to be added

### TryGetValue(string, out HierarchyLevel)

```csharp
public bool TryGetValue(string uniqueName, out HierarchyLevel value)

```

#### Parameters

`uniqueName` [string](https://learn.microsoft.com/dotnet/api/system.string)

`value` [HierarchyLevel](../ERPConnect.BW.HierarchyLevel/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void MDXExecuter.OnDebuggingDetails(MDXExecuter Sender, string Message)

```

#### Parameters

`Sender` [MDXExecuter](../ERPConnect.BW.MDXExecuter/)

`Message` [string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void MDXExecuter.OnIncomingPackage(MDXExecuter Sender, DataTable PackageResult)

```

#### Parameters

`Sender` [MDXExecuter](../ERPConnect.BW.MDXExecuter/)

`PackageResult` [DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public class MDXExecuter

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [MDXExecuter](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### MDXExecuter(R3Connection)

Constructs a MDXExecuter object

```csharp
public MDXExecuter(R3Connection Connection)

```

#### Parameters

`Connection` [R3Connection](../../erpconnect/ERPConnect.R3Connection/)

Reference to a valid R3Connection object

## Properties

### Connection

Reference to a valid R3Connection object

```csharp
public R3Connection Connection { get; set; }

```

#### Property Value

[R3Connection](../../erpconnect/ERPConnect.R3Connection/)

### MDX

MDX statement

```csharp
public string MDX { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MaxRows

Number of rows to maximal retrieved.

```csharp
public int MaxRows { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### PackageSize

Defines if the result is fetched in more than one data packet (set PackageSize to greater 0 to enable packaging)

```csharp
public int PackageSize { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Result

Contains the resultset of the MDX execution

```csharp
public DataTable Result { get; }

```

#### Property Value

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

### UnitsInResultset

Gets or sets a value indicating whether the units of a measure are output into a separated column in the resultset

```csharp
public bool UnitsInResultset { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### UseFlattening

For internal use only! Do not use!!!!!

```csharp
public bool UseFlattening { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### UseFormattedValue

Defines whether the formatted value or the technical should be used (this can defined in BEX analyzer)

```csharp
public bool UseFormattedValue { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### UseMemberUniqueNamesInsteadOfCaption

For internal use only! Do not use!!!!!

```csharp
public bool UseMemberUniqueNamesInsteadOfCaption { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### UseNewOlapBapis

Gets or sets a value indicating whether the new OLAP BAPIs should be used for the extraction (see SAP note 1232751)

```csharp
public bool UseNewOlapBapis { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

## Methods

### Execute()

Executes the current MDX statement and fills the Result table

```csharp
public void Execute()

```

### DebuggingDetails

```csharp
public event MDXExecuter.OnDebuggingDetails DebuggingDetails

```

#### Event Type

[MDXExecuter](./).[OnDebuggingDetails](../ERPConnect.BW.MDXExecuter.OnDebuggingDetails/)

### IncomingPackage

IncomingPackage is fired, when addtional data packages are fetched from SAP.

```csharp
public event MDXExecuter.OnIncomingPackage IncomingPackage

```

#### Event Type

[MDXExecuter](./).[OnIncomingPackage](../ERPConnect.BW.MDXExecuter.OnIncomingPackage/)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

A DataTable object that conatains a list of members

```csharp
public class MembersDataTable : DataTable, IComponent, IDisposable, IServiceProvider, IListSource, ISupportInitializeNotification, ISupportInitialize, ISerializable, IXmlSerializable, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [MarshalByValueComponent](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent) ← [DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable) ← [MembersDataTable](./)

#### Implements

[IComponent](https://learn.microsoft.com/dotnet/api/system.componentmodel.icomponent), [IDisposable](https://learn.microsoft.com/dotnet/api/system.idisposable), [IServiceProvider](https://learn.microsoft.com/dotnet/api/system.iserviceprovider), [IListSource](https://learn.microsoft.com/dotnet/api/system.componentmodel.ilistsource), [ISupportInitializeNotification](https://learn.microsoft.com/dotnet/api/system.componentmodel.isupportinitializenotification), [ISupportInitialize](https://learn.microsoft.com/dotnet/api/system.componentmodel.isupportinitialize), [ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable), IXmlSerializable, [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[DataTable.fInitInProgress](https://learn.microsoft.com/dotnet/api/system.data.datatable.finitinprogress), [DataTable.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.data.datatable.getobjectdata), [DataTable.BeginInit()](https://learn.microsoft.com/dotnet/api/system.data.datatable.begininit), [DataTable.EndInit()](https://learn.microsoft.com/dotnet/api/system.data.datatable.endinit), [DataTable.AcceptChanges()](https://learn.microsoft.com/dotnet/api/system.data.datatable.acceptchanges), [DataTable.CreateInstance()](https://learn.microsoft.com/dotnet/api/system.data.datatable.createinstance), [DataTable.Clone()](https://learn.microsoft.com/dotnet/api/system.data.datatable.clone), [DataTable.Copy()](https://learn.microsoft.com/dotnet/api/system.data.datatable.copy), [DataTable.Clear()](https://learn.microsoft.com/dotnet/api/system.data.datatable.clear), [DataTable.Compute(string, string)](https://learn.microsoft.com/dotnet/api/system.data.datatable.compute), [DataTable.GetChanges()](https://learn.microsoft.com/dotnet/api/system.data.datatable.getchanges#system-data-datatable-getchanges), [DataTable.GetChanges(DataRowState)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.getchanges#system-data-datatable-getchanges(system-data-datarowstate)>), [DataTable.GetErrors()](https://learn.microsoft.com/dotnet/api/system.data.datatable.geterrors), [DataTable.ImportRow(DataRow)](https://learn.microsoft.com/dotnet/api/system.data.datatable.importrow), [DataTable.NewRow()](https://learn.microsoft.com/dotnet/api/system.data.datatable.newrow), [DataTable.NewRowFromBuilder(DataRowBuilder)](https://learn.microsoft.com/dotnet/api/system.data.datatable.newrowfrombuilder), [DataTable.GetRowType()](https://learn.microsoft.com/dotnet/api/system.data.datatable.getrowtype), [DataTable.NewRowArray(int)](https://learn.microsoft.com/dotnet/api/system.data.datatable.newrowarray), [DataTable.OnColumnChanging(DataColumnChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.oncolumnchanging), [DataTable.OnColumnChanged(DataColumnChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.oncolumnchanged), [DataTable.OnPropertyChanging(PropertyChangedEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onpropertychanging), [DataTable.OnRemoveColumn(DataColumn)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onremovecolumn), [DataTable.OnRowChanged(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowchanged), [DataTable.OnRowChanging(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowchanging), [DataTable.OnRowDeleting(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowdeleting), [DataTable.OnRowDeleted(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowdeleted), [DataTable.OnTableCleared(DataTableClearEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.ontablecleared), [DataTable.OnTableClearing(DataTableClearEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.ontableclearing), [DataTable.OnTableNewRow(DataTableNewRowEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.ontablenewrow), [DataTable.RejectChanges()](https://learn.microsoft.com/dotnet/api/system.data.datatable.rejectchanges), [DataTable.Reset()](https://learn.microsoft.com/dotnet/api/system.data.datatable.reset), [DataTable.Select()](https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select), [DataTable.Select(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select(system-string)>), [DataTable.Select(string, string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select(system-string-system-string)>), [DataTable.Select(string, string, DataViewRowState)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select(system-string-system-string-system-data-dataviewrowstate)>), [DataTable.ToString()](https://learn.microsoft.com/dotnet/api/system.data.datatable.tostring), [DataTable.BeginLoadData()](https://learn.microsoft.com/dotnet/api/system.data.datatable.beginloaddata), [DataTable.EndLoadData()](https://learn.microsoft.com/dotnet/api/system.data.datatable.endloaddata), [DataTable.LoadDataRow(object[], bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.loaddatarow#system-data-datatable-loaddatarow(system-object()-system-boolean)>), [DataTable.LoadDataRow(object[], LoadOption)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.loaddatarow#system-data-datatable-loaddatarow(system-object()-system-data-loadoption)>), [DataTable.Merge(DataTable)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.merge#system-data-datatable-merge(system-data-datatable)>), [DataTable.Merge(DataTable, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.merge#system-data-datatable-merge(system-data-datatable-system-boolean)>), [DataTable.Merge(DataTable, bool, MissingSchemaAction)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.merge#system-data-datatable-merge(system-data-datatable-system-boolean-system-data-missingschemaaction)>), [DataTable.Load(IDataReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.load#system-data-datatable-load(system-data-idatareader)>), [DataTable.Load(IDataReader, LoadOption)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.load#system-data-datatable-load(system-data-idatareader-system-data-loadoption)>), [DataTable.Load(IDataReader, LoadOption, FillErrorEventHandler)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.load#system-data-datatable-load(system-data-idatareader-system-data-loadoption-system-data-fillerroreventhandler)>), [DataTable.CreateDataReader()](https://learn.microsoft.com/dotnet/api/system.data.datatable.createdatareader), [DataTable.WriteXml(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream)>), [DataTable.WriteXml(Stream, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream-system-boolean)>), [DataTable.WriteXml(TextWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter)>), [DataTable.WriteXml(TextWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter-system-boolean)>), [DataTable.WriteXml(XmlWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter)>), [DataTable.WriteXml(XmlWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter-system-boolean)>), [DataTable.WriteXml(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string)>), [DataTable.WriteXml(string, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string-system-boolean)>), [DataTable.WriteXml(Stream, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream-system-data-xmlwritemode)>), [DataTable.WriteXml(Stream, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXml(TextWriter, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter-system-data-xmlwritemode)>), [DataTable.WriteXml(TextWriter, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXml(XmlWriter, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter-system-data-xmlwritemode)>), [DataTable.WriteXml(XmlWriter, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXml(string, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string-system-data-xmlwritemode)>), [DataTable.WriteXml(string, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXmlSchema(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-stream)>), [DataTable.WriteXmlSchema(Stream, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-stream-system-boolean)>), [DataTable.WriteXmlSchema(TextWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-textwriter)>), [DataTable.WriteXmlSchema(TextWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-textwriter-system-boolean)>), [DataTable.WriteXmlSchema(XmlWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-xml-xmlwriter)>), [DataTable.WriteXmlSchema(XmlWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-xml-xmlwriter-system-boolean)>), [DataTable.WriteXmlSchema(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-string)>), [DataTable.WriteXmlSchema(string, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-string-system-boolean)>), [DataTable.ReadXml(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-io-stream)>), [DataTable.ReadXml(TextReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-io-textreader)>), [DataTable.ReadXml(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-string)>), [DataTable.ReadXml(XmlReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-xml-xmlreader)>), [DataTable.ReadXmlSchema(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-io-stream)>), [DataTable.ReadXmlSchema(TextReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-io-textreader)>), [DataTable.ReadXmlSchema(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-string)>), [DataTable.ReadXmlSchema(XmlReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-xml-xmlreader)>), [DataTable.GetDataTableSchema(XmlSchemaSet)](https://learn.microsoft.com/dotnet/api/system.data.datatable.getdatatableschema), [DataTable.GetSchema()](https://learn.microsoft.com/dotnet/api/system.data.datatable.getschema), [DataTable.ReadXmlSerializable(XmlReader)](https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlserializable), [DataTable.CaseSensitive](https://learn.microsoft.com/dotnet/api/system.data.datatable.casesensitive), [DataTable.IsInitialized](https://learn.microsoft.com/dotnet/api/system.data.datatable.isinitialized), [DataTable.RemotingFormat](https://learn.microsoft.com/dotnet/api/system.data.datatable.remotingformat), [DataTable.ChildRelations](https://learn.microsoft.com/dotnet/api/system.data.datatable.childrelations), [DataTable.Columns](https://learn.microsoft.com/dotnet/api/system.data.datatable.columns), [DataTable.Constraints](https://learn.microsoft.com/dotnet/api/system.data.datatable.constraints), [DataTable.DataSet](https://learn.microsoft.com/dotnet/api/system.data.datatable.dataset), [DataTable.DefaultView](https://learn.microsoft.com/dotnet/api/system.data.datatable.defaultview), [DataTable.DisplayExpression](https://learn.microsoft.com/dotnet/api/system.data.datatable.displayexpression), [DataTable.ExtendedProperties](https://learn.microsoft.com/dotnet/api/system.data.datatable.extendedproperties), [DataTable.HasErrors](https://learn.microsoft.com/dotnet/api/system.data.datatable.haserrors), [DataTable.Locale](https://learn.microsoft.com/dotnet/api/system.data.datatable.locale), [DataTable.MinimumCapacity](https://learn.microsoft.com/dotnet/api/system.data.datatable.minimumcapacity), [DataTable.ParentRelations](https://learn.microsoft.com/dotnet/api/system.data.datatable.parentrelations), [DataTable.PrimaryKey](https://learn.microsoft.com/dotnet/api/system.data.datatable.primarykey), [DataTable.Rows](https://learn.microsoft.com/dotnet/api/system.data.datatable.rows), [DataTable.TableName](https://learn.microsoft.com/dotnet/api/system.data.datatable.tablename), [DataTable.Namespace](https://learn.microsoft.com/dotnet/api/system.data.datatable.namespace), [DataTable.Prefix](https://learn.microsoft.com/dotnet/api/system.data.datatable.prefix), [DataTable.Site](https://learn.microsoft.com/dotnet/api/system.data.datatable.site), [DataTable.ColumnChanging](https://learn.microsoft.com/dotnet/api/system.data.datatable.columnchanging), [DataTable.ColumnChanged](https://learn.microsoft.com/dotnet/api/system.data.datatable.columnchanged), [DataTable.Initialized](https://learn.microsoft.com/dotnet/api/system.data.datatable.initialized), [DataTable.RowChanged](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowchanged), [DataTable.RowChanging](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowchanging), [DataTable.RowDeleting](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowdeleting), [DataTable.RowDeleted](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowdeleted), [DataTable.TableClearing](https://learn.microsoft.com/dotnet/api/system.data.datatable.tableclearing), [DataTable.TableCleared](https://learn.microsoft.com/dotnet/api/system.data.datatable.tablecleared), [DataTable.TableNewRow](https://learn.microsoft.com/dotnet/api/system.data.datatable.tablenewrow), [MarshalByValueComponent.Dispose()](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.dispose#system-componentmodel-marshalbyvaluecomponent-dispose), [MarshalByValueComponent.Dispose(bool)](<https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.dispose#system-componentmodel-marshalbyvaluecomponent-dispose(system-boolean)>), [MarshalByValueComponent.GetService(Type)](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.getservice), [MarshalByValueComponent.ToString()](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.tostring), [MarshalByValueComponent.Events](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.events), [MarshalByValueComponent.Site](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.site), [MarshalByValueComponent.Container](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.container), [MarshalByValueComponent.DesignMode](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.designmode), [MarshalByValueComponent.Disposed](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.disposed), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### Count

Number of rows contained in the DataTable object

```csharp
[Browsable(false)]
public int Count { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### this[int]

returns a MembersRow object at the given position

```csharp
public MembersRow this[int index] { get; }

```

#### Property Value

[MembersRow](../ERPConnect.BW.MembersRow/)

## Methods

### AddMembersRow(MembersRow)

Adds a new row to the table

```csharp
public void AddMembersRow(MembersRow row)

```

#### Parameters

`row` [MembersRow](../ERPConnect.BW.MembersRow/)

The MembersRow object to be added

### AddMembersRow(string, string, string, string)

Create a new MembersRow object and adds it to the table

```csharp
public MembersRow AddMembersRow(string MemberName, string UniqueName, string ParentUniqueName, string MemberCaption)

```

#### Parameters

`MemberName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the member

`UniqueName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Unqiue name of the member

`ParentUniqueName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of parent member

`MemberCaption` [string](https://learn.microsoft.com/dotnet/api/system.string)

Caption of the member

#### Returns

[MembersRow](../ERPConnect.BW.MembersRow/)

The MembersRow object that was created and added

### Clone()

Clones the object

```csharp
public override DataTable Clone()

```

#### Returns

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

The new object that was cloned

### CreateInstance()

Creates a new MembersDataTable object

```csharp
protected override DataTable CreateInstance()

```

#### Returns

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

The new MembersDataTable object

### GetEnumerator()

Returns an enumerator that can iterate through a collection.

```csharp
public IEnumerator GetEnumerator()

```

#### Returns

[IEnumerator](https://learn.microsoft.com/dotnet/api/system.collections.ienumerator)

An IEnumerator that can be used to iterate through the collection.

### GetRowType()

Returns the a Type object of the row

```csharp
protected override Type GetRowType()

```

#### Returns

[Type](https://learn.microsoft.com/dotnet/api/system.type)

The Type object of the row

### NewMembersRow()

Creates a new MembersRow object

```csharp
public MembersRow NewMembersRow()

```

#### Returns

[MembersRow](../ERPConnect.BW.MembersRow/)

A new MembersRow object

### NewRowFromBuilder(DataRowBuilder)

Creates a new DataRow object from a DataRowBuilder object

```csharp
protected override DataRow NewRowFromBuilder(DataRowBuilder builder)

```

#### Parameters

`builder` [DataRowBuilder](https://learn.microsoft.com/dotnet/api/system.data.datarowbuilder)

The DataRowBuilder object

#### Returns

[DataRow](https://learn.microsoft.com/dotnet/api/system.data.datarow)

The new DataRow object

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

The MembersRow class represent a single row of a Members DataTable

```csharp
public class MembersRow : DataRow

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [DataRow](https://learn.microsoft.com/dotnet/api/system.data.datarow) ← [MembersRow](./)

#### Inherited Members

[DataRow.AcceptChanges()](https://learn.microsoft.com/dotnet/api/system.data.datarow.acceptchanges), [DataRow.BeginEdit()](https://learn.microsoft.com/dotnet/api/system.data.datarow.beginedit), [DataRow.CancelEdit()](https://learn.microsoft.com/dotnet/api/system.data.datarow.canceledit), [DataRow.Delete()](https://learn.microsoft.com/dotnet/api/system.data.datarow.delete), [DataRow.EndEdit()](https://learn.microsoft.com/dotnet/api/system.data.datarow.endedit), [DataRow.SetColumnError(int, string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setcolumnerror#system-data-datarow-setcolumnerror(system-int32-system-string)>), [DataRow.SetColumnError(string, string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setcolumnerror#system-data-datarow-setcolumnerror(system-string-system-string)>), [DataRow.SetColumnError(DataColumn, string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setcolumnerror#system-data-datarow-setcolumnerror(system-data-datacolumn-system-string)>), [DataRow.GetColumnError(int)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnerror#system-data-datarow-getcolumnerror(system-int32)>), [DataRow.GetColumnError(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnerror#system-data-datarow-getcolumnerror(system-string)>), [DataRow.GetColumnError(DataColumn)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnerror#system-data-datarow-getcolumnerror(system-data-datacolumn)>), [DataRow.ClearErrors()](https://learn.microsoft.com/dotnet/api/system.data.datarow.clearerrors), [DataRow.GetColumnsInError()](https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnsinerror), [DataRow.GetChildRows(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-string)>), [DataRow.GetChildRows(string, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-string-system-data-datarowversion)>), [DataRow.GetChildRows(DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-data-datarelation)>), [DataRow.GetChildRows(DataRelation, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-data-datarelation-system-data-datarowversion)>), [DataRow.GetParentRow(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-string)>), [DataRow.GetParentRow(string, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-string-system-data-datarowversion)>), [DataRow.GetParentRow(DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-data-datarelation)>), [DataRow.GetParentRow(DataRelation, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-data-datarelation-system-data-datarowversion)>), [DataRow.GetParentRows(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-string)>), [DataRow.GetParentRows(string, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-string-system-data-datarowversion)>), [DataRow.GetParentRows(DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-data-datarelation)>), [DataRow.GetParentRows(DataRelation, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-data-datarelation-system-data-datarowversion)>), [DataRow.HasVersion(DataRowVersion)](https://learn.microsoft.com/dotnet/api/system.data.datarow.hasversion), [DataRow.IsNull(int)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-int32)>), [DataRow.IsNull(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-string)>), [DataRow.IsNull(DataColumn)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-data-datacolumn)>), [DataRow.IsNull(DataColumn, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-data-datacolumn-system-data-datarowversion)>), [DataRow.RejectChanges()](https://learn.microsoft.com/dotnet/api/system.data.datarow.rejectchanges), [DataRow.SetNull(DataColumn)](https://learn.microsoft.com/dotnet/api/system.data.datarow.setnull), [DataRow.SetParentRow(DataRow)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setparentrow#system-data-datarow-setparentrow(system-data-datarow)>), [DataRow.SetParentRow(DataRow, DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setparentrow#system-data-datarow-setparentrow(system-data-datarow-system-data-datarelation)>), [DataRow.SetAdded()](https://learn.microsoft.com/dotnet/api/system.data.datarow.setadded), [DataRow.SetModified()](https://learn.microsoft.com/dotnet/api/system.data.datarow.setmodified), [DataRow.RowError](https://learn.microsoft.com/dotnet/api/system.data.datarow.rowerror), [DataRow.RowState](https://learn.microsoft.com/dotnet/api/system.data.datarow.rowstate), [DataRow.Table](https://learn.microsoft.com/dotnet/api/system.data.datarow.table), [DataRow.this[int]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[string]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[DataColumn]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[int, DataRowVersion]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[string, DataRowVersion]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[DataColumn, DataRowVersion]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.ItemArray](https://learn.microsoft.com/dotnet/api/system.data.datarow.itemarray), [DataRow.HasErrors](https://learn.microsoft.com/dotnet/api/system.data.datarow.haserrors), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### MemberCaption

The caption of the member

```csharp
public string MemberCaption { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MemberName

Name of the member

```csharp
public string MemberName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### ParentUniqueName

The unique name of the parent member

```csharp
public string ParentUniqueName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### UniqueName

Defines a unique name for this member

```csharp
public string UniqueName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### IsMemberCaptionNull()

Defines if the column MemberCaption is null

```csharp
public bool IsMemberCaptionNull()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### IsMemberNameNull()

Defines if the column MemberName is null

```csharp
public bool IsMemberNameNull()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

true / false

### IsParentUniqueNameNull()

Defines if the column ParentUniqueMember is null

```csharp
public bool IsParentUniqueNameNull()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

true / false

### IsUniqueNameNull()

Defines if the column UniqueMember is null

```csharp
public bool IsUniqueNameNull()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

true / false

### SetMemberCaptionNull()

Sets the column MemberCaption to null

```csharp
public void SetMemberCaptionNull()

```

### SetMemberNameNull()

Sets the column MemberName to null

```csharp
public void SetMemberNameNull()

```

### SetParentUniqueNameNull()

Sets the column ParentUnqiueName to null

```csharp
public void SetParentUniqueNameNull()

```

### SetUniqueNameNull()

Sets the column UniqueMember to null

```csharp
public void SetUniqueNameNull()

```

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

A cube dimension's property

```csharp
public class Property

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Property](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Property()

Constructs a new Property object

```csharp
public Property()

```

### Property(string, string, string)

Constructs a new Property object

```csharp
public Property(string Name, string Caption, string DataType)

```

#### Parameters

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the property

`Caption` [string](https://learn.microsoft.com/dotnet/api/system.string)

Caption of the property

`DataType` [string](https://learn.microsoft.com/dotnet/api/system.string)

SAP data type of the property (e.g. CHAR)

## Properties

### Caption

Caption of the property

```csharp
public string Caption { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### DataType

The SAP data type of the property (e.g. CHAR)

```csharp
public string DataType { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### FlatOrdinal

The ordinal number of the property when using FlatMDX process

```csharp
public int FlatOrdinal { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Name

Name of the property

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SelectForFlatMDX

Set to true to have this property as column in the output of the FlatMDX process

```csharp
public bool SelectForFlatMDX { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

A collection of property objects

```csharp
public class PropertyCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [PropertyCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.OnSet(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onset), [CollectionBase.OnInsert(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsert), [CollectionBase.OnClear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclear), [CollectionBase.OnRemove(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremove), [CollectionBase.OnValidate(object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onvalidate), [CollectionBase.OnSetComplete(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onsetcomplete), [CollectionBase.OnInsertComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsertcomplete), [CollectionBase.OnClearComplete()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclearcomplete), [CollectionBase.OnRemoveComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremovecomplete), [CollectionBase.InnerList](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.innerlist), [CollectionBase.List](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.list), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### PropertyCollection()

Create a new PropertyCollection object

```csharp
public PropertyCollection()

```

## Properties

### this[int]

Returns the property object at the given position

```csharp
public virtual Property this[int Index] { get; set; }

```

#### Property Value

[Property](../ERPConnect.BW.Property/)

### this[string]

Returns the property object with the given name

```csharp
public virtual Property this[string Name] { get; set; }

```

#### Property Value

[Property](../ERPConnect.BW.Property/)

## Methods

### Add(Property)

Adds a Property object to the collection

```csharp
public virtual void Add(Property NewParameter)

```

#### Parameters

`NewParameter` [Property](../ERPConnect.BW.Property/)

The property object to be added

### Add(string, string, string)

Creates a new Dimension property and adds it to the collection

```csharp
public virtual Property Add(string Name, string Caption, string DataType)

```

#### Parameters

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the property

`Caption` [string](https://learn.microsoft.com/dotnet/api/system.string)

Caption of the property

`DataType` [string](https://learn.microsoft.com/dotnet/api/system.string)

Data type of the property

#### Returns

[Property](../ERPConnect.BW.Property/)

The newly created Property object

### Contains(string)

Checks, if there's a property with the name contained in the collection

```csharp
public virtual bool Contains(string Name)

```

#### Parameters

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the property

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

true / false

### TryGetValue(string, out Property)

```csharp
public bool TryGetValue(string name, out Property value)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

`value` [Property](../ERPConnect.BW.Property/)

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public class Slicer

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Slicer](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Slicer(Dimension)

```csharp
public Slicer(Dimension Dimension)

```

#### Parameters

`Dimension` [Dimension](../ERPConnect.BW.Dimension/)

## Properties

### Dimension

```csharp
public Dimension Dimension { get; set; }

```

#### Property Value

[Dimension](../ERPConnect.BW.Dimension/)

### Type

```csharp
public SlicerType Type { get; set; }

```

#### Property Value

[SlicerType](../ERPConnect.BW.SlicerType/)

Namespace: [ERPConnect.BW](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public enum SlicerType

```

## Fields

`Intervall = 1`

`SingleMember = 0`

### Classes

[Idoc](ERPConnect.Idocs.Idoc/)

[IdocSegment](ERPConnect.Idocs.IdocSegment/)

[IdocSegmentCollection](ERPConnect.Idocs.IdocSegmentCollection/)

[IdocSegmentField](ERPConnect.Idocs.IdocSegmentField/)

[IdocSegmentFieldCollection](ERPConnect.Idocs.IdocSegmentFieldCollection/)

[IdocStatus](ERPConnect.Idocs.IdocStatus/)

Namespace: [ERPConnect.Idocs](../)\
Assembly: ERPConnectStandard20.dll

Represents a single IDoc including its segments

```csharp
public class Idoc

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Idoc](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Idoc()

Initializes an empty Idoc object

```csharp
public Idoc()

```

### Idoc(string, string)

initializes an empty Idoc object

```csharp
public Idoc(string IdocType, string Extension)

```

#### Parameters

`IdocType` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the idoc type

`Extension` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the extension. If no extension is requiered, set to ""

## Properties

### ARCKEY

Key for external message archive

```csharp
public string ARCKEY { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### CIMTYP

Extension (defined by customer)

```csharp
public string CIMTYP { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### CREDAT

Created on

```csharp
public string CREDAT { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### CRETIM

Time Created

```csharp
public string CRETIM { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Connection

R3Connection object to which the Idoc will be sent

```csharp
public R3Connection Connection { get; set; }

```

#### Property Value

[R3Connection](../../erpconnect/ERPConnect.R3Connection/)

### DIRECT

Direction

```csharp
public string DIRECT { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### DOCNUM

IDoc number

```csharp
public string DOCNUM { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### DOCREL

SAP Release for IDoc

```csharp
public string DOCREL { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Description

Description

```csharp
public string Description { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### EXPRSS

Overriding in inbound processing

```csharp
public string EXPRSS { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### IDOCTYP

Name of basic type

```csharp
public string IDOCTYP { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### LastTID

Transaction ID of last outbound call

```csharp
public string LastTID { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MANDT

Client

```csharp
public string MANDT { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MESCOD

Message code

```csharp
public string MESCOD { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MESFCT

Message function

```csharp
public string MESFCT { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MESTYP

Message type

```csharp
public string MESTYP { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### OUTMOD

Output mode

```csharp
public string OUTMOD { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### RCVLAD

Logical address of recipient

```csharp
public string RCVLAD { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### RCVPFC

Partner function of recipient

```csharp
public string RCVPFC { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### RCVPOR

Receiver port

```csharp
public string RCVPOR { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### RCVPRN

Partner number of recipient

```csharp
public string RCVPRN { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### RCVPRT

Partner Type of receiver

```csharp
public string RCVPRT { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### RCVSAD

Recipient address (SADR)

```csharp
public string RCVSAD { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### REFGRP

Message group (EDI Message Group)

```csharp
public string REFGRP { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### REFINT

Transmission file (EDI Interchange)

```csharp
public string REFINT { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### REFMES

Message (EDI Message)

```csharp
public string REFMES { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SERIAL

Serialization

```csharp
public string SERIAL { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SNDLAD

Logical address of sender

```csharp
public string SNDLAD { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SNDPFC

Partner Function of Sender

```csharp
public string SNDPFC { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SNDPOR

Sender port (SAP System, external subsystem)

```csharp
public string SNDPOR { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SNDPRN

Partner Number of Sender

```csharp
public string SNDPRN { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SNDPRT

Partner type of sender

```csharp
public string SNDPRT { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SNDSAD

Sender address (SADR)

```csharp
public string SNDSAD { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### STATUS

Status of IDoc

```csharp
public string STATUS { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### STD

EDI standard, flag

```csharp
public string STD { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### STDMES

EDI message type

```csharp
public string STDMES { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### STDVRS

EDI standard, version and release

```csharp
public string STDVRS { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Segments

Collection of all segment that are child relation to the current segment

```csharp
public IdocSegmentCollection Segments { get; set; }

```

#### Property Value

[IdocSegmentCollection](../ERPConnect.Idocs.IdocSegmentCollection/)

### SkipHLevel

DO NOT USE!!!! FOR INTERNAL USE ONLY!!!

```csharp
public bool SkipHLevel { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### TABNAM

Name of table structure

```csharp
public string TABNAM { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### TEST

Test flag

```csharp
public string TEST { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### TemplateSegments

Gets a collection of available template segments retrieved or loaded from a schema by calling `ERPConnect.R3Connection.CreateEmptyIdoc(System.String%2cSystem.String)` or `ERPConnect.Idocs.Idoc.LoadIdocSchema(System.String)`.

```csharp
public Dictionary<string, IdocSegment> TemplateSegments { get; }

```

#### Property Value

[Dictionary](https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2)\<[string](https://learn.microsoft.com/dotnet/api/system.string), [IdocSegment](../ERPConnect.Idocs.IdocSegment/)>

## Methods

### CreateSegment(string)

Creates a new segment with fields to be filled with data.

```csharp
public IdocSegment CreateSegment(string SegmentName)

```

#### Parameters

`SegmentName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the segment. Please refer to transaction WE60 to find out which segments can be used for the idoc type.

#### Returns

[IdocSegment](../ERPConnect.Idocs.IdocSegment/)

A newly created IdocSegment object

### GetCurrentStatus()

Returns an IdocStatus object which represents the current status of the IDoc

```csharp
public IdocStatus GetCurrentStatus()

```

#### Returns

[IdocStatus](../ERPConnect.Idocs.IdocStatus/)

IdocStatus object

### GetIdocSchemaString()

Gets the IDoc schema as string

```csharp
public string GetIdocSchemaString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

String with IDoc schema data

### LoadIdocSchema(string)

Loads a schema file and stores the segments internally for further use (e.g. for the CreateSegment method)

```csharp
public void LoadIdocSchema(string SchemaFileName)

```

#### Parameters

`SchemaFileName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Filename

#### Remarks

Please use the IDocSchemaGenerator tool that is included in the ERPConnect installation package

### LoadIdocSchema(StreamReader)

Loads a schema file and stores the segments internally for further use (e.g. for the CreateSegment method)

```csharp
public void LoadIdocSchema(StreamReader IdocSchemaStreamReader)

```

#### Parameters

`IdocSchemaStreamReader` [StreamReader](https://learn.microsoft.com/dotnet/api/system.io.streamreader)

StreamReader object that points to an resource file

#### Remarks

Please use the IDocSchemaGenerator tool that is included in the ERPConnect installation package

### LoadIdocSchema(TextReader)

Loads a schema and stores the segments internally for further use (e.g. for the CreateSegment method)

```csharp
public void LoadIdocSchema(TextReader TextReader)

```

#### Parameters

`TextReader` [TextReader](https://learn.microsoft.com/dotnet/api/system.io.textreader)

TextReader

#### Remarks

Please use the IDocSchemaGenerator tool that is included in the ERPConnect installation package

### LoadPlainData(StreamReader)

Loads IDoc from a single plain file. You must make sure to have a shema loaded before calling this function

```csharp
public virtual void LoadPlainData(StreamReader strm)

```

#### Parameters

`strm` [StreamReader](https://learn.microsoft.com/dotnet/api/system.io.streamreader)

A StreamReader object

### LoadPlainData(string)

Loads IDoc from a single plain file. You must make sure to have a shema loaded before calling this function

```csharp
public virtual void LoadPlainData(string FileName)

```

#### Parameters

`FileName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Filename

### LoadPlainDataString(string)

```csharp
public virtual void LoadPlainDataString(string Content)

```

#### Parameters

`Content` [string](https://learn.microsoft.com/dotnet/api/system.string)

### LoadXMLData(string)

Loads a XML IDoc data file.

```csharp
public virtual void LoadXMLData(string IdocFile)

```

#### Parameters

`IdocFile` [string](https://learn.microsoft.com/dotnet/api/system.string)

Filename

#### Remarks

Please make sure to use LoadIdocSchema or RFCConnection.CreateEmptyIdoc before loading the IDoc data. It is not possible to load data without having defined the segments:

```
R3Connection con = new R3Connection("hamlet",90,"RFCTestUser","pass01","DE","800");
con.Open(false);

Idoc i = new Idoc();
i.Connection = con;

i.LoadIdocSchema(@"c:\ORDERS01.xsd");
i.LoadData(@"c:\Order.xml");

i.Send();

con.Close();
```

### LoadXMLData(TextReader)

Loads a XML IDoc data file.

```csharp
public virtual void LoadXMLData(TextReader IdocFileTextReader)

```

#### Parameters

`IdocFileTextReader` [TextReader](https://learn.microsoft.com/dotnet/api/system.io.textreader)

XML TextReader

### SaveIdocSchema(string)

Saves the schema file of this IDoc type and enhancement to a file

```csharp
public void SaveIdocSchema(string SchemaFileName)

```

#### Parameters

`SchemaFileName` [string](https://learn.microsoft.com/dotnet/api/system.string)

### SaveIdocSchema(XmlWriter)

Saves the schema file of this IDoc type and enhancement to a XmlWriter object

```csharp
public void SaveIdocSchema(XmlWriter XmlWriter)

```

#### Parameters

`XmlWriter` XmlWriter

### SavePlainData(StreamWriter)

Writes the whole IDoc to a single file

```csharp
public virtual void SavePlainData(StreamWriter writer)

```

#### Parameters

`writer` [StreamWriter](https://learn.microsoft.com/dotnet/api/system.io.streamwriter)

A StreamWriter object

### SavePlainData()

Writes the whole IDoc to a single file

```csharp
public virtual string SavePlainData()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SavePlainData(string)

Writes the whole IDoc to a single file

```csharp
public virtual void SavePlainData(string FileName)

```

#### Parameters

`FileName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Filename

### SavePlainData(string, Encoding)

Writes the whole IDoc to a single file

```csharp
public void SavePlainData(string FileName, Encoding Encoding)

```

#### Parameters

`FileName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Filename

`Encoding` [Encoding](https://learn.microsoft.com/dotnet/api/system.text.encoding)

Encoding

### SaveXMLData(TextWriter)

Saves the IDoc to an XML file (including all segments)

```csharp
public virtual void SaveXMLData(TextWriter IdocFileTextWriter)

```

#### Parameters

`IdocFileTextWriter` [TextWriter](https://learn.microsoft.com/dotnet/api/system.io.textwriter)

TextWriter

### SaveXMLData(string)

Saves the IDoc to an XML file (including all segments)

```csharp
public virtual void SaveXMLData(string IdocFileName)

```

#### Parameters

`IdocFileName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Filename and path

### SaveXMLData(string, string)

Saves the IDoc to an XML file (including all segments)

```csharp
public virtual void SaveXMLData(string IdocFileName, string XMLEncoding)

```

#### Parameters

`IdocFileName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Filename and path

`XMLEncoding` [string](https://learn.microsoft.com/dotnet/api/system.string)

XML Encoding e.g. ISO-8859-1

### Send(string, string)

Sends the Idoc to the SAP system within a qRFC context of the given TID and inbound queue

```csharp
public virtual void Send(string tid, string queue)

```

#### Parameters

`tid` [string](https://learn.microsoft.com/dotnet/api/system.string)

Transaction ID

`queue` [string](https://learn.microsoft.com/dotnet/api/system.string)

Inbound queue

### Send(string)

Sends the Idoc to the SAP system within a tRFC context of the given TID and inbound queue

```csharp
public virtual void Send(string tid)

```

#### Parameters

`tid` [string](https://learn.microsoft.com/dotnet/api/system.string)

Transaction ID

### Send()

Sends the Idoc to the SAP system

```csharp
public virtual void Send()

```

### SendAndWait()

Sends the IDocs and waits until the IDocs is processed. You can call GetCurrentStatus after SendAndWait()

```csharp
public virtual bool SendAndWait()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

IDoc is processed successfully true/false

### ToString()

Returns the idoc as string for debugging purpose

```csharp
public override string ToString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

Idoc as string

Namespace: [ERPConnect.Idocs](../)\
Assembly: ERPConnectStandard20.dll

Represent a single IDoc segment with all its child segments

```csharp
public class IdocSegment

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [IdocSegment](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### IdocSegment()

```csharp
public IdocSegment()

```

## Properties

### ChildSegments

Collection of all segment that are child relation to the current segment

```csharp
public IdocSegmentCollection ChildSegments { get; set; }

```

#### Property Value

[IdocSegmentCollection](../ERPConnect.Idocs.IdocSegmentCollection/)

### Description

A short description of the segment

```csharp
public string Description { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Fields

Fields represent the values and other Properties of the fields that are contained in one segment

```csharp
public IdocSegmentFieldCollection Fields { get; set; }

```

#### Property Value

[IdocSegmentFieldCollection](../ERPConnect.Idocs.IdocSegmentFieldCollection/)

### HasChildren

True / false whether child segments are existing

```csharp
public bool HasChildren { get; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### MaxOccur

Defines how often a segment can occur

```csharp
public int MaxOccur { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### SegmentName

The DDIC type for this segment

```csharp
public string SegmentName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### SegmentType

The type name for this segment

```csharp
public string SegmentType { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### Clone()

Creates a cloned IdocSegment object

```csharp
public IdocSegment Clone()

```

#### Returns

[IdocSegment](./)

A new IdocSegment object

### ReadDataBuffer(int, int)

Returns a part of the data buffer of a given length and a given position

```csharp
public string ReadDataBuffer(int Offset, int Length)

```

#### Parameters

`Offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Offset where to read in the data buffer

`Length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of the string

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

A string that contains tha part of data buffer

### ToString()

Returns a string for debugging purpose

```csharp
public override string ToString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

-

### WriteDataBuffer(string, int, int)

Writes as string at a given position into the Idoc data buffer

```csharp
public void WriteDataBuffer(string Content, int Offset, int Length)

```

#### Parameters

`Content` [string](https://learn.microsoft.com/dotnet/api/system.string)

The string to be written

`Offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

The offset in the buffer where the string should be placed

`Length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

The length of the string

Namespace: [ERPConnect.Idocs](../)\
Assembly: ERPConnectStandard20.dll

Represents a collection over several IdocSegment objects which are related to each other.

```csharp
public class IdocSegmentCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [IdocSegmentCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.OnSet(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onset), [CollectionBase.OnInsert(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsert), [CollectionBase.OnClear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclear), [CollectionBase.OnRemove(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremove), [CollectionBase.OnValidate(object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onvalidate), [CollectionBase.OnSetComplete(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onsetcomplete), [CollectionBase.OnInsertComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsertcomplete), [CollectionBase.OnClearComplete()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclearcomplete), [CollectionBase.OnRemoveComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremovecomplete), [CollectionBase.InnerList](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.innerlist), [CollectionBase.List](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.list), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### IdocSegmentCollection()

```csharp
public IdocSegmentCollection()

```

## Properties

### this[int]

Returns a IdocSegment object at a given position

```csharp
public virtual IdocSegment this[int Index] { get; }

```

#### Property Value

[IdocSegment](../ERPConnect.Idocs.IdocSegment/)

### this[string, int]

Returns a IdocSegment object by providing the name of the segment. Attention!! The name may be not unique, so an Index must be provided too.

```csharp
public virtual IdocSegment this[string SegmentName, int Index] { get; }

```

#### Property Value

[IdocSegment](../ERPConnect.Idocs.IdocSegment/)

## Methods

### Add(IdocSegment)

Adds a new segment object to the collection.

```csharp
public virtual void Add(IdocSegment NewSegment)

```

#### Parameters

`NewSegment` [IdocSegment](../ERPConnect.Idocs.IdocSegment/)

The segment to be aded

Namespace: [ERPConnect.Idocs](../)\
Assembly: ERPConnectStandard20.dll

Represent a single field of a segment

```csharp
public class IdocSegmentField

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [IdocSegmentField](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### IdocSegmentField()

Initiliazes an IdocSegmentFiled object

```csharp
public IdocSegmentField()

```

### IdocSegmentField(string)

Initiliazes an IdocSegmentFiled object

```csharp
public IdocSegmentField(string Name)

```

#### Parameters

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of Idoc segment field

### IdocSegmentField(string, string, int, int, string, object)

initilizes an IdocSegmentFiled object

```csharp
public IdocSegmentField(string Name, string Description, int Length, int Offset, string DataType, object FieldValue)

```

#### Parameters

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the segment field

`Description` [string](https://learn.microsoft.com/dotnet/api/system.string)

Description of the segment field

`Length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of the segment field

`Offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Offset in data buffer of the segment field

`DataType` [string](https://learn.microsoft.com/dotnet/api/system.string)

Data type of the segment field

`FieldValue` [object](https://learn.microsoft.com/dotnet/api/system.object)

The value

## Properties

### DataType

Data type (e.g. CHAR, NUMC ...)

```csharp
public string DataType { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Description

Description as defined in the DDIC

```csharp
public string Description { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### ExternalLength

Output Length

```csharp
public int ExternalLength { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### FieldName

Field Name

```csharp
public string FieldName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### FieldValue

Object that contains the data of the field (in most cases this is a string)

```csharp
public object FieldValue { get; set; }

```

#### Property Value

[object](https://learn.microsoft.com/dotnet/api/system.object)

### OffsetInBuffer

Index of first byte

```csharp
public int OffsetInBuffer { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

## Methods

### Clone()

Creates a copy of the current object

```csharp
public IdocSegmentField Clone()

```

#### Returns

[IdocSegmentField](./)

The cloned IdocSegemntField object

Namespace: [ERPConnect.Idocs](../)\
Assembly: ERPConnectStandard20.dll

Collection of IdocSegmentField objects

```csharp
public class IdocSegmentFieldCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [IdocSegmentFieldCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.OnSet(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onset), [CollectionBase.OnInsert(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsert), [CollectionBase.OnClear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclear), [CollectionBase.OnRemove(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremove), [CollectionBase.OnValidate(object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onvalidate), [CollectionBase.OnSetComplete(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onsetcomplete), [CollectionBase.OnInsertComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsertcomplete), [CollectionBase.OnClearComplete()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclearcomplete), [CollectionBase.OnRemoveComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremovecomplete), [CollectionBase.InnerList](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.innerlist), [CollectionBase.List](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.list), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### IdocSegmentFieldCollection()

Initializes an empty collection

```csharp
public IdocSegmentFieldCollection()

```

## Properties

### this[int]

Returns a IdocSegmentField object at a given position

```csharp
public virtual IdocSegmentField this[int Index] { get; set; }

```

#### Property Value

[IdocSegmentField](../ERPConnect.Idocs.IdocSegmentField/)

### this[string]

Returns a IdocSegmentField object at a given position

```csharp
public virtual IdocSegmentField this[string SegmentName] { get; set; }

```

#### Property Value

[IdocSegmentField](../ERPConnect.Idocs.IdocSegmentField/)

## Methods

### Add(IdocSegmentField)

Adds a new item to the collection

```csharp
public void Add(IdocSegmentField NewParameter)

```

#### Parameters

`NewParameter` [IdocSegmentField](../ERPConnect.Idocs.IdocSegmentField/)

Valid IdocSegmentField object

### Add(string)

Creates a new IdocSegmentField object, adds it to the collection and returns it

```csharp
public IdocSegmentField Add(string Name)

```

#### Parameters

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the segment field

#### Returns

[IdocSegmentField](../ERPConnect.Idocs.IdocSegmentField/)

Returns the newly created IdocSegmentField object

### Add(string, string, int, int, string, object)

Creates a new IdocSegmentField object, adds it to the collection and returns the new object

```csharp
public IdocSegmentField Add(string Name, string Description, int Length, int Offset, string DataType, object FieldValue)

```

#### Parameters

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the segment field

`Description` [string](https://learn.microsoft.com/dotnet/api/system.string)

Description of the segment field

`Length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of the segment field

`Offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Offset in data buffer of the segment field

`DataType` [string](https://learn.microsoft.com/dotnet/api/system.string)

Data type of the segment field

`FieldValue` [object](https://learn.microsoft.com/dotnet/api/system.object)

The value

#### Returns

[IdocSegmentField](../ERPConnect.Idocs.IdocSegmentField/)

Returns the newly created IdocSegmentField object

Namespace: [ERPConnect.Idocs](../)\
Assembly: ERPConnectStandard20.dll

IdocStatus represents a single status of an IDoc.

```csharp
public sealed class IdocStatus

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [IdocStatus](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### IdocStatus()

```csharp
public IdocStatus()

```

## Properties

### CreationDateTime

Date and time when this sttus was created

```csharp
public DateTime CreationDateTime { get; set; }

```

#### Property Value

[DateTime](https://learn.microsoft.com/dotnet/api/system.datetime)

### Description

The plain description of this status

```csharp
public string Description { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Status

Status code

```csharp
public string Status { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### StatusVar1

Variable which the description text may contain

```csharp
public string StatusVar1 { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### StatusVar2

Variable which the description text may contain

```csharp
public string StatusVar2 { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### StatusVar3

Variable which the description text may contain

```csharp
public string StatusVar3 { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### StatusVar4

Variable which the description text may contain

```csharp
public string StatusVar4 { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### UserName

Defines the SAP user that has caused this status

```csharp
public string UserName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Classes

[ERPColumnAttribute](ERPConnect.Linq.ERPColumnAttribute/)

[ERPDataContext](ERPConnect.Linq.ERPDataContext/)

[ERPExtensions](ERPConnect.Linq.ERPExtensions/)

[ERPTable<TEntity>](ERPConnect.Linq.ERPTable-1/)

[ERPTableAttribute](ERPConnect.Linq.ERPTableAttribute/)

Namespace: [ERPConnect.Linq](../)\
Assembly: ERPConnectStandard20.dll

This attribute is used to set the original column name.

```csharp
[AttributeUsage(AttributeTargets.Property, AllowMultiple = false)]
public class ERPColumnAttribute : Attribute

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Attribute](https://learn.microsoft.com/dotnet/api/system.attribute) ← [ERPColumnAttribute](./)

#### Inherited Members

[Attribute.GetCustomAttributes(MemberInfo, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-memberinfo-system-type)>), [Attribute.GetCustomAttributes(MemberInfo, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-memberinfo-system-type-system-boolean)>), [Attribute.GetCustomAttributes(MemberInfo)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-memberinfo)>), [Attribute.GetCustomAttributes(MemberInfo, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-memberinfo-system-boolean)>), [Attribute.IsDefined(MemberInfo, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-memberinfo-system-type)>), [Attribute.IsDefined(MemberInfo, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-memberinfo-system-type-system-boolean)>), [Attribute.GetCustomAttribute(MemberInfo, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-memberinfo-system-type)>), [Attribute.GetCustomAttribute(MemberInfo, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-memberinfo-system-type-system-boolean)>), [Attribute.GetCustomAttributes(ParameterInfo)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-parameterinfo)>), [Attribute.GetCustomAttributes(ParameterInfo, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-parameterinfo-system-type)>), [Attribute.GetCustomAttributes(ParameterInfo, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-parameterinfo-system-type-system-boolean)>), [Attribute.GetCustomAttributes(ParameterInfo, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-parameterinfo-system-boolean)>), [Attribute.IsDefined(ParameterInfo, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-parameterinfo-system-type)>), [Attribute.IsDefined(ParameterInfo, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-parameterinfo-system-type-system-boolean)>), [Attribute.GetCustomAttribute(ParameterInfo, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-parameterinfo-system-type)>), [Attribute.GetCustomAttribute(ParameterInfo, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-parameterinfo-system-type-system-boolean)>), [Attribute.GetCustomAttributes(Module, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-module-system-type)>), [Attribute.GetCustomAttributes(Module)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-module)>), [Attribute.GetCustomAttributes(Module, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-module-system-boolean)>), [Attribute.GetCustomAttributes(Module, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-module-system-type-system-boolean)>), [Attribute.IsDefined(Module, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-module-system-type)>), [Attribute.IsDefined(Module, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-module-system-type-system-boolean)>), [Attribute.GetCustomAttribute(Module, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-module-system-type)>), [Attribute.GetCustomAttribute(Module, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-module-system-type-system-boolean)>), [Attribute.GetCustomAttributes(Assembly, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-assembly-system-type)>), [Attribute.GetCustomAttributes(Assembly, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-assembly-system-type-system-boolean)>), [Attribute.GetCustomAttributes(Assembly)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-assembly)>), [Attribute.GetCustomAttributes(Assembly, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-assembly-system-boolean)>), [Attribute.IsDefined(Assembly, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-assembly-system-type)>), [Attribute.IsDefined(Assembly, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-assembly-system-type-system-boolean)>), [Attribute.GetCustomAttribute(Assembly, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-assembly-system-type)>), [Attribute.GetCustomAttribute(Assembly, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-assembly-system-type-system-boolean)>), [Attribute.Equals(object?)](https://learn.microsoft.com/dotnet/api/system.attribute.equals), [Attribute.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.attribute.gethashcode), [Attribute.Match(object?)](https://learn.microsoft.com/dotnet/api/system.attribute.match), [Attribute.IsDefaultAttribute()](https://learn.microsoft.com/dotnet/api/system.attribute.isdefaultattribute), [Attribute.TypeId](https://learn.microsoft.com/dotnet/api/system.attribute.typeid), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### ERPColumnAttribute(string)

Initializes an instance of the ERPColumnAttribute class with a given original column name.

```csharp
public ERPColumnAttribute(string name)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

The name of the original column.

## Properties

### Name

Gets or sets the name of the original column.

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect.Linq](../)\
Assembly: ERPConnectStandard20.dll

Represents the main entry point for the LINQ to ERP framework.

```csharp
public class ERPDataContext : IDisposable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [ERPDataContext](./)

#### Implements

[IDisposable](https://learn.microsoft.com/dotnet/api/system.idisposable)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### ERPDataContext()

Initializes a new instance of the ERPDataContext class.

```csharp
public ERPDataContext()

```

### ERPDataContext(string)

Initializes a new instance of the ERPDataContext class with a given connection string.

```csharp
public ERPDataContext(string connectionString)

```

#### Parameters

`connectionString` [string](https://learn.microsoft.com/dotnet/api/system.string)

The connection string.

### ERPDataContext(string, ClientProtocol)

Initializes a new instance of the ERPDataContext class with a given connection string.

```csharp
public ERPDataContext(string connectionString, ClientProtocol protocol)

```

#### Parameters

`connectionString` [string](https://learn.microsoft.com/dotnet/api/system.string)

The connection string.

`protocol` [ClientProtocol](../../erpconnect/ERPConnect.ClientProtocol/)

Classical or Netweaver protocol.

### ERPDataContext(string, int, string, string, string, string)

Initializes a new instance of the ERPDataContext class with given connection data values.

```csharp
public ERPDataContext(string host, int system, string username, string password, string language, string client)

```

#### Parameters

`host` [string](https://learn.microsoft.com/dotnet/api/system.string)

The host value.

`system` [int](https://learn.microsoft.com/dotnet/api/system.int32)

The system value.

`username` [string](https://learn.microsoft.com/dotnet/api/system.string)

The username value.

`password` [string](https://learn.microsoft.com/dotnet/api/system.string)

The password value.

`language` [string](https://learn.microsoft.com/dotnet/api/system.string)

The language value.

`client` [string](https://learn.microsoft.com/dotnet/api/system.string)

The client value.

### ERPDataContext(string, int, string, string, string, string, ClientProtocol)

Initializes a new instance of the ERPDataContext class with given connection data values.

```csharp
public ERPDataContext(string host, int system, string username, string password, string language, string client, ClientProtocol protocol)

```

#### Parameters

`host` [string](https://learn.microsoft.com/dotnet/api/system.string)

The host value.

`system` [int](https://learn.microsoft.com/dotnet/api/system.int32)

The system value.

`username` [string](https://learn.microsoft.com/dotnet/api/system.string)

The username value.

`password` [string](https://learn.microsoft.com/dotnet/api/system.string)

The password value.

`language` [string](https://learn.microsoft.com/dotnet/api/system.string)

The language value.

`client` [string](https://learn.microsoft.com/dotnet/api/system.string)

The client value.

`protocol` [ClientProtocol](../../erpconnect/ERPConnect.ClientProtocol/)

Classical or Netweaver protocol.

## Properties

### AutoCloseConnection

Gets or sets a value indicating whether to auto-close the connection at disposal.

```csharp
public bool AutoCloseConnection { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Connection

Gets or sets the R3Connection used by this instance of the ERPDataContext.

```csharp
public R3Connection Connection { get; set; }

```

#### Property Value

[R3Connection](../../erpconnect/ERPConnect.R3Connection/)

### Log

Gets and sets the logger object.

```csharp
public TextWriter Log { get; set; }

```

#### Property Value

[TextWriter](https://learn.microsoft.com/dotnet/api/system.io.textwriter)

## Methods

### CheckDispose()

Please refer to the Microsoft documentation as this is a non-ERPConnect method or property

```csharp
protected void CheckDispose()

```

### CommitWork()

Commits work by calling BAPI_TRANSACTION_COMMIT.

```csharp
public bool CommitWork()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Indicates the succes of processing the commit

### CommitWork(bool)

Commits work by calling BAPI_TRANSACTION_COMMIT.

```csharp
public bool CommitWork(bool wait)

```

#### Parameters

`wait` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Defines that method should wait

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Indicates the succes of processing the commit

### Dispose()

Releases all resources used by the ERPDataContext.

```csharp
public void Dispose()

```

### Dispose(bool)

Please refer to the Microsoft documentation as this is a non-ERPConnect method or property

```csharp
protected virtual void Dispose(bool disposing)

```

#### Parameters

`disposing` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Please refer to the Microsoft documentation as this is a non-ERPConnect method or property

### ~ERPDataContext()

Please refer to the Microsoft documentation as this is a non-ERPConnect method or property

```csharp
protected ~ERPDataContext()

```

### GetTable<TEntity>()

Returns a collection of objects of a particular type, where the type is defined by the TEntity parameter.

```csharp
public ERPTable<TEntity> GetTable<TEntity>() where TEntity : class

```

#### Returns

[ERPTable](../ERPConnect.Linq.ERPTable-1/)<TEntity>

A collection of objects.

#### Type Parameters

`TEntity`

### RollbackWork()

Rollbacks work by calling BAPI_TRANSACTION_ROLLBACK.

```csharp
public void RollbackWork()

```

Namespace: [ERPConnect.Linq](../)\
Assembly: ERPConnectStandard20.dll

Represents a ERPConnect exception thrown during the execution of LINQ to ERP commands. This class cannot be inherited.

```csharp
public static class ERPExtensions

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [ERPExtensions](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Methods

### InList(string, params string[])

This method extends the String object and checks if the current string is contained in the given list values.

```csharp
public static bool InList(this string s, params string[] values)

```

#### Parameters

`s` [string](https://learn.microsoft.com/dotnet/api/system.string)

The main String object

`values` [string](https://learn.microsoft.com/dotnet/api/system.string)[]

The value list to check against

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

Returns True if the current String is in the value list

### ToSAPDate(string)

This method extends the String object and checks if the current string is containing a valid SAP date format (YYYYMMDD) and is converting it into an integer. This method is used to support date comparison with LINQ to ERP.

```csharp
public static int ToSAPDate(this string s)

```

#### Parameters

`s` [string](https://learn.microsoft.com/dotnet/api/system.string)

The main String object

#### Returns

[int](https://learn.microsoft.com/dotnet/api/system.int32)

Returns the date as integer, otherwise -1

Namespace: [ERPConnect.Linq](../)\
Assembly: ERPConnectStandard20.dll

Represents a table for a particular type in the underlying SAP system database.

```csharp
public class ERPTable<TEntity> : IOrderedQueryable<TEntity>, IOrderedQueryable, IQueryable<TEntity>, IEnumerable<TEntity>, IQueryable, IEnumerable, IQueryProvider, IListSource

```

#### Type Parameters

`TEntity`

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [ERPTable<TEntity>](./)

#### Implements

[IOrderedQueryable<TEntity>](https://learn.microsoft.com/dotnet/api/system.linq.iorderedqueryable-1), [IOrderedQueryable](https://learn.microsoft.com/dotnet/api/system.linq.iorderedqueryable), [IQueryable<TEntity>](https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1), [IEnumerable<TEntity>](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1), [IQueryable](https://learn.microsoft.com/dotnet/api/system.linq.iqueryable), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable), [IQueryProvider](https://learn.microsoft.com/dotnet/api/system.linq.iqueryprovider), [IListSource](https://learn.microsoft.com/dotnet/api/system.componentmodel.ilistsource)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### ERPTable(R3Connection)

Initializes a new instance of the ERPTable class with a given R3Connection.

```csharp
public ERPTable(R3Connection connection)

```

#### Parameters

`connection` [R3Connection](../../erpconnect/ERPConnect.R3Connection/)

The R3Connection instance.

### ERPTable(R3Connection, TextWriter)

Initializes a new instance of the ERPTable class with a given R3Connection and logger object.

```csharp
public ERPTable(R3Connection connection, TextWriter log)

```

#### Parameters

`connection` [R3Connection](../../erpconnect/ERPConnect.R3Connection/)

The R3Connection instance.

`log` [TextWriter](https://learn.microsoft.com/dotnet/api/system.io.textwriter)

The logger instance.

### ERPTable(ERPDataContext)

Initializes a new instance of the ERPTable class with a given ERPDataContext

```csharp
public ERPTable(ERPDataContext context)

```

#### Parameters

`context` [ERPDataContext](../ERPConnect.Linq.ERPDataContext/)

The ERPDataContext instance.

## Properties

### Connection

Gets the connection object used to connect the underlying database.

```csharp
public R3Connection Connection { get; }

```

#### Property Value

[R3Connection](../../erpconnect/ERPConnect.R3Connection/)

### ContainsListCollection

Gets a value indicating whether the collection is a collection of IList objects.

```csharp
public bool ContainsListCollection { get; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### ElementType

Gets the type of the element(s) that are returned when the expression tree associated with this instance of IQueryable is executed.

```csharp
public Type ElementType { get; }

```

#### Property Value

[Type](https://learn.microsoft.com/dotnet/api/system.type)

### Expression

Gets the expression tree that is associated with the instance of IQueryable.

```csharp
public Expression Expression { get; }

```

#### Property Value

[Expression](https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression)

### Log

Gets and sets the logger object.

```csharp
public TextWriter Log { get; set; }

```

#### Property Value

[TextWriter](https://learn.microsoft.com/dotnet/api/system.io.textwriter)

## Methods

### CreateQuery<TElement>(Expression)

Constructs an IQueryable object that can evaluate the query represented by a specified expression tree.

```csharp
public IQueryable<TElement> CreateQuery<TElement>(Expression expression)

```

#### Parameters

`expression` [Expression](https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression)

An expression tree that represents a LINQ query.

#### Returns

[IQueryable](https://learn.microsoft.com/dotnet/api/system.linq.iqueryable-1)<TElement>

An IQueryable that can evaluate the query represented by the specified expression tree.

#### Type Parameters

`TElement`

### CreateQuery(Expression)

Constructs an IQueryable object that can evaluate the query represented by a specified expression tree.

```csharp
public IQueryable CreateQuery(Expression expression)

```

#### Parameters

`expression` [Expression](https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression)

An expression tree that represents a LINQ query.

#### Returns

[IQueryable](https://learn.microsoft.com/dotnet/api/system.linq.iqueryable)

An IQueryable that can evaluate the query represented by the specified expression tree.

### Execute<TResult>(Expression)

Executes the strongly-typed query represented by a specified expression tree.

```csharp
public TResult Execute<TResult>(Expression expression)

```

#### Parameters

`expression` [Expression](https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression)

An expression tree that represents a LINQ query.

#### Returns

TResult

The value that results from executing the specified query.

#### Type Parameters

`TResult`

The type of the value that results from executing the query.

### Execute(Expression)

Executes the query represented by a specified expression tree.

```csharp
public object Execute(Expression expression)

```

#### Parameters

`expression` [Expression](https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression)

An expression tree that represents a LINQ query.

#### Returns

[object](https://learn.microsoft.com/dotnet/api/system.object)

The value that results from executing the specified query.

### GetEnumerator()

Returns an enumerator that iterates through the collection.

```csharp
public IEnumerator<TEntity> GetEnumerator()

```

#### Returns

[IEnumerator](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1)<TEntity>

### GetList()

Returns an IList that can be bound to a data source.

```csharp
public IList GetList()

```

#### Returns

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist)

Returns the collection.

Namespace: [ERPConnect.Linq](../)\
Assembly: ERPConnectStandard20.dll

This attribute is used to set the original table name and custom function name to read tables.

```csharp
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
public class ERPTableAttribute : Attribute

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Attribute](https://learn.microsoft.com/dotnet/api/system.attribute) ← [ERPTableAttribute](./)

#### Inherited Members

[Attribute.GetCustomAttributes(MemberInfo, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-memberinfo-system-type)>), [Attribute.GetCustomAttributes(MemberInfo, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-memberinfo-system-type-system-boolean)>), [Attribute.GetCustomAttributes(MemberInfo)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-memberinfo)>), [Attribute.GetCustomAttributes(MemberInfo, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-memberinfo-system-boolean)>), [Attribute.IsDefined(MemberInfo, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-memberinfo-system-type)>), [Attribute.IsDefined(MemberInfo, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-memberinfo-system-type-system-boolean)>), [Attribute.GetCustomAttribute(MemberInfo, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-memberinfo-system-type)>), [Attribute.GetCustomAttribute(MemberInfo, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-memberinfo-system-type-system-boolean)>), [Attribute.GetCustomAttributes(ParameterInfo)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-parameterinfo)>), [Attribute.GetCustomAttributes(ParameterInfo, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-parameterinfo-system-type)>), [Attribute.GetCustomAttributes(ParameterInfo, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-parameterinfo-system-type-system-boolean)>), [Attribute.GetCustomAttributes(ParameterInfo, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-parameterinfo-system-boolean)>), [Attribute.IsDefined(ParameterInfo, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-parameterinfo-system-type)>), [Attribute.IsDefined(ParameterInfo, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-parameterinfo-system-type-system-boolean)>), [Attribute.GetCustomAttribute(ParameterInfo, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-parameterinfo-system-type)>), [Attribute.GetCustomAttribute(ParameterInfo, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-parameterinfo-system-type-system-boolean)>), [Attribute.GetCustomAttributes(Module, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-module-system-type)>), [Attribute.GetCustomAttributes(Module)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-module)>), [Attribute.GetCustomAttributes(Module, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-module-system-boolean)>), [Attribute.GetCustomAttributes(Module, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-module-system-type-system-boolean)>), [Attribute.IsDefined(Module, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-module-system-type)>), [Attribute.IsDefined(Module, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-module-system-type-system-boolean)>), [Attribute.GetCustomAttribute(Module, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-module-system-type)>), [Attribute.GetCustomAttribute(Module, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-module-system-type-system-boolean)>), [Attribute.GetCustomAttributes(Assembly, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-assembly-system-type)>), [Attribute.GetCustomAttributes(Assembly, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-assembly-system-type-system-boolean)>), [Attribute.GetCustomAttributes(Assembly)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-assembly)>), [Attribute.GetCustomAttributes(Assembly, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattributes#system-attribute-getcustomattributes(system-reflection-assembly-system-boolean)>), [Attribute.IsDefined(Assembly, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-assembly-system-type)>), [Attribute.IsDefined(Assembly, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.isdefined#system-attribute-isdefined(system-reflection-assembly-system-type-system-boolean)>), [Attribute.GetCustomAttribute(Assembly, Type)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-assembly-system-type)>), [Attribute.GetCustomAttribute(Assembly, Type, bool)](<https://learn.microsoft.com/dotnet/api/system.attribute.getcustomattribute#system-attribute-getcustomattribute(system-reflection-assembly-system-type-system-boolean)>), [Attribute.Equals(object?)](https://learn.microsoft.com/dotnet/api/system.attribute.equals), [Attribute.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.attribute.gethashcode), [Attribute.Match(object?)](https://learn.microsoft.com/dotnet/api/system.attribute.match), [Attribute.IsDefaultAttribute()](https://learn.microsoft.com/dotnet/api/system.attribute.isdefaultattribute), [Attribute.TypeId](https://learn.microsoft.com/dotnet/api/system.attribute.typeid), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### ERPTableAttribute()

Initializes an instance of the ERPTableAttribute class.

```csharp
public ERPTableAttribute()

```

### ERPTableAttribute(string)

Initializes an instance of the ERPTableAttribute class with a given original table name.

```csharp
public ERPTableAttribute(string name)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

## Properties

### CustomFunctionName

Gets and sets the name of the custom function name to read tables.

```csharp
public string CustomFunctionName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Name

Gets and sets the name of the original table.

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Namespaces

[ERPConnect.Queries.QueryHelper](../erpconnect-queryhelper/)

### Classes

[Query](ERPConnect.Queries.Query/)

[QueryField](ERPConnect.Queries.QueryField/)

[QueryFieldCollection](ERPConnect.Queries.QueryFieldCollection/)

[QuerySelectionParameter](ERPConnect.Queries.QuerySelectionParameter/)

[QuerySelectionParameterCollection](ERPConnect.Queries.QuerySelectionParameterCollection/)

[Range](ERPConnect.Queries.Range/)

[RangeCollection](ERPConnect.Queries.RangeCollection/)

### Enums

[Kind](ERPConnect.Queries.Kind/)

[RangeOption](ERPConnect.Queries.RangeOption/)

[Sign](ERPConnect.Queries.Sign/)

[WorkSpace](ERPConnect.Queries.WorkSpace/)

Namespace: [ERPConnect.Queries](../)\
Assembly: ERPConnectStandard20.dll

Enum for the two kinds of selection parameters

```csharp
public enum Kind

```

## Fields

`Parameter = 1`

Parameter

`SelectOption = 0`

Select Option

Namespace: [ERPConnect.Queries](../)\
Assembly: ERPConnectStandard20.dll

Class for executing SAP Queries and retrieving the data.

```csharp
public class Query

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Query](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Query(R3Connection)

Constructs a new query object

```csharp
public Query(R3Connection Connection)

```

#### Parameters

`Connection` [R3Connection](../../erpconnect/ERPConnect.R3Connection/)

A valid connection object

## Properties

### ExternalRepresentation

Set or gets if fields with user exits should be represented in external format

```csharp
public bool ExternalRepresentation { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Fields

Output fields of the query

```csharp
public QueryFieldCollection Fields { get; set; }

```

#### Property Value

[QueryFieldCollection](../ERPConnect.Queries.QueryFieldCollection/)

### MaxRows

The maximum number of rows to be extracted (0 for all)

```csharp
public int MaxRows { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Name

Name of the query

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Result

A ADO .NET DataTable which contains the data result

```csharp
public DataTable Result { get; }

```

#### Property Value

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

### SelectionParameters

A collection of SelectParameters which represent the selection screen of the query

```csharp
public QuerySelectionParameterCollection SelectionParameters { get; set; }

```

#### Property Value

[QuerySelectionParameterCollection](../ERPConnect.Queries.QuerySelectionParameterCollection/)

### UserGroup

Name of the user group

```csharp
public string UserGroup { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Variant

Name of the variant (if used)

```csharp
public string Variant { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### WorkArea

The current query workspace

```csharp
public WorkSpace WorkArea { get; set; }

```

#### Property Value

[WorkSpace](../ERPConnect.Queries.WorkSpace/)

## Methods

### Execute()

Executes the query and fills the Result property

```csharp
public void Execute()

```

### ToString()

Retrieves a textual description of the whole query structure

```csharp
public override string ToString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

Query structure

Namespace: [ERPConnect.Queries](../)\
Assembly: ERPConnectStandard20.dll

QueryField.

```csharp
public class QueryField

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [QueryField](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### QueryField()

Constructs an empty Query field object

```csharp
public QueryField()

```

### QueryField(string, string, int, int, string)

Constructs an QueryField object

```csharp
public QueryField(string Name, string ABAPType, int Length, int Decimals, string Description)

```

#### Parameters

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the field

`ABAPType` [string](https://learn.microsoft.com/dotnet/api/system.string)

ABAP type

`Length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Length of field

`Decimals` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Number of decimals digits

`Description` [string](https://learn.microsoft.com/dotnet/api/system.string)

Description

## Properties

### ABAPType

ABAP type

```csharp
public string ABAPType { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Decimals

Number of decimals digits

```csharp
public int Decimals { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Description

Description

```csharp
public string Description { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Length

Length of field

```csharp
public int Length { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Name

Name of the field

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect.Queries](../)\
Assembly: ERPConnectStandard20.dll

A collection of QueryField objects

```csharp
public class QueryFieldCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [QueryFieldCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.OnSet(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onset), [CollectionBase.OnInsert(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsert), [CollectionBase.OnClear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclear), [CollectionBase.OnRemove(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremove), [CollectionBase.OnValidate(object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onvalidate), [CollectionBase.OnSetComplete(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onsetcomplete), [CollectionBase.OnInsertComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsertcomplete), [CollectionBase.OnClearComplete()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclearcomplete), [CollectionBase.OnRemoveComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremovecomplete), [CollectionBase.InnerList](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.innerlist), [CollectionBase.List](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.list), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### QueryFieldCollection()

```csharp
public QueryFieldCollection()

```

## Properties

### this[int]

Returns the QueryField object at the given position

```csharp
public virtual QueryField this[int Index] { get; set; }

```

#### Property Value

[QueryField](../ERPConnect.Queries.QueryField/)

### this[string]

Returns the QueryField object with the given name

```csharp
public virtual QueryField this[string Name] { get; set; }

```

#### Property Value

[QueryField](../ERPConnect.Queries.QueryField/)

## Methods

### Add(QueryField)

Adds a new object to the collection

```csharp
public virtual void Add(QueryField NewParameter)

```

#### Parameters

`NewParameter` [QueryField](../ERPConnect.Queries.QueryField/)

Namespace: [ERPConnect.Queries](../)\
Assembly: ERPConnectStandard20.dll

QuerySelection.

```csharp
public class QuerySelectionParameter

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [QuerySelectionParameter](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### QuerySelectionParameter()

Constructs a new QuerySelectionParameter object

```csharp
public QuerySelectionParameter()

```

### QuerySelectionParameter(string, string, string, int, bool, bool, Kind)

Constructs a new QuerySelectionParameter object

```csharp
public QuerySelectionParameter(string Name, string FieldName, string DescriptionText, int Length, bool Obligatory, bool NoDisplay, Kind Kind)

```

#### Parameters

`Name` [string](https://learn.microsoft.com/dotnet/api/system.string)

`FieldName` [string](https://learn.microsoft.com/dotnet/api/system.string)

`DescriptionText` [string](https://learn.microsoft.com/dotnet/api/system.string)

`Length` [int](https://learn.microsoft.com/dotnet/api/system.int32)

`Obligatory` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

`NoDisplay` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

`Kind` [Kind](../ERPConnect.Queries.Kind/)

## Properties

### ABAPType

The ABAP type (e.g. C,N,I....)

```csharp
public string ABAPType { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### DescriptionText

A description text

```csharp
public string DescriptionText { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### FieldName

The name of the field

```csharp
public string FieldName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Kind

Determines if the Selection Parameter is a Select Option or only a single Parameter

```csharp
public Kind Kind { get; set; }

```

#### Property Value

[Kind](../ERPConnect.Queries.Kind/)

### Length

The length of the value, if it is not numeric

```csharp
public int Length { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### Name

The unique name of the parameter

```csharp
public string Name { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### NoDisplay

Determines whether the Selection Parameter is not displayed on a normal selection screen

```csharp
public bool NoDisplay { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Obligatory

Determines whether the value is obligatory

```csharp
public bool Obligatory { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Ranges

The Range collection associated with this QuerySelectionParameter object

```csharp
public RangeCollection Ranges { get; set; }

```

#### Property Value

[RangeCollection](../ERPConnect.Queries.RangeCollection/)

## Methods

### AddRange(Sign, RangeOption, string, string)

Adds a new Range object to the Ranges collection

```csharp
public virtual void AddRange(Sign Sign, RangeOption Option, string LowValue, string HighValue)

```

#### Parameters

`Sign` [Sign](../ERPConnect.Queries.Sign/)

Sign Inlcude / Exclude

`Option` [RangeOption](../ERPConnect.Queries.RangeOption/)

Option (e.g. Equals, GreaterThan...)

`LowValue` [string](https://learn.microsoft.com/dotnet/api/system.string)

The first / low value

`HighValue` [string](https://learn.microsoft.com/dotnet/api/system.string)

The second / high value (only needed when Option is bt for between)

### AddRange(Sign, RangeOption, string)

Adds a new Range object to the Ranges collection

```csharp
public virtual void AddRange(Sign Sign, RangeOption Option, string Value)

```

#### Parameters

`Sign` [Sign](../ERPConnect.Queries.Sign/)

Sign Inlcude / Exclude

`Option` [RangeOption](../ERPConnect.Queries.RangeOption/)

Option (e.g. Equals, GreaterThan...)

`Value` [string](https://learn.microsoft.com/dotnet/api/system.string)

The value

### AddRange(string)

Adds a new Range object to the Ranges collection

```csharp
public virtual void AddRange(string Value)

```

#### Parameters

`Value` [string](https://learn.microsoft.com/dotnet/api/system.string)

The value

Namespace: [ERPConnect.Queries](../)\
Assembly: ERPConnectStandard20.dll

A collection to store QuerySelectionParameter objects

```csharp
public class QuerySelectionParameterCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [QuerySelectionParameterCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.OnSet(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onset), [CollectionBase.OnInsert(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsert), [CollectionBase.OnClear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclear), [CollectionBase.OnRemove(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremove), [CollectionBase.OnValidate(object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onvalidate), [CollectionBase.OnSetComplete(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onsetcomplete), [CollectionBase.OnInsertComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsertcomplete), [CollectionBase.OnClearComplete()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclearcomplete), [CollectionBase.OnRemoveComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremovecomplete), [CollectionBase.InnerList](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.innerlist), [CollectionBase.List](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.list), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### QuerySelectionParameterCollection()

```csharp
public QuerySelectionParameterCollection()

```

## Properties

### this[int]

Returns a QuerySelectionParameter object at the given position of the collection

```csharp
public virtual QuerySelectionParameter this[int Index] { get; set; }

```

#### Property Value

[QuerySelectionParameter](../ERPConnect.Queries.QuerySelectionParameter/)

### this[string]

Returns a QuerySelectionParameter object with the given name

```csharp
public virtual QuerySelectionParameter this[string Name] { get; set; }

```

#### Property Value

[QuerySelectionParameter](../ERPConnect.Queries.QuerySelectionParameter/)

## Methods

### Add(QuerySelectionParameter)

Adds a new QuerySelectionParameter object to the collection

```csharp
public virtual void Add(QuerySelectionParameter NewParameter)

```

#### Parameters

`NewParameter` [QuerySelectionParameter](../ERPConnect.Queries.QuerySelectionParameter/)

Existing QuerySelectionParameter object

Namespace: [ERPConnect.Queries](../)\
Assembly: ERPConnectStandard20.dll

QuerySelectionRange.

```csharp
public class Range

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Range](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Range()

Constructs a new Range object

```csharp
public Range()

```

### Range(Sign, RangeOption, string, string)

Constructs a new Range object

```csharp
public Range(Sign Sign, RangeOption Option, string LowValue, string HighValue)

```

#### Parameters

`Sign` [Sign](../ERPConnect.Queries.Sign/)

Sign (e.g. Include)

`Option` [RangeOption](../ERPConnect.Queries.RangeOption/)

Option (e.g. Between)

`LowValue` [string](https://learn.microsoft.com/dotnet/api/system.string)

The low value of this Range object

`HighValue` [string](https://learn.microsoft.com/dotnet/api/system.string)

The high value of this Range object

## Properties

### HighValue

The high value of this Range object

```csharp
public string HighValue { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### LowValue

The low value of this Range object

```csharp
public string LowValue { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Option

Option (e.g. Between)

```csharp
public RangeOption Option { get; set; }

```

#### Property Value

[RangeOption](../ERPConnect.Queries.RangeOption/)

### Sign

Sign (e.g. Include)

```csharp
public Sign Sign { get; set; }

```

#### Property Value

[Sign](../ERPConnect.Queries.Sign/)

Namespace: [ERPConnect.Queries](../)\
Assembly: ERPConnectStandard20.dll

This class repesents a collection of Range objects

```csharp
public class RangeCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [RangeCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.OnSet(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onset), [CollectionBase.OnInsert(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsert), [CollectionBase.OnClear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclear), [CollectionBase.OnRemove(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremove), [CollectionBase.OnValidate(object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onvalidate), [CollectionBase.OnSetComplete(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onsetcomplete), [CollectionBase.OnInsertComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsertcomplete), [CollectionBase.OnClearComplete()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclearcomplete), [CollectionBase.OnRemoveComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremovecomplete), [CollectionBase.InnerList](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.innerlist), [CollectionBase.List](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.list), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### RangeCollection()

```csharp
public RangeCollection()

```

## Properties

### this[int]

Returns the Range object at the given index

```csharp
public virtual Range this[int Index] { get; set; }

```

#### Property Value

[Range](../ERPConnect.Queries.Range/)

## Methods

### Add(Range)

Adds a new Range object to the collection

```csharp
public virtual void Add(Range NewParameter)

```

#### Parameters

`NewParameter` [Range](../ERPConnect.Queries.Range/)

The Range object to be added

### Add(Sign, RangeOption, string, string)

Creates a new Range object and adds it to the collection

```csharp
public virtual void Add(Sign Sign, RangeOption Option, string LowValue, string HighValue)

```

#### Parameters

`Sign` [Sign](../ERPConnect.Queries.Sign/)

Sign (e.g. Include)

`Option` [RangeOption](../ERPConnect.Queries.RangeOption/)

Option (e.g. Between)

`LowValue` [string](https://learn.microsoft.com/dotnet/api/system.string)

The low value of the Range object

`HighValue` [string](https://learn.microsoft.com/dotnet/api/system.string)

The high value of the Range object

### Add(Sign, RangeOption, string)

Creates a new Range object and adds it to the collection

```csharp
public virtual void Add(Sign Sign, RangeOption Option, string Value)

```

#### Parameters

`Sign` [Sign](../ERPConnect.Queries.Sign/)

Sign (e.g. Include)

`Option` [RangeOption](../ERPConnect.Queries.RangeOption/)

Option (e.g. Between)

`Value` [string](https://learn.microsoft.com/dotnet/api/system.string)

The value of the Range object

### Add(string)

Creates a new Range object and adds it to the collection

```csharp
public virtual void Add(string Value)

```

#### Parameters

`Value` [string](https://learn.microsoft.com/dotnet/api/system.string)

Value

Namespace: [ERPConnect.Queries](../)\
Assembly: ERPConnectStandard20.dll

Enum for logical operators

```csharp
public enum RangeOption

```

## Fields

`Between = 6`

Between

`Equals = 0`

Equals / =

`GreaterThan = 2`

Greater Than / >

`GreaterThanOrEqualTo = 4`

Greater Than Or Equal To /

`LessThan = 3`

Less Than

`LessThanOrEqualTo = 5`

Less Than Ot Equal To

`MatchesPattern = 8`

Matches Pattern

`NotBetween = 7`

Not Between /

`NotEquals = 1`

Not Equals / !=

`NotMatchesPattern = 9`

Not Patches Pattern

Namespace: [ERPConnect.Queries](../)\
Assembly: ERPConnectStandard20.dll

Enum for options for including or excluding values of ranges.

```csharp
public enum Sign

```

## Fields

`Exclude = 1`

Exclude

`Include = 0`

Include

Namespace: [ERPConnect.Queries](../)\
Assembly: ERPConnectStandard20.dll

Enum for Query Work Areas

```csharp
public enum WorkSpace

```

## Fields

`GlobalArea = 1`

Global Area (Cross-client)

`StandardArea = 0`

Standard Area (Client-specific)

### Classes

[QueryHelper](ERPConnect.Queries.QueryHelper.QueryHelper/)

[SearchResultQueryDataTable](ERPConnect.Queries.QueryHelper.SearchResultQueryDataTable/)

[SearchResultQueryRow](ERPConnect.Queries.QueryHelper.SearchResultQueryRow/)

[SearchResultUserGroupsDataTable](ERPConnect.Queries.QueryHelper.SearchResultUserGroupsDataTable/)

[SearchResultUserGroupsRow](ERPConnect.Queries.QueryHelper.SearchResultUserGroupsRow/)

[SearchResultVariantsDataTable](ERPConnect.Queries.QueryHelper.SearchResultVariantsDataTable/)

[SearchResultVariantsRow](ERPConnect.Queries.QueryHelper.SearchResultVariantsRow/)

Namespace: [ERPConnect.Queries.QueryHelper](../)\
Assembly: ERPConnectStandard20.dll

This class provides several search functions for queries (e.g. variants...)

```csharp
public class QueryHelper

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [QueryHelper](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### QueryHelper(R3Connection)

Constructs a QueryHelper object

```csharp
public QueryHelper(R3Connection Con)

```

#### Parameters

`Con` [R3Connection](../../erpconnect/ERPConnect.R3Connection/)

A valid R3Connection object

## Properties

### Connection

Get / Sets an R3Connection object

```csharp
public R3Connection Connection { get; set; }

```

#### Property Value

[R3Connection](../../erpconnect/ERPConnect.R3Connection/)

## Methods

### SearchForQueries(WorkSpace, string, string, string)

Searches for queries by using the given search patterns

```csharp
public SearchResultQueryDataTable SearchForQueries(WorkSpace WorkSpace, string SearchPatternUserGroup, string SearchPatternQueryName, string SearchPatternFunctionAreaName)

```

#### Parameters

`WorkSpace` [WorkSpace](../../erpconnect-queries/ERPConnect.Queries.WorkSpace/)

Workspace local / global

`SearchPatternUserGroup` [string](https://learn.microsoft.com/dotnet/api/system.string)

Search pattern for the user group (you can use \*)

`SearchPatternQueryName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Search pattern for the query name (you can use \*)

`SearchPatternFunctionAreaName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Search pattern for the function area (you can use \*)

#### Returns

[SearchResultQueryDataTable](../ERPConnect.Queries.QueryHelper.SearchResultQueryDataTable/)

A DataTable which contains the search result set

### SearchForUserGroups(WorkSpace, string)

Searches for user groups

```csharp
public SearchResultUserGroupsDataTable SearchForUserGroups(WorkSpace WorkSpace, string UserGroupSearchPattern)

```

#### Parameters

`WorkSpace` [WorkSpace](../../erpconnect-queries/ERPConnect.Queries.WorkSpace/)

Workspace local / global

`UserGroupSearchPattern` [string](https://learn.microsoft.com/dotnet/api/system.string)

Search string for user groupy (you can use * as well)

#### Returns

[SearchResultUserGroupsDataTable](../ERPConnect.Queries.QueryHelper.SearchResultUserGroupsDataTable/)

SearchResultUserGroupsDataTable which contains the result set

#### Examples

The example below shows how to retrieve every user group in the system (search pattern \*)

```
R3Connection con = new R3Connection("hamlet",11,"Theobald","pw","EN","800");

con.Open();

QueryHelper qh = new QueryHelper(con);
SearchResultUserGroupsDataTable ret =  qh.SearchForUserGroups(WorkSpace.GlobalArea,"*");

Form1 f1 = new Form1();
f1.dataGrid1.DataSource = ret;
f1.ShowDialog();
```

### SearchForVariants(WorkSpace, string, string)

Searches for variants to a given query

```csharp
public SearchResultVariantsDataTable SearchForVariants(WorkSpace WorkSpace, string UserGroupName, string QueryName)

```

#### Parameters

`WorkSpace` [WorkSpace](../../erpconnect-queries/ERPConnect.Queries.WorkSpace/)

Workspace local / global

`UserGroupName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the user group

`QueryName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the query

#### Returns

[SearchResultVariantsDataTable](../ERPConnect.Queries.QueryHelper.SearchResultVariantsDataTable/)

SearchResultVariantsDataTable which contains the result set

#### Examples

[ C# ]

```
R3Connection con = new R3Connection( ... );

con.Open();

QueryHelper qh = new QueryHelper(con);
SearchResultVariantsDataTable ret =  qh.SearchForVariants(WorkSpace.GlobalArea,"/SAPQUERY/MB","MEBESTWERTAN");

Form1 f1 = new Form1();
f1.dataGrid1.DataSource = ret;
f1.ShowDialog();
```

Namespace: [ERPConnect.Queries.QueryHelper](../)\
Assembly: ERPConnectStandard20.dll

DataTable object

```csharp
public class SearchResultQueryDataTable : DataTable, IComponent, IDisposable, IServiceProvider, IListSource, ISupportInitializeNotification, ISupportInitialize, ISerializable, IXmlSerializable, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [MarshalByValueComponent](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent) ← [DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable) ← [SearchResultQueryDataTable](./)

#### Implements

[IComponent](https://learn.microsoft.com/dotnet/api/system.componentmodel.icomponent), [IDisposable](https://learn.microsoft.com/dotnet/api/system.idisposable), [IServiceProvider](https://learn.microsoft.com/dotnet/api/system.iserviceprovider), [IListSource](https://learn.microsoft.com/dotnet/api/system.componentmodel.ilistsource), [ISupportInitializeNotification](https://learn.microsoft.com/dotnet/api/system.componentmodel.isupportinitializenotification), [ISupportInitialize](https://learn.microsoft.com/dotnet/api/system.componentmodel.isupportinitialize), [ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable), IXmlSerializable, [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[DataTable.fInitInProgress](https://learn.microsoft.com/dotnet/api/system.data.datatable.finitinprogress), [DataTable.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.data.datatable.getobjectdata), [DataTable.BeginInit()](https://learn.microsoft.com/dotnet/api/system.data.datatable.begininit), [DataTable.EndInit()](https://learn.microsoft.com/dotnet/api/system.data.datatable.endinit), [DataTable.AcceptChanges()](https://learn.microsoft.com/dotnet/api/system.data.datatable.acceptchanges), [DataTable.CreateInstance()](https://learn.microsoft.com/dotnet/api/system.data.datatable.createinstance), [DataTable.Clone()](https://learn.microsoft.com/dotnet/api/system.data.datatable.clone), [DataTable.Copy()](https://learn.microsoft.com/dotnet/api/system.data.datatable.copy), [DataTable.Clear()](https://learn.microsoft.com/dotnet/api/system.data.datatable.clear), [DataTable.Compute(string, string)](https://learn.microsoft.com/dotnet/api/system.data.datatable.compute), [DataTable.GetChanges()](https://learn.microsoft.com/dotnet/api/system.data.datatable.getchanges#system-data-datatable-getchanges), [DataTable.GetChanges(DataRowState)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.getchanges#system-data-datatable-getchanges(system-data-datarowstate)>), [DataTable.GetErrors()](https://learn.microsoft.com/dotnet/api/system.data.datatable.geterrors), [DataTable.ImportRow(DataRow)](https://learn.microsoft.com/dotnet/api/system.data.datatable.importrow), [DataTable.NewRow()](https://learn.microsoft.com/dotnet/api/system.data.datatable.newrow), [DataTable.NewRowFromBuilder(DataRowBuilder)](https://learn.microsoft.com/dotnet/api/system.data.datatable.newrowfrombuilder), [DataTable.GetRowType()](https://learn.microsoft.com/dotnet/api/system.data.datatable.getrowtype), [DataTable.NewRowArray(int)](https://learn.microsoft.com/dotnet/api/system.data.datatable.newrowarray), [DataTable.OnColumnChanging(DataColumnChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.oncolumnchanging), [DataTable.OnColumnChanged(DataColumnChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.oncolumnchanged), [DataTable.OnPropertyChanging(PropertyChangedEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onpropertychanging), [DataTable.OnRemoveColumn(DataColumn)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onremovecolumn), [DataTable.OnRowChanged(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowchanged), [DataTable.OnRowChanging(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowchanging), [DataTable.OnRowDeleting(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowdeleting), [DataTable.OnRowDeleted(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowdeleted), [DataTable.OnTableCleared(DataTableClearEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.ontablecleared), [DataTable.OnTableClearing(DataTableClearEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.ontableclearing), [DataTable.OnTableNewRow(DataTableNewRowEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.ontablenewrow), [DataTable.RejectChanges()](https://learn.microsoft.com/dotnet/api/system.data.datatable.rejectchanges), [DataTable.Reset()](https://learn.microsoft.com/dotnet/api/system.data.datatable.reset), [DataTable.Select()](https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select), [DataTable.Select(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select(system-string)>), [DataTable.Select(string, string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select(system-string-system-string)>), [DataTable.Select(string, string, DataViewRowState)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select(system-string-system-string-system-data-dataviewrowstate)>), [DataTable.ToString()](https://learn.microsoft.com/dotnet/api/system.data.datatable.tostring), [DataTable.BeginLoadData()](https://learn.microsoft.com/dotnet/api/system.data.datatable.beginloaddata), [DataTable.EndLoadData()](https://learn.microsoft.com/dotnet/api/system.data.datatable.endloaddata), [DataTable.LoadDataRow(object[], bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.loaddatarow#system-data-datatable-loaddatarow(system-object()-system-boolean)>), [DataTable.LoadDataRow(object[], LoadOption)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.loaddatarow#system-data-datatable-loaddatarow(system-object()-system-data-loadoption)>), [DataTable.Merge(DataTable)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.merge#system-data-datatable-merge(system-data-datatable)>), [DataTable.Merge(DataTable, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.merge#system-data-datatable-merge(system-data-datatable-system-boolean)>), [DataTable.Merge(DataTable, bool, MissingSchemaAction)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.merge#system-data-datatable-merge(system-data-datatable-system-boolean-system-data-missingschemaaction)>), [DataTable.Load(IDataReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.load#system-data-datatable-load(system-data-idatareader)>), [DataTable.Load(IDataReader, LoadOption)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.load#system-data-datatable-load(system-data-idatareader-system-data-loadoption)>), [DataTable.Load(IDataReader, LoadOption, FillErrorEventHandler)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.load#system-data-datatable-load(system-data-idatareader-system-data-loadoption-system-data-fillerroreventhandler)>), [DataTable.CreateDataReader()](https://learn.microsoft.com/dotnet/api/system.data.datatable.createdatareader), [DataTable.WriteXml(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream)>), [DataTable.WriteXml(Stream, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream-system-boolean)>), [DataTable.WriteXml(TextWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter)>), [DataTable.WriteXml(TextWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter-system-boolean)>), [DataTable.WriteXml(XmlWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter)>), [DataTable.WriteXml(XmlWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter-system-boolean)>), [DataTable.WriteXml(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string)>), [DataTable.WriteXml(string, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string-system-boolean)>), [DataTable.WriteXml(Stream, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream-system-data-xmlwritemode)>), [DataTable.WriteXml(Stream, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXml(TextWriter, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter-system-data-xmlwritemode)>), [DataTable.WriteXml(TextWriter, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXml(XmlWriter, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter-system-data-xmlwritemode)>), [DataTable.WriteXml(XmlWriter, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXml(string, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string-system-data-xmlwritemode)>), [DataTable.WriteXml(string, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXmlSchema(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-stream)>), [DataTable.WriteXmlSchema(Stream, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-stream-system-boolean)>), [DataTable.WriteXmlSchema(TextWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-textwriter)>), [DataTable.WriteXmlSchema(TextWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-textwriter-system-boolean)>), [DataTable.WriteXmlSchema(XmlWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-xml-xmlwriter)>), [DataTable.WriteXmlSchema(XmlWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-xml-xmlwriter-system-boolean)>), [DataTable.WriteXmlSchema(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-string)>), [DataTable.WriteXmlSchema(string, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-string-system-boolean)>), [DataTable.ReadXml(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-io-stream)>), [DataTable.ReadXml(TextReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-io-textreader)>), [DataTable.ReadXml(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-string)>), [DataTable.ReadXml(XmlReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-xml-xmlreader)>), [DataTable.ReadXmlSchema(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-io-stream)>), [DataTable.ReadXmlSchema(TextReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-io-textreader)>), [DataTable.ReadXmlSchema(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-string)>), [DataTable.ReadXmlSchema(XmlReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-xml-xmlreader)>), [DataTable.GetDataTableSchema(XmlSchemaSet)](https://learn.microsoft.com/dotnet/api/system.data.datatable.getdatatableschema), [DataTable.GetSchema()](https://learn.microsoft.com/dotnet/api/system.data.datatable.getschema), [DataTable.ReadXmlSerializable(XmlReader)](https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlserializable), [DataTable.CaseSensitive](https://learn.microsoft.com/dotnet/api/system.data.datatable.casesensitive), [DataTable.IsInitialized](https://learn.microsoft.com/dotnet/api/system.data.datatable.isinitialized), [DataTable.RemotingFormat](https://learn.microsoft.com/dotnet/api/system.data.datatable.remotingformat), [DataTable.ChildRelations](https://learn.microsoft.com/dotnet/api/system.data.datatable.childrelations), [DataTable.Columns](https://learn.microsoft.com/dotnet/api/system.data.datatable.columns), [DataTable.Constraints](https://learn.microsoft.com/dotnet/api/system.data.datatable.constraints), [DataTable.DataSet](https://learn.microsoft.com/dotnet/api/system.data.datatable.dataset), [DataTable.DefaultView](https://learn.microsoft.com/dotnet/api/system.data.datatable.defaultview), [DataTable.DisplayExpression](https://learn.microsoft.com/dotnet/api/system.data.datatable.displayexpression), [DataTable.ExtendedProperties](https://learn.microsoft.com/dotnet/api/system.data.datatable.extendedproperties), [DataTable.HasErrors](https://learn.microsoft.com/dotnet/api/system.data.datatable.haserrors), [DataTable.Locale](https://learn.microsoft.com/dotnet/api/system.data.datatable.locale), [DataTable.MinimumCapacity](https://learn.microsoft.com/dotnet/api/system.data.datatable.minimumcapacity), [DataTable.ParentRelations](https://learn.microsoft.com/dotnet/api/system.data.datatable.parentrelations), [DataTable.PrimaryKey](https://learn.microsoft.com/dotnet/api/system.data.datatable.primarykey), [DataTable.Rows](https://learn.microsoft.com/dotnet/api/system.data.datatable.rows), [DataTable.TableName](https://learn.microsoft.com/dotnet/api/system.data.datatable.tablename), [DataTable.Namespace](https://learn.microsoft.com/dotnet/api/system.data.datatable.namespace), [DataTable.Prefix](https://learn.microsoft.com/dotnet/api/system.data.datatable.prefix), [DataTable.Site](https://learn.microsoft.com/dotnet/api/system.data.datatable.site), [DataTable.ColumnChanging](https://learn.microsoft.com/dotnet/api/system.data.datatable.columnchanging), [DataTable.ColumnChanged](https://learn.microsoft.com/dotnet/api/system.data.datatable.columnchanged), [DataTable.Initialized](https://learn.microsoft.com/dotnet/api/system.data.datatable.initialized), [DataTable.RowChanged](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowchanged), [DataTable.RowChanging](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowchanging), [DataTable.RowDeleting](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowdeleting), [DataTable.RowDeleted](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowdeleted), [DataTable.TableClearing](https://learn.microsoft.com/dotnet/api/system.data.datatable.tableclearing), [DataTable.TableCleared](https://learn.microsoft.com/dotnet/api/system.data.datatable.tablecleared), [DataTable.TableNewRow](https://learn.microsoft.com/dotnet/api/system.data.datatable.tablenewrow), [MarshalByValueComponent.Dispose()](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.dispose#system-componentmodel-marshalbyvaluecomponent-dispose), [MarshalByValueComponent.Dispose(bool)](<https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.dispose#system-componentmodel-marshalbyvaluecomponent-dispose(system-boolean)>), [MarshalByValueComponent.GetService(Type)](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.getservice), [MarshalByValueComponent.ToString()](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.tostring), [MarshalByValueComponent.Events](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.events), [MarshalByValueComponent.Site](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.site), [MarshalByValueComponent.Container](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.container), [MarshalByValueComponent.DesignMode](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.designmode), [MarshalByValueComponent.Disposed](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.disposed), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### Count

Returns the number of rows

```csharp
[Browsable(false)]
public int Count { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### this[int]

Returns a row at a given position

```csharp
public SearchResultQueryRow this[int index] { get; }

```

#### Property Value

[SearchResultQueryRow](../ERPConnect.Queries.QueryHelper.SearchResultQueryRow/)

## Methods

### AddSearchResultQueryRow(SearchResultQueryRow)

Add a new AddSearchResultQueryRow object to the table

```csharp
public void AddSearchResultQueryRow(SearchResultQueryRow row)

```

#### Parameters

`row` [SearchResultQueryRow](../ERPConnect.Queries.QueryHelper.SearchResultQueryRow/)

New AddSearchResultQueryRow object

### AddSearchResultQueryRow(string, string, string)

Add a new AddSearchResultQueryRow object to the table

```csharp
public SearchResultQueryRow AddSearchResultQueryRow(string QueryName, string UserGroup, string DescriptionText)

```

#### Parameters

`QueryName` [string](https://learn.microsoft.com/dotnet/api/system.string)

QueryName

`UserGroup` [string](https://learn.microsoft.com/dotnet/api/system.string)

UserGroup

`DescriptionText` [string](https://learn.microsoft.com/dotnet/api/system.string)

DescriptionText

#### Returns

[SearchResultQueryRow](../ERPConnect.Queries.QueryHelper.SearchResultQueryRow/)

-

### Clone()

Creates an empty Datatable object with the same structure

```csharp
public override DataTable Clone()

```

#### Returns

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

Empty Datatable object

### CreateInstance()

Creates a new object of the DataTable class

```csharp
protected override DataTable CreateInstance()

```

#### Returns

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

The newly created object

### GetEnumerator()

GetEnumerator()

```csharp
public IEnumerator GetEnumerator()

```

#### Returns

[IEnumerator](https://learn.microsoft.com/dotnet/api/system.collections.ienumerator)

System.Collections.IEnumerator

### GetRowType()

DataTable related method, please have a look at the manual provided by Microsoft

```csharp
protected override Type GetRowType()

```

#### Returns

[Type](https://learn.microsoft.com/dotnet/api/system.type)

DataTable related method, please have a look at the manual provided by Microsoft

### NewRowFromBuilder(DataRowBuilder)

DataTable related method, please have a look at the manual provided by Microsoft

```csharp
protected override DataRow NewRowFromBuilder(DataRowBuilder builder)

```

#### Parameters

`builder` [DataRowBuilder](https://learn.microsoft.com/dotnet/api/system.data.datarowbuilder)

DataTable related method, please have a look at the manual provided by Microsoft

#### Returns

[DataRow](https://learn.microsoft.com/dotnet/api/system.data.datarow)

DataTable related method, please have a look at the manual provided by Microsoft

### NewSearchResultQueryRow()

Creates a new SearchResultQueryRow object

```csharp
public SearchResultQueryRow NewSearchResultQueryRow()

```

#### Returns

[SearchResultQueryRow](../ERPConnect.Queries.QueryHelper.SearchResultQueryRow/)

New SearchResultQueryRow object

### OnRowChanged(DataRowChangeEventArgs)

DataTable related method, please have a look at the manual provided by Microsoft

```csharp
protected override void OnRowChanged(DataRowChangeEventArgs e)

```

#### Parameters

`e` [DataRowChangeEventArgs](https://learn.microsoft.com/dotnet/api/system.data.datarowchangeeventargs)

DataTable related method, please have a look at the manual provided by Microsoft

### OnRowChanging(DataRowChangeEventArgs)

DataTable related method, please have a look at the manual provided by Microsoft

```csharp
protected override void OnRowChanging(DataRowChangeEventArgs e)

```

#### Parameters

`e` [DataRowChangeEventArgs](https://learn.microsoft.com/dotnet/api/system.data.datarowchangeeventargs)

DataTable related method, please have a look at the manual provided by Microsoft

### OnRowDeleted(DataRowChangeEventArgs)

DataTable related method, please have a look at the manual provided by Microsoft

```csharp
protected override void OnRowDeleted(DataRowChangeEventArgs e)

```

#### Parameters

`e` [DataRowChangeEventArgs](https://learn.microsoft.com/dotnet/api/system.data.datarowchangeeventargs)

DataTable related method, please have a look at the manual provided by Microsoft

### OnRowDeleting(DataRowChangeEventArgs)

DataTable related method, please have a look at the manual provided by Microsoft

```csharp
protected override void OnRowDeleting(DataRowChangeEventArgs e)

```

#### Parameters

`e` [DataRowChangeEventArgs](https://learn.microsoft.com/dotnet/api/system.data.datarowchangeeventargs)

DataTable related method, please have a look at the manual provided by Microsoft

### RemoveSearchResultQueryRow(SearchResultQueryRow)

DataTable related method, please have a look at the manual provided by Microsoft

```csharp
public void RemoveSearchResultQueryRow(SearchResultQueryRow row)

```

#### Parameters

`row` [SearchResultQueryRow](../ERPConnect.Queries.QueryHelper.SearchResultQueryRow/)

DataTable related method, please have a look at the manual provided by Microsoft

Namespace: [ERPConnect.Queries.QueryHelper](../)\
Assembly: ERPConnectStandard20.dll

The class repesents DataRow object for the result set when serching for SAP queries

```csharp
public class SearchResultQueryRow : DataRow

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [DataRow](https://learn.microsoft.com/dotnet/api/system.data.datarow) ← [SearchResultQueryRow](./)

#### Inherited Members

[DataRow.AcceptChanges()](https://learn.microsoft.com/dotnet/api/system.data.datarow.acceptchanges), [DataRow.BeginEdit()](https://learn.microsoft.com/dotnet/api/system.data.datarow.beginedit), [DataRow.CancelEdit()](https://learn.microsoft.com/dotnet/api/system.data.datarow.canceledit), [DataRow.Delete()](https://learn.microsoft.com/dotnet/api/system.data.datarow.delete), [DataRow.EndEdit()](https://learn.microsoft.com/dotnet/api/system.data.datarow.endedit), [DataRow.SetColumnError(int, string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setcolumnerror#system-data-datarow-setcolumnerror(system-int32-system-string)>), [DataRow.SetColumnError(string, string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setcolumnerror#system-data-datarow-setcolumnerror(system-string-system-string)>), [DataRow.SetColumnError(DataColumn, string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setcolumnerror#system-data-datarow-setcolumnerror(system-data-datacolumn-system-string)>), [DataRow.GetColumnError(int)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnerror#system-data-datarow-getcolumnerror(system-int32)>), [DataRow.GetColumnError(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnerror#system-data-datarow-getcolumnerror(system-string)>), [DataRow.GetColumnError(DataColumn)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnerror#system-data-datarow-getcolumnerror(system-data-datacolumn)>), [DataRow.ClearErrors()](https://learn.microsoft.com/dotnet/api/system.data.datarow.clearerrors), [DataRow.GetColumnsInError()](https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnsinerror), [DataRow.GetChildRows(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-string)>), [DataRow.GetChildRows(string, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-string-system-data-datarowversion)>), [DataRow.GetChildRows(DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-data-datarelation)>), [DataRow.GetChildRows(DataRelation, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-data-datarelation-system-data-datarowversion)>), [DataRow.GetParentRow(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-string)>), [DataRow.GetParentRow(string, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-string-system-data-datarowversion)>), [DataRow.GetParentRow(DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-data-datarelation)>), [DataRow.GetParentRow(DataRelation, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-data-datarelation-system-data-datarowversion)>), [DataRow.GetParentRows(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-string)>), [DataRow.GetParentRows(string, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-string-system-data-datarowversion)>), [DataRow.GetParentRows(DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-data-datarelation)>), [DataRow.GetParentRows(DataRelation, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-data-datarelation-system-data-datarowversion)>), [DataRow.HasVersion(DataRowVersion)](https://learn.microsoft.com/dotnet/api/system.data.datarow.hasversion), [DataRow.IsNull(int)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-int32)>), [DataRow.IsNull(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-string)>), [DataRow.IsNull(DataColumn)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-data-datacolumn)>), [DataRow.IsNull(DataColumn, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-data-datacolumn-system-data-datarowversion)>), [DataRow.RejectChanges()](https://learn.microsoft.com/dotnet/api/system.data.datarow.rejectchanges), [DataRow.SetNull(DataColumn)](https://learn.microsoft.com/dotnet/api/system.data.datarow.setnull), [DataRow.SetParentRow(DataRow)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setparentrow#system-data-datarow-setparentrow(system-data-datarow)>), [DataRow.SetParentRow(DataRow, DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setparentrow#system-data-datarow-setparentrow(system-data-datarow-system-data-datarelation)>), [DataRow.SetAdded()](https://learn.microsoft.com/dotnet/api/system.data.datarow.setadded), [DataRow.SetModified()](https://learn.microsoft.com/dotnet/api/system.data.datarow.setmodified), [DataRow.RowError](https://learn.microsoft.com/dotnet/api/system.data.datarow.rowerror), [DataRow.RowState](https://learn.microsoft.com/dotnet/api/system.data.datarow.rowstate), [DataRow.Table](https://learn.microsoft.com/dotnet/api/system.data.datarow.table), [DataRow.this[int]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[string]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[DataColumn]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[int, DataRowVersion]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[string, DataRowVersion]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[DataColumn, DataRowVersion]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.ItemArray](https://learn.microsoft.com/dotnet/api/system.data.datarow.itemarray), [DataRow.HasErrors](https://learn.microsoft.com/dotnet/api/system.data.datarow.haserrors), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### DescriptionText

Description Text

```csharp
public string DescriptionText { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### QueryName

Name of the Query

```csharp
public string QueryName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### UserGroup

User Group of the Query

```csharp
public string UserGroup { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect.Queries.QueryHelper](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public class SearchResultUserGroupsDataTable : DataTable, IComponent, IDisposable, IServiceProvider, IListSource, ISupportInitializeNotification, ISupportInitialize, ISerializable, IXmlSerializable, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [MarshalByValueComponent](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent) ← [DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable) ← [SearchResultUserGroupsDataTable](./)

#### Implements

[IComponent](https://learn.microsoft.com/dotnet/api/system.componentmodel.icomponent), [IDisposable](https://learn.microsoft.com/dotnet/api/system.idisposable), [IServiceProvider](https://learn.microsoft.com/dotnet/api/system.iserviceprovider), [IListSource](https://learn.microsoft.com/dotnet/api/system.componentmodel.ilistsource), [ISupportInitializeNotification](https://learn.microsoft.com/dotnet/api/system.componentmodel.isupportinitializenotification), [ISupportInitialize](https://learn.microsoft.com/dotnet/api/system.componentmodel.isupportinitialize), [ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable), IXmlSerializable, [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[DataTable.fInitInProgress](https://learn.microsoft.com/dotnet/api/system.data.datatable.finitinprogress), [DataTable.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.data.datatable.getobjectdata), [DataTable.BeginInit()](https://learn.microsoft.com/dotnet/api/system.data.datatable.begininit), [DataTable.EndInit()](https://learn.microsoft.com/dotnet/api/system.data.datatable.endinit), [DataTable.AcceptChanges()](https://learn.microsoft.com/dotnet/api/system.data.datatable.acceptchanges), [DataTable.CreateInstance()](https://learn.microsoft.com/dotnet/api/system.data.datatable.createinstance), [DataTable.Clone()](https://learn.microsoft.com/dotnet/api/system.data.datatable.clone), [DataTable.Copy()](https://learn.microsoft.com/dotnet/api/system.data.datatable.copy), [DataTable.Clear()](https://learn.microsoft.com/dotnet/api/system.data.datatable.clear), [DataTable.Compute(string, string)](https://learn.microsoft.com/dotnet/api/system.data.datatable.compute), [DataTable.GetChanges()](https://learn.microsoft.com/dotnet/api/system.data.datatable.getchanges#system-data-datatable-getchanges), [DataTable.GetChanges(DataRowState)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.getchanges#system-data-datatable-getchanges(system-data-datarowstate)>), [DataTable.GetErrors()](https://learn.microsoft.com/dotnet/api/system.data.datatable.geterrors), [DataTable.ImportRow(DataRow)](https://learn.microsoft.com/dotnet/api/system.data.datatable.importrow), [DataTable.NewRow()](https://learn.microsoft.com/dotnet/api/system.data.datatable.newrow), [DataTable.NewRowFromBuilder(DataRowBuilder)](https://learn.microsoft.com/dotnet/api/system.data.datatable.newrowfrombuilder), [DataTable.GetRowType()](https://learn.microsoft.com/dotnet/api/system.data.datatable.getrowtype), [DataTable.NewRowArray(int)](https://learn.microsoft.com/dotnet/api/system.data.datatable.newrowarray), [DataTable.OnColumnChanging(DataColumnChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.oncolumnchanging), [DataTable.OnColumnChanged(DataColumnChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.oncolumnchanged), [DataTable.OnPropertyChanging(PropertyChangedEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onpropertychanging), [DataTable.OnRemoveColumn(DataColumn)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onremovecolumn), [DataTable.OnRowChanged(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowchanged), [DataTable.OnRowChanging(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowchanging), [DataTable.OnRowDeleting(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowdeleting), [DataTable.OnRowDeleted(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowdeleted), [DataTable.OnTableCleared(DataTableClearEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.ontablecleared), [DataTable.OnTableClearing(DataTableClearEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.ontableclearing), [DataTable.OnTableNewRow(DataTableNewRowEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.ontablenewrow), [DataTable.RejectChanges()](https://learn.microsoft.com/dotnet/api/system.data.datatable.rejectchanges), [DataTable.Reset()](https://learn.microsoft.com/dotnet/api/system.data.datatable.reset), [DataTable.Select()](https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select), [DataTable.Select(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select(system-string)>), [DataTable.Select(string, string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select(system-string-system-string)>), [DataTable.Select(string, string, DataViewRowState)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select(system-string-system-string-system-data-dataviewrowstate)>), [DataTable.ToString()](https://learn.microsoft.com/dotnet/api/system.data.datatable.tostring), [DataTable.BeginLoadData()](https://learn.microsoft.com/dotnet/api/system.data.datatable.beginloaddata), [DataTable.EndLoadData()](https://learn.microsoft.com/dotnet/api/system.data.datatable.endloaddata), [DataTable.LoadDataRow(object[], bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.loaddatarow#system-data-datatable-loaddatarow(system-object()-system-boolean)>), [DataTable.LoadDataRow(object[], LoadOption)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.loaddatarow#system-data-datatable-loaddatarow(system-object()-system-data-loadoption)>), [DataTable.Merge(DataTable)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.merge#system-data-datatable-merge(system-data-datatable)>), [DataTable.Merge(DataTable, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.merge#system-data-datatable-merge(system-data-datatable-system-boolean)>), [DataTable.Merge(DataTable, bool, MissingSchemaAction)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.merge#system-data-datatable-merge(system-data-datatable-system-boolean-system-data-missingschemaaction)>), [DataTable.Load(IDataReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.load#system-data-datatable-load(system-data-idatareader)>), [DataTable.Load(IDataReader, LoadOption)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.load#system-data-datatable-load(system-data-idatareader-system-data-loadoption)>), [DataTable.Load(IDataReader, LoadOption, FillErrorEventHandler)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.load#system-data-datatable-load(system-data-idatareader-system-data-loadoption-system-data-fillerroreventhandler)>), [DataTable.CreateDataReader()](https://learn.microsoft.com/dotnet/api/system.data.datatable.createdatareader), [DataTable.WriteXml(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream)>), [DataTable.WriteXml(Stream, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream-system-boolean)>), [DataTable.WriteXml(TextWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter)>), [DataTable.WriteXml(TextWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter-system-boolean)>), [DataTable.WriteXml(XmlWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter)>), [DataTable.WriteXml(XmlWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter-system-boolean)>), [DataTable.WriteXml(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string)>), [DataTable.WriteXml(string, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string-system-boolean)>), [DataTable.WriteXml(Stream, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream-system-data-xmlwritemode)>), [DataTable.WriteXml(Stream, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXml(TextWriter, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter-system-data-xmlwritemode)>), [DataTable.WriteXml(TextWriter, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXml(XmlWriter, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter-system-data-xmlwritemode)>), [DataTable.WriteXml(XmlWriter, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXml(string, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string-system-data-xmlwritemode)>), [DataTable.WriteXml(string, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXmlSchema(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-stream)>), [DataTable.WriteXmlSchema(Stream, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-stream-system-boolean)>), [DataTable.WriteXmlSchema(TextWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-textwriter)>), [DataTable.WriteXmlSchema(TextWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-textwriter-system-boolean)>), [DataTable.WriteXmlSchema(XmlWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-xml-xmlwriter)>), [DataTable.WriteXmlSchema(XmlWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-xml-xmlwriter-system-boolean)>), [DataTable.WriteXmlSchema(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-string)>), [DataTable.WriteXmlSchema(string, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-string-system-boolean)>), [DataTable.ReadXml(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-io-stream)>), [DataTable.ReadXml(TextReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-io-textreader)>), [DataTable.ReadXml(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-string)>), [DataTable.ReadXml(XmlReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-xml-xmlreader)>), [DataTable.ReadXmlSchema(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-io-stream)>), [DataTable.ReadXmlSchema(TextReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-io-textreader)>), [DataTable.ReadXmlSchema(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-string)>), [DataTable.ReadXmlSchema(XmlReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-xml-xmlreader)>), [DataTable.GetDataTableSchema(XmlSchemaSet)](https://learn.microsoft.com/dotnet/api/system.data.datatable.getdatatableschema), [DataTable.GetSchema()](https://learn.microsoft.com/dotnet/api/system.data.datatable.getschema), [DataTable.ReadXmlSerializable(XmlReader)](https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlserializable), [DataTable.CaseSensitive](https://learn.microsoft.com/dotnet/api/system.data.datatable.casesensitive), [DataTable.IsInitialized](https://learn.microsoft.com/dotnet/api/system.data.datatable.isinitialized), [DataTable.RemotingFormat](https://learn.microsoft.com/dotnet/api/system.data.datatable.remotingformat), [DataTable.ChildRelations](https://learn.microsoft.com/dotnet/api/system.data.datatable.childrelations), [DataTable.Columns](https://learn.microsoft.com/dotnet/api/system.data.datatable.columns), [DataTable.Constraints](https://learn.microsoft.com/dotnet/api/system.data.datatable.constraints), [DataTable.DataSet](https://learn.microsoft.com/dotnet/api/system.data.datatable.dataset), [DataTable.DefaultView](https://learn.microsoft.com/dotnet/api/system.data.datatable.defaultview), [DataTable.DisplayExpression](https://learn.microsoft.com/dotnet/api/system.data.datatable.displayexpression), [DataTable.ExtendedProperties](https://learn.microsoft.com/dotnet/api/system.data.datatable.extendedproperties), [DataTable.HasErrors](https://learn.microsoft.com/dotnet/api/system.data.datatable.haserrors), [DataTable.Locale](https://learn.microsoft.com/dotnet/api/system.data.datatable.locale), [DataTable.MinimumCapacity](https://learn.microsoft.com/dotnet/api/system.data.datatable.minimumcapacity), [DataTable.ParentRelations](https://learn.microsoft.com/dotnet/api/system.data.datatable.parentrelations), [DataTable.PrimaryKey](https://learn.microsoft.com/dotnet/api/system.data.datatable.primarykey), [DataTable.Rows](https://learn.microsoft.com/dotnet/api/system.data.datatable.rows), [DataTable.TableName](https://learn.microsoft.com/dotnet/api/system.data.datatable.tablename), [DataTable.Namespace](https://learn.microsoft.com/dotnet/api/system.data.datatable.namespace), [DataTable.Prefix](https://learn.microsoft.com/dotnet/api/system.data.datatable.prefix), [DataTable.Site](https://learn.microsoft.com/dotnet/api/system.data.datatable.site), [DataTable.ColumnChanging](https://learn.microsoft.com/dotnet/api/system.data.datatable.columnchanging), [DataTable.ColumnChanged](https://learn.microsoft.com/dotnet/api/system.data.datatable.columnchanged), [DataTable.Initialized](https://learn.microsoft.com/dotnet/api/system.data.datatable.initialized), [DataTable.RowChanged](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowchanged), [DataTable.RowChanging](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowchanging), [DataTable.RowDeleting](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowdeleting), [DataTable.RowDeleted](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowdeleted), [DataTable.TableClearing](https://learn.microsoft.com/dotnet/api/system.data.datatable.tableclearing), [DataTable.TableCleared](https://learn.microsoft.com/dotnet/api/system.data.datatable.tablecleared), [DataTable.TableNewRow](https://learn.microsoft.com/dotnet/api/system.data.datatable.tablenewrow), [MarshalByValueComponent.Dispose()](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.dispose#system-componentmodel-marshalbyvaluecomponent-dispose), [MarshalByValueComponent.Dispose(bool)](<https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.dispose#system-componentmodel-marshalbyvaluecomponent-dispose(system-boolean)>), [MarshalByValueComponent.GetService(Type)](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.getservice), [MarshalByValueComponent.ToString()](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.tostring), [MarshalByValueComponent.Events](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.events), [MarshalByValueComponent.Site](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.site), [MarshalByValueComponent.Container](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.container), [MarshalByValueComponent.DesignMode](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.designmode), [MarshalByValueComponent.Disposed](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.disposed), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### Count

```csharp
[Browsable(false)]
public int Count { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### this[int]

```csharp
public SearchResultUserGroupsRow this[int index] { get; }

```

#### Property Value

[SearchResultUserGroupsRow](../ERPConnect.Queries.QueryHelper.SearchResultUserGroupsRow/)

## Methods

### AddSearchResultUserGroupsRow(SearchResultUserGroupsRow)

```csharp
public void AddSearchResultUserGroupsRow(SearchResultUserGroupsRow row)

```

#### Parameters

`row` [SearchResultUserGroupsRow](../ERPConnect.Queries.QueryHelper.SearchResultUserGroupsRow/)

### AddSearchResultUserGroupsRow(string, string)

```csharp
public SearchResultUserGroupsRow AddSearchResultUserGroupsRow(string UserGroup, string DescriptionText)

```

#### Parameters

`UserGroup` [string](https://learn.microsoft.com/dotnet/api/system.string)

`DescriptionText` [string](https://learn.microsoft.com/dotnet/api/system.string)

#### Returns

[SearchResultUserGroupsRow](../ERPConnect.Queries.QueryHelper.SearchResultUserGroupsRow/)

### Clone()

```csharp
public override DataTable Clone()

```

#### Returns

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

### CreateInstance()

```csharp
protected override DataTable CreateInstance()

```

#### Returns

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

### GetEnumerator()

```csharp
public IEnumerator GetEnumerator()

```

#### Returns

[IEnumerator](https://learn.microsoft.com/dotnet/api/system.collections.ienumerator)

### GetRowType()

```csharp
protected override Type GetRowType()

```

#### Returns

[Type](https://learn.microsoft.com/dotnet/api/system.type)

### NewRowFromBuilder(DataRowBuilder)

```csharp
protected override DataRow NewRowFromBuilder(DataRowBuilder builder)

```

#### Parameters

`builder` [DataRowBuilder](https://learn.microsoft.com/dotnet/api/system.data.datarowbuilder)

#### Returns

[DataRow](https://learn.microsoft.com/dotnet/api/system.data.datarow)

### NewSearchResultUserGroupsRow()

```csharp
public SearchResultUserGroupsRow NewSearchResultUserGroupsRow()

```

#### Returns

[SearchResultUserGroupsRow](../ERPConnect.Queries.QueryHelper.SearchResultUserGroupsRow/)

### OnRowChanged(DataRowChangeEventArgs)

```csharp
protected override void OnRowChanged(DataRowChangeEventArgs e)

```

#### Parameters

`e` [DataRowChangeEventArgs](https://learn.microsoft.com/dotnet/api/system.data.datarowchangeeventargs)

### OnRowChanging(DataRowChangeEventArgs)

```csharp
protected override void OnRowChanging(DataRowChangeEventArgs e)

```

#### Parameters

`e` [DataRowChangeEventArgs](https://learn.microsoft.com/dotnet/api/system.data.datarowchangeeventargs)

### OnRowDeleted(DataRowChangeEventArgs)

```csharp
protected override void OnRowDeleted(DataRowChangeEventArgs e)

```

#### Parameters

`e` [DataRowChangeEventArgs](https://learn.microsoft.com/dotnet/api/system.data.datarowchangeeventargs)

### OnRowDeleting(DataRowChangeEventArgs)

```csharp
protected override void OnRowDeleting(DataRowChangeEventArgs e)

```

#### Parameters

`e` [DataRowChangeEventArgs](https://learn.microsoft.com/dotnet/api/system.data.datarowchangeeventargs)

### RemoveSearchResultUserGroupsRow(SearchResultUserGroupsRow)

```csharp
public void RemoveSearchResultUserGroupsRow(SearchResultUserGroupsRow row)

```

#### Parameters

`row` [SearchResultUserGroupsRow](../ERPConnect.Queries.QueryHelper.SearchResultUserGroupsRow/)

Namespace: [ERPConnect.Queries.QueryHelper](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public class SearchResultUserGroupsRow : DataRow

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [DataRow](https://learn.microsoft.com/dotnet/api/system.data.datarow) ← [SearchResultUserGroupsRow](./)

#### Inherited Members

[DataRow.AcceptChanges()](https://learn.microsoft.com/dotnet/api/system.data.datarow.acceptchanges), [DataRow.BeginEdit()](https://learn.microsoft.com/dotnet/api/system.data.datarow.beginedit), [DataRow.CancelEdit()](https://learn.microsoft.com/dotnet/api/system.data.datarow.canceledit), [DataRow.Delete()](https://learn.microsoft.com/dotnet/api/system.data.datarow.delete), [DataRow.EndEdit()](https://learn.microsoft.com/dotnet/api/system.data.datarow.endedit), [DataRow.SetColumnError(int, string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setcolumnerror#system-data-datarow-setcolumnerror(system-int32-system-string)>), [DataRow.SetColumnError(string, string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setcolumnerror#system-data-datarow-setcolumnerror(system-string-system-string)>), [DataRow.SetColumnError(DataColumn, string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setcolumnerror#system-data-datarow-setcolumnerror(system-data-datacolumn-system-string)>), [DataRow.GetColumnError(int)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnerror#system-data-datarow-getcolumnerror(system-int32)>), [DataRow.GetColumnError(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnerror#system-data-datarow-getcolumnerror(system-string)>), [DataRow.GetColumnError(DataColumn)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnerror#system-data-datarow-getcolumnerror(system-data-datacolumn)>), [DataRow.ClearErrors()](https://learn.microsoft.com/dotnet/api/system.data.datarow.clearerrors), [DataRow.GetColumnsInError()](https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnsinerror), [DataRow.GetChildRows(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-string)>), [DataRow.GetChildRows(string, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-string-system-data-datarowversion)>), [DataRow.GetChildRows(DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-data-datarelation)>), [DataRow.GetChildRows(DataRelation, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-data-datarelation-system-data-datarowversion)>), [DataRow.GetParentRow(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-string)>), [DataRow.GetParentRow(string, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-string-system-data-datarowversion)>), [DataRow.GetParentRow(DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-data-datarelation)>), [DataRow.GetParentRow(DataRelation, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-data-datarelation-system-data-datarowversion)>), [DataRow.GetParentRows(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-string)>), [DataRow.GetParentRows(string, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-string-system-data-datarowversion)>), [DataRow.GetParentRows(DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-data-datarelation)>), [DataRow.GetParentRows(DataRelation, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-data-datarelation-system-data-datarowversion)>), [DataRow.HasVersion(DataRowVersion)](https://learn.microsoft.com/dotnet/api/system.data.datarow.hasversion), [DataRow.IsNull(int)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-int32)>), [DataRow.IsNull(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-string)>), [DataRow.IsNull(DataColumn)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-data-datacolumn)>), [DataRow.IsNull(DataColumn, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-data-datacolumn-system-data-datarowversion)>), [DataRow.RejectChanges()](https://learn.microsoft.com/dotnet/api/system.data.datarow.rejectchanges), [DataRow.SetNull(DataColumn)](https://learn.microsoft.com/dotnet/api/system.data.datarow.setnull), [DataRow.SetParentRow(DataRow)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setparentrow#system-data-datarow-setparentrow(system-data-datarow)>), [DataRow.SetParentRow(DataRow, DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setparentrow#system-data-datarow-setparentrow(system-data-datarow-system-data-datarelation)>), [DataRow.SetAdded()](https://learn.microsoft.com/dotnet/api/system.data.datarow.setadded), [DataRow.SetModified()](https://learn.microsoft.com/dotnet/api/system.data.datarow.setmodified), [DataRow.RowError](https://learn.microsoft.com/dotnet/api/system.data.datarow.rowerror), [DataRow.RowState](https://learn.microsoft.com/dotnet/api/system.data.datarow.rowstate), [DataRow.Table](https://learn.microsoft.com/dotnet/api/system.data.datarow.table), [DataRow.this[int]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[string]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[DataColumn]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[int, DataRowVersion]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[string, DataRowVersion]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[DataColumn, DataRowVersion]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.ItemArray](https://learn.microsoft.com/dotnet/api/system.data.datarow.itemarray), [DataRow.HasErrors](https://learn.microsoft.com/dotnet/api/system.data.datarow.haserrors), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### DescriptionText

```csharp
public string DescriptionText { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### UserGroup

```csharp
public string UserGroup { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### IsDescriptionTextNull()

```csharp
public bool IsDescriptionTextNull()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### IsUserGroupNull()

```csharp
public bool IsUserGroupNull()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### SetDescriptionTextNull()

```csharp
public void SetDescriptionTextNull()

```

### SetUserGroupNull()

```csharp
public void SetUserGroupNull()

```

Namespace: [ERPConnect.Queries.QueryHelper](../)\
Assembly: ERPConnectStandard20.dll

DataTable filled with the results of a query variant search

```csharp
public class SearchResultVariantsDataTable : DataTable, IComponent, IDisposable, IServiceProvider, IListSource, ISupportInitializeNotification, ISupportInitialize, ISerializable, IXmlSerializable, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [MarshalByValueComponent](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent) ← [DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable) ← [SearchResultVariantsDataTable](./)

#### Implements

[IComponent](https://learn.microsoft.com/dotnet/api/system.componentmodel.icomponent), [IDisposable](https://learn.microsoft.com/dotnet/api/system.idisposable), [IServiceProvider](https://learn.microsoft.com/dotnet/api/system.iserviceprovider), [IListSource](https://learn.microsoft.com/dotnet/api/system.componentmodel.ilistsource), [ISupportInitializeNotification](https://learn.microsoft.com/dotnet/api/system.componentmodel.isupportinitializenotification), [ISupportInitialize](https://learn.microsoft.com/dotnet/api/system.componentmodel.isupportinitialize), [ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable), IXmlSerializable, [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[DataTable.fInitInProgress](https://learn.microsoft.com/dotnet/api/system.data.datatable.finitinprogress), [DataTable.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.data.datatable.getobjectdata), [DataTable.BeginInit()](https://learn.microsoft.com/dotnet/api/system.data.datatable.begininit), [DataTable.EndInit()](https://learn.microsoft.com/dotnet/api/system.data.datatable.endinit), [DataTable.AcceptChanges()](https://learn.microsoft.com/dotnet/api/system.data.datatable.acceptchanges), [DataTable.CreateInstance()](https://learn.microsoft.com/dotnet/api/system.data.datatable.createinstance), [DataTable.Clone()](https://learn.microsoft.com/dotnet/api/system.data.datatable.clone), [DataTable.Copy()](https://learn.microsoft.com/dotnet/api/system.data.datatable.copy), [DataTable.Clear()](https://learn.microsoft.com/dotnet/api/system.data.datatable.clear), [DataTable.Compute(string, string)](https://learn.microsoft.com/dotnet/api/system.data.datatable.compute), [DataTable.GetChanges()](https://learn.microsoft.com/dotnet/api/system.data.datatable.getchanges#system-data-datatable-getchanges), [DataTable.GetChanges(DataRowState)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.getchanges#system-data-datatable-getchanges(system-data-datarowstate)>), [DataTable.GetErrors()](https://learn.microsoft.com/dotnet/api/system.data.datatable.geterrors), [DataTable.ImportRow(DataRow)](https://learn.microsoft.com/dotnet/api/system.data.datatable.importrow), [DataTable.NewRow()](https://learn.microsoft.com/dotnet/api/system.data.datatable.newrow), [DataTable.NewRowFromBuilder(DataRowBuilder)](https://learn.microsoft.com/dotnet/api/system.data.datatable.newrowfrombuilder), [DataTable.GetRowType()](https://learn.microsoft.com/dotnet/api/system.data.datatable.getrowtype), [DataTable.NewRowArray(int)](https://learn.microsoft.com/dotnet/api/system.data.datatable.newrowarray), [DataTable.OnColumnChanging(DataColumnChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.oncolumnchanging), [DataTable.OnColumnChanged(DataColumnChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.oncolumnchanged), [DataTable.OnPropertyChanging(PropertyChangedEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onpropertychanging), [DataTable.OnRemoveColumn(DataColumn)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onremovecolumn), [DataTable.OnRowChanged(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowchanged), [DataTable.OnRowChanging(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowchanging), [DataTable.OnRowDeleting(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowdeleting), [DataTable.OnRowDeleted(DataRowChangeEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.onrowdeleted), [DataTable.OnTableCleared(DataTableClearEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.ontablecleared), [DataTable.OnTableClearing(DataTableClearEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.ontableclearing), [DataTable.OnTableNewRow(DataTableNewRowEventArgs)](https://learn.microsoft.com/dotnet/api/system.data.datatable.ontablenewrow), [DataTable.RejectChanges()](https://learn.microsoft.com/dotnet/api/system.data.datatable.rejectchanges), [DataTable.Reset()](https://learn.microsoft.com/dotnet/api/system.data.datatable.reset), [DataTable.Select()](https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select), [DataTable.Select(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select(system-string)>), [DataTable.Select(string, string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select(system-string-system-string)>), [DataTable.Select(string, string, DataViewRowState)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.select#system-data-datatable-select(system-string-system-string-system-data-dataviewrowstate)>), [DataTable.ToString()](https://learn.microsoft.com/dotnet/api/system.data.datatable.tostring), [DataTable.BeginLoadData()](https://learn.microsoft.com/dotnet/api/system.data.datatable.beginloaddata), [DataTable.EndLoadData()](https://learn.microsoft.com/dotnet/api/system.data.datatable.endloaddata), [DataTable.LoadDataRow(object[], bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.loaddatarow#system-data-datatable-loaddatarow(system-object()-system-boolean)>), [DataTable.LoadDataRow(object[], LoadOption)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.loaddatarow#system-data-datatable-loaddatarow(system-object()-system-data-loadoption)>), [DataTable.Merge(DataTable)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.merge#system-data-datatable-merge(system-data-datatable)>), [DataTable.Merge(DataTable, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.merge#system-data-datatable-merge(system-data-datatable-system-boolean)>), [DataTable.Merge(DataTable, bool, MissingSchemaAction)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.merge#system-data-datatable-merge(system-data-datatable-system-boolean-system-data-missingschemaaction)>), [DataTable.Load(IDataReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.load#system-data-datatable-load(system-data-idatareader)>), [DataTable.Load(IDataReader, LoadOption)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.load#system-data-datatable-load(system-data-idatareader-system-data-loadoption)>), [DataTable.Load(IDataReader, LoadOption, FillErrorEventHandler)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.load#system-data-datatable-load(system-data-idatareader-system-data-loadoption-system-data-fillerroreventhandler)>), [DataTable.CreateDataReader()](https://learn.microsoft.com/dotnet/api/system.data.datatable.createdatareader), [DataTable.WriteXml(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream)>), [DataTable.WriteXml(Stream, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream-system-boolean)>), [DataTable.WriteXml(TextWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter)>), [DataTable.WriteXml(TextWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter-system-boolean)>), [DataTable.WriteXml(XmlWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter)>), [DataTable.WriteXml(XmlWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter-system-boolean)>), [DataTable.WriteXml(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string)>), [DataTable.WriteXml(string, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string-system-boolean)>), [DataTable.WriteXml(Stream, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream-system-data-xmlwritemode)>), [DataTable.WriteXml(Stream, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-stream-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXml(TextWriter, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter-system-data-xmlwritemode)>), [DataTable.WriteXml(TextWriter, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-io-textwriter-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXml(XmlWriter, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter-system-data-xmlwritemode)>), [DataTable.WriteXml(XmlWriter, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-xml-xmlwriter-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXml(string, XmlWriteMode)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string-system-data-xmlwritemode)>), [DataTable.WriteXml(string, XmlWriteMode, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexml#system-data-datatable-writexml(system-string-system-data-xmlwritemode-system-boolean)>), [DataTable.WriteXmlSchema(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-stream)>), [DataTable.WriteXmlSchema(Stream, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-stream-system-boolean)>), [DataTable.WriteXmlSchema(TextWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-textwriter)>), [DataTable.WriteXmlSchema(TextWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-io-textwriter-system-boolean)>), [DataTable.WriteXmlSchema(XmlWriter)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-xml-xmlwriter)>), [DataTable.WriteXmlSchema(XmlWriter, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-xml-xmlwriter-system-boolean)>), [DataTable.WriteXmlSchema(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-string)>), [DataTable.WriteXmlSchema(string, bool)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.writexmlschema#system-data-datatable-writexmlschema(system-string-system-boolean)>), [DataTable.ReadXml(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-io-stream)>), [DataTable.ReadXml(TextReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-io-textreader)>), [DataTable.ReadXml(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-string)>), [DataTable.ReadXml(XmlReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxml#system-data-datatable-readxml(system-xml-xmlreader)>), [DataTable.ReadXmlSchema(Stream)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-io-stream)>), [DataTable.ReadXmlSchema(TextReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-io-textreader)>), [DataTable.ReadXmlSchema(string)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-string)>), [DataTable.ReadXmlSchema(XmlReader)](<https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlschema#system-data-datatable-readxmlschema(system-xml-xmlreader)>), [DataTable.GetDataTableSchema(XmlSchemaSet)](https://learn.microsoft.com/dotnet/api/system.data.datatable.getdatatableschema), [DataTable.GetSchema()](https://learn.microsoft.com/dotnet/api/system.data.datatable.getschema), [DataTable.ReadXmlSerializable(XmlReader)](https://learn.microsoft.com/dotnet/api/system.data.datatable.readxmlserializable), [DataTable.CaseSensitive](https://learn.microsoft.com/dotnet/api/system.data.datatable.casesensitive), [DataTable.IsInitialized](https://learn.microsoft.com/dotnet/api/system.data.datatable.isinitialized), [DataTable.RemotingFormat](https://learn.microsoft.com/dotnet/api/system.data.datatable.remotingformat), [DataTable.ChildRelations](https://learn.microsoft.com/dotnet/api/system.data.datatable.childrelations), [DataTable.Columns](https://learn.microsoft.com/dotnet/api/system.data.datatable.columns), [DataTable.Constraints](https://learn.microsoft.com/dotnet/api/system.data.datatable.constraints), [DataTable.DataSet](https://learn.microsoft.com/dotnet/api/system.data.datatable.dataset), [DataTable.DefaultView](https://learn.microsoft.com/dotnet/api/system.data.datatable.defaultview), [DataTable.DisplayExpression](https://learn.microsoft.com/dotnet/api/system.data.datatable.displayexpression), [DataTable.ExtendedProperties](https://learn.microsoft.com/dotnet/api/system.data.datatable.extendedproperties), [DataTable.HasErrors](https://learn.microsoft.com/dotnet/api/system.data.datatable.haserrors), [DataTable.Locale](https://learn.microsoft.com/dotnet/api/system.data.datatable.locale), [DataTable.MinimumCapacity](https://learn.microsoft.com/dotnet/api/system.data.datatable.minimumcapacity), [DataTable.ParentRelations](https://learn.microsoft.com/dotnet/api/system.data.datatable.parentrelations), [DataTable.PrimaryKey](https://learn.microsoft.com/dotnet/api/system.data.datatable.primarykey), [DataTable.Rows](https://learn.microsoft.com/dotnet/api/system.data.datatable.rows), [DataTable.TableName](https://learn.microsoft.com/dotnet/api/system.data.datatable.tablename), [DataTable.Namespace](https://learn.microsoft.com/dotnet/api/system.data.datatable.namespace), [DataTable.Prefix](https://learn.microsoft.com/dotnet/api/system.data.datatable.prefix), [DataTable.Site](https://learn.microsoft.com/dotnet/api/system.data.datatable.site), [DataTable.ColumnChanging](https://learn.microsoft.com/dotnet/api/system.data.datatable.columnchanging), [DataTable.ColumnChanged](https://learn.microsoft.com/dotnet/api/system.data.datatable.columnchanged), [DataTable.Initialized](https://learn.microsoft.com/dotnet/api/system.data.datatable.initialized), [DataTable.RowChanged](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowchanged), [DataTable.RowChanging](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowchanging), [DataTable.RowDeleting](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowdeleting), [DataTable.RowDeleted](https://learn.microsoft.com/dotnet/api/system.data.datatable.rowdeleted), [DataTable.TableClearing](https://learn.microsoft.com/dotnet/api/system.data.datatable.tableclearing), [DataTable.TableCleared](https://learn.microsoft.com/dotnet/api/system.data.datatable.tablecleared), [DataTable.TableNewRow](https://learn.microsoft.com/dotnet/api/system.data.datatable.tablenewrow), [MarshalByValueComponent.Dispose()](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.dispose#system-componentmodel-marshalbyvaluecomponent-dispose), [MarshalByValueComponent.Dispose(bool)](<https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.dispose#system-componentmodel-marshalbyvaluecomponent-dispose(system-boolean)>), [MarshalByValueComponent.GetService(Type)](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.getservice), [MarshalByValueComponent.ToString()](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.tostring), [MarshalByValueComponent.Events](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.events), [MarshalByValueComponent.Site](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.site), [MarshalByValueComponent.Container](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.container), [MarshalByValueComponent.DesignMode](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.designmode), [MarshalByValueComponent.Disposed](https://learn.microsoft.com/dotnet/api/system.componentmodel.marshalbyvaluecomponent.disposed), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### Count

```csharp
[Browsable(false)]
public int Count { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### this[int]

```csharp
public SearchResultVariantsRow this[int index] { get; }

```

#### Property Value

[SearchResultVariantsRow](../ERPConnect.Queries.QueryHelper.SearchResultVariantsRow/)

## Methods

### AddSearchResultVariantsRow(SearchResultVariantsRow)

AddSearchResultVariantsRow

```csharp
public void AddSearchResultVariantsRow(SearchResultVariantsRow row)

```

#### Parameters

`row` [SearchResultVariantsRow](../ERPConnect.Queries.QueryHelper.SearchResultVariantsRow/)

Row

### AddSearchResultVariantsRow(string, string)

AddSearchResultVariantsRow

```csharp
public SearchResultVariantsRow AddSearchResultVariantsRow(string VariantName, string DescriptionText)

```

#### Parameters

`VariantName` [string](https://learn.microsoft.com/dotnet/api/system.string)

VariantName

`DescriptionText` [string](https://learn.microsoft.com/dotnet/api/system.string)

DescriptionText

#### Returns

[SearchResultVariantsRow](../ERPConnect.Queries.QueryHelper.SearchResultVariantsRow/)

### Clone()

Clone()

```csharp
public override DataTable Clone()

```

#### Returns

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

Clone()

### CreateInstance()

CreateInstance

```csharp
protected override DataTable CreateInstance()

```

#### Returns

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

DataTable

### GetEnumerator()

GetEnumerator()

```csharp
public IEnumerator GetEnumerator()

```

#### Returns

[IEnumerator](https://learn.microsoft.com/dotnet/api/system.collections.ienumerator)

System.Collections.IEnumerator

### GetRowType()

```csharp
protected override Type GetRowType()

```

#### Returns

[Type](https://learn.microsoft.com/dotnet/api/system.type)

### NewRowFromBuilder(DataRowBuilder)

```csharp
protected override DataRow NewRowFromBuilder(DataRowBuilder builder)

```

#### Parameters

`builder` [DataRowBuilder](https://learn.microsoft.com/dotnet/api/system.data.datarowbuilder)

#### Returns

[DataRow](https://learn.microsoft.com/dotnet/api/system.data.datarow)

### NewSearchResultVariantsRow()

```csharp
public SearchResultVariantsRow NewSearchResultVariantsRow()

```

#### Returns

[SearchResultVariantsRow](../ERPConnect.Queries.QueryHelper.SearchResultVariantsRow/)

### OnRowChanged(DataRowChangeEventArgs)

```csharp
protected override void OnRowChanged(DataRowChangeEventArgs e)

```

#### Parameters

`e` [DataRowChangeEventArgs](https://learn.microsoft.com/dotnet/api/system.data.datarowchangeeventargs)

### OnRowChanging(DataRowChangeEventArgs)

```csharp
protected override void OnRowChanging(DataRowChangeEventArgs e)

```

#### Parameters

`e` [DataRowChangeEventArgs](https://learn.microsoft.com/dotnet/api/system.data.datarowchangeeventargs)

### OnRowDeleted(DataRowChangeEventArgs)

```csharp
protected override void OnRowDeleted(DataRowChangeEventArgs e)

```

#### Parameters

`e` [DataRowChangeEventArgs](https://learn.microsoft.com/dotnet/api/system.data.datarowchangeeventargs)

### OnRowDeleting(DataRowChangeEventArgs)

```csharp
protected override void OnRowDeleting(DataRowChangeEventArgs e)

```

#### Parameters

`e` [DataRowChangeEventArgs](https://learn.microsoft.com/dotnet/api/system.data.datarowchangeeventargs)

### RemoveSearchResultVariantsRow(SearchResultVariantsRow)

```csharp
public void RemoveSearchResultVariantsRow(SearchResultVariantsRow row)

```

#### Parameters

`row` [SearchResultVariantsRow](../ERPConnect.Queries.QueryHelper.SearchResultVariantsRow/)

Namespace: [ERPConnect.Queries.QueryHelper](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public class SearchResultVariantsRow : DataRow

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [DataRow](https://learn.microsoft.com/dotnet/api/system.data.datarow) ← [SearchResultVariantsRow](./)

#### Inherited Members

[DataRow.AcceptChanges()](https://learn.microsoft.com/dotnet/api/system.data.datarow.acceptchanges), [DataRow.BeginEdit()](https://learn.microsoft.com/dotnet/api/system.data.datarow.beginedit), [DataRow.CancelEdit()](https://learn.microsoft.com/dotnet/api/system.data.datarow.canceledit), [DataRow.Delete()](https://learn.microsoft.com/dotnet/api/system.data.datarow.delete), [DataRow.EndEdit()](https://learn.microsoft.com/dotnet/api/system.data.datarow.endedit), [DataRow.SetColumnError(int, string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setcolumnerror#system-data-datarow-setcolumnerror(system-int32-system-string)>), [DataRow.SetColumnError(string, string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setcolumnerror#system-data-datarow-setcolumnerror(system-string-system-string)>), [DataRow.SetColumnError(DataColumn, string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setcolumnerror#system-data-datarow-setcolumnerror(system-data-datacolumn-system-string)>), [DataRow.GetColumnError(int)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnerror#system-data-datarow-getcolumnerror(system-int32)>), [DataRow.GetColumnError(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnerror#system-data-datarow-getcolumnerror(system-string)>), [DataRow.GetColumnError(DataColumn)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnerror#system-data-datarow-getcolumnerror(system-data-datacolumn)>), [DataRow.ClearErrors()](https://learn.microsoft.com/dotnet/api/system.data.datarow.clearerrors), [DataRow.GetColumnsInError()](https://learn.microsoft.com/dotnet/api/system.data.datarow.getcolumnsinerror), [DataRow.GetChildRows(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-string)>), [DataRow.GetChildRows(string, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-string-system-data-datarowversion)>), [DataRow.GetChildRows(DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-data-datarelation)>), [DataRow.GetChildRows(DataRelation, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getchildrows#system-data-datarow-getchildrows(system-data-datarelation-system-data-datarowversion)>), [DataRow.GetParentRow(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-string)>), [DataRow.GetParentRow(string, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-string-system-data-datarowversion)>), [DataRow.GetParentRow(DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-data-datarelation)>), [DataRow.GetParentRow(DataRelation, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrow#system-data-datarow-getparentrow(system-data-datarelation-system-data-datarowversion)>), [DataRow.GetParentRows(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-string)>), [DataRow.GetParentRows(string, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-string-system-data-datarowversion)>), [DataRow.GetParentRows(DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-data-datarelation)>), [DataRow.GetParentRows(DataRelation, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.getparentrows#system-data-datarow-getparentrows(system-data-datarelation-system-data-datarowversion)>), [DataRow.HasVersion(DataRowVersion)](https://learn.microsoft.com/dotnet/api/system.data.datarow.hasversion), [DataRow.IsNull(int)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-int32)>), [DataRow.IsNull(string)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-string)>), [DataRow.IsNull(DataColumn)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-data-datacolumn)>), [DataRow.IsNull(DataColumn, DataRowVersion)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.isnull#system-data-datarow-isnull(system-data-datacolumn-system-data-datarowversion)>), [DataRow.RejectChanges()](https://learn.microsoft.com/dotnet/api/system.data.datarow.rejectchanges), [DataRow.SetNull(DataColumn)](https://learn.microsoft.com/dotnet/api/system.data.datarow.setnull), [DataRow.SetParentRow(DataRow)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setparentrow#system-data-datarow-setparentrow(system-data-datarow)>), [DataRow.SetParentRow(DataRow, DataRelation)](<https://learn.microsoft.com/dotnet/api/system.data.datarow.setparentrow#system-data-datarow-setparentrow(system-data-datarow-system-data-datarelation)>), [DataRow.SetAdded()](https://learn.microsoft.com/dotnet/api/system.data.datarow.setadded), [DataRow.SetModified()](https://learn.microsoft.com/dotnet/api/system.data.datarow.setmodified), [DataRow.RowError](https://learn.microsoft.com/dotnet/api/system.data.datarow.rowerror), [DataRow.RowState](https://learn.microsoft.com/dotnet/api/system.data.datarow.rowstate), [DataRow.Table](https://learn.microsoft.com/dotnet/api/system.data.datarow.table), [DataRow.this[int]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[string]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[DataColumn]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[int, DataRowVersion]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[string, DataRowVersion]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.this[DataColumn, DataRowVersion]](https://learn.microsoft.com/dotnet/api/system.data.datarow.item), [DataRow.ItemArray](https://learn.microsoft.com/dotnet/api/system.data.datarow.itemarray), [DataRow.HasErrors](https://learn.microsoft.com/dotnet/api/system.data.datarow.haserrors), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### DescriptionText

```csharp
public string DescriptionText { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### VariantName

```csharp
public string VariantName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### IsDescriptionTextNull()

```csharp
public bool IsDescriptionTextNull()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### IsVariantNameNull()

```csharp
public bool IsVariantNameNull()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### SetDescriptionTextNull()

```csharp
public void SetDescriptionTextNull()

```

### SetVariantNameNull()

```csharp
public void SetVariantNameNull()

```

### Classes

[ABAPCode](ERPConnect.Utils.ABAPCode/)

[BatchReturn](ERPConnect.Utils.BatchReturn/)

[BatchReturnCollection](ERPConnect.Utils.BatchReturnCollection/)

[BatchStep](ERPConnect.Utils.BatchStep/)

[BatchStepCollection](ERPConnect.Utils.BatchStepCollection/)

[ReadTable](ERPConnect.Utils.ReadTable/)

[ReadTableField](ERPConnect.Utils.ReadTableField/)

[ReadTableFieldCollection](ERPConnect.Utils.ReadTableFieldCollection/)

[Transaction](ERPConnect.Utils.Transaction/)

### Enums

[TransactionDialogMode](ERPConnect.Utils.TransactionDialogMode/)

[TransactionType](ERPConnect.Utils.TransactionType/)

[TransactionUpdateMode](ERPConnect.Utils.TransactionUpdateMode/)

### Delegates

[ReadTable.OnIncomingPackage](ERPConnect.Utils.ReadTable.OnIncomingPackage/)

[ReadTable.OnPackageProgress](ERPConnect.Utils.ReadTable.OnPackageProgress/)

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

ABAPCode is a class, that can be used to execute ABAP code on the fly and retrieve the result.

```csharp
public class ABAPCode

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [ABAPCode](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### ABAPCode(R3Connection)

initializes a ABAPCode object that can be used to execute dynmic ABA code A valid SAP connection

```csharp
public ABAPCode(R3Connection Con)

```

#### Parameters

`Con` [R3Connection](../../erpconnect/ERPConnect.R3Connection/)

### ABAPCode()

initializes a ABAPCode object that can be used to execute dynmic ABA code

```csharp
public ABAPCode()

```

## Properties

### Connection

The R3Connection object which the ABAPCode object is assigned to.

```csharp
public R3Connection Connection { get; set; }

```

#### Property Value

[R3Connection](../../erpconnect/ERPConnect.R3Connection/)

### LastABAPSyntaxError

Returns the ABAP error message in case the programm is syntacly incorrect. The method Execute returns false.

```csharp
public string LastABAPSyntaxError { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### ResultLineCount

Returns the number of lines that a retrieved a report output.

```csharp
public int ResultLineCount { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

## Methods

### AddCodeLine(string)

Adds a new line of ABAP code.

```csharp
public void AddCodeLine(string CodeLine)

```

#### Parameters

`CodeLine` [string](https://learn.microsoft.com/dotnet/api/system.string)

Line of ABAP code to append

### Execute()

Executes ABAP code on the fly.

```csharp
public bool Execute()

```

#### Returns

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

true / false depends if the program could have been executed without a syntax error.

#### Remarks

The following code shows, how to set some ABAP code (located in textBox1), execute it and write the list result in another TextBox. You'll find this samples in the directory AbapPad. [C#]

```
  private void button1_Click(object sender, System.EventArgs e)
  {
     ERPConnect.R3Connection con = new ERPConnect.R3Connection();
     if(!con.AskUserAndOpen(true))
                     return;
     ERPConnect.Utils.ABAPCode code = new ERPConnect.Utils.ABAPCode();

     code.Connection = con;

     foreach(string s in textBox1.Lines)
     code.AddCodeLine(s);

     if (code.Execute())
     {
for(int i=0; i  code.ResultLineCount; i++)
         textBox2.Text += code.GetResultLine(i) + "\r\n";
     }
     else
         textBox2.Text = "ABAP Error: " + code.LastABAPSyntaxError;
 }
```

[VB]

```
  Private Sub button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles button1.Click
    Dim con As New ERPConnect.R3Connection
    If Not con.AskUserAndOpen(True) Then
        Exit Sub
    End If

    Dim code = New ERPConnect.Utils.ABAPCode
    code.Connection = con

    Dim s As String
    For Each s In textBox1.Lines
        code.AddCodeLine(s)
    Next

    Dim i As Integer
    If code.Execute() Then
        For i = 0 To code.ResultLineCount - 1
            textBox2.Text += code.GetResultLine(i) + vbCrLf
        Next
    Else
        textBox2.Text = "ABAP Error: " + code.LastABAPSyntaxError
    End If
End Sub
```

### GetResultLine(int)

Returns a single at the given position the resultset of the abap report

```csharp
public string GetResultLine(int Index)

```

#### Parameters

`Index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Index of the result line

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

Result line of the report output

### ResetCode()

Deletes the current code lines.

```csharp
public void ResetCode()

```

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

Represents a message returned from a Batch Input transaction.

```csharp
public class BatchReturn

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [BatchReturn](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### BatchReturn()

Initializes a new BapiReturn object.

```csharp
public BatchReturn()

```

## Properties

### Message

Message

```csharp
public string Message { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MessageID

Batch input message ID

```csharp
public string MessageID { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MessageNumber

Number of system message

```csharp
public string MessageNumber { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MessageVariable1

Variable contained in the message string

```csharp
public string MessageVariable1 { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MessageVariable2

Variable contained in the message string

```csharp
public string MessageVariable2 { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MessageVariable3

Variable contained in the message string

```csharp
public string MessageVariable3 { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### MessageVariable4

Variable contained in the message string

```csharp
public string MessageVariable4 { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Type

Message type (e.g. W for warning or E for error)

```csharp
public string Type { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

Collection of BatchReturn objects

```csharp
public class BatchReturnCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [BatchReturnCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.OnSet(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onset), [CollectionBase.OnInsert(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsert), [CollectionBase.OnClear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclear), [CollectionBase.OnRemove(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremove), [CollectionBase.OnValidate(object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onvalidate), [CollectionBase.OnSetComplete(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onsetcomplete), [CollectionBase.OnInsertComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsertcomplete), [CollectionBase.OnClearComplete()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclearcomplete), [CollectionBase.OnRemoveComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremovecomplete), [CollectionBase.InnerList](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.innerlist), [CollectionBase.List](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.list), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### BatchReturnCollection()

```csharp
public BatchReturnCollection()

```

## Properties

### this[int]

Returns a BatchReturn object at a given position

```csharp
public virtual BatchReturn this[int Index] { get; }

```

#### Property Value

[BatchReturn](../ERPConnect.Utils.BatchReturn/)

## Methods

### Add(BatchReturn)

Adds a new BatchReturn object to the collection.

```csharp
public virtual void Add(BatchReturn NewBatchReturn)

```

#### Parameters

`NewBatchReturn` [BatchReturn](../ERPConnect.Utils.BatchReturn/)

The BatchReturn object to be added

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

BatchStep represents a single step for a SAP transaction

```csharp
public class BatchStep

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [BatchStep](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### BatchStep()

Initializies an empty batch step.

```csharp
public BatchStep()

```

### BatchStep(string, string, bool, string, string)

Initializes a new Batch Step

```csharp
public BatchStep(string ProgramName, string DynproNumber, bool BeginNewDynpro, string FieldName, string FieldValue)

```

#### Parameters

`ProgramName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the ABAP program

`DynproNumber` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the current dynpro number

`BeginNewDynpro` [bool](https://learn.microsoft.com/dotnet/api/system.boolean)

True / false whether the step begins to fill a new dynpro

`FieldName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the dynprofield to be set

`FieldValue` [string](https://learn.microsoft.com/dotnet/api/system.string)

Value of the field to be set

## Properties

### BeginNewDynpro

True / false whether the step begins to fill a new dynpro

```csharp
public bool BeginNewDynpro { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### DynproNumber

Name of the current dynpro number

```csharp
public string DynproNumber { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### FieldName

Name of the dynprofield to be set

```csharp
public string FieldName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### FieldValue

Value of the field to be set

```csharp
public string FieldValue { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### ProgramName

Name of the ABAP program

```csharp
public string ProgramName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

BatchStepCollection represents a collection of BatchStep objects

```csharp
public class BatchStepCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [BatchStepCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.OnSet(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onset), [CollectionBase.OnInsert(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsert), [CollectionBase.OnClear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclear), [CollectionBase.OnRemove(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremove), [CollectionBase.OnValidate(object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onvalidate), [CollectionBase.OnSetComplete(int, object, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onsetcomplete), [CollectionBase.OnInsertComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.oninsertcomplete), [CollectionBase.OnClearComplete()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onclearcomplete), [CollectionBase.OnRemoveComplete(int, object)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.onremovecomplete), [CollectionBase.InnerList](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.innerlist), [CollectionBase.List](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.list), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### BatchStepCollection()

Initializes an empty collection over BatchStep objects

```csharp
public BatchStepCollection()

```

## Properties

### this[int]

Returns a BatchStep object by a given index

```csharp
public virtual BatchStep this[int Index] { get; set; }

```

#### Property Value

[BatchStep](../ERPConnect.Utils.BatchStep/)

## Methods

### Add(BatchStep)

Adds a new BatchStep object to the collection

```csharp
public virtual void Add(BatchStep NewParameter)

```

#### Parameters

`NewParameter` [BatchStep](../ERPConnect.Utils.BatchStep/)

The BatchStep object to be added

### Insert(int, BatchStep)

Inserts a new BatchStep object

```csharp
public virtual void Insert(int Index, BatchStep NewParameter)

```

#### Parameters

`Index` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Index of the new BatchStep object

`NewParameter` [BatchStep](../ERPConnect.Utils.BatchStep/)

The BatchStep object to be added

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void ReadTable.OnIncomingPackage(ReadTable sender, DataTable package)

```

#### Parameters

`sender` [ReadTable](../ERPConnect.Utils.ReadTable/)

`package` [DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public delegate void ReadTable.OnPackageProgress(ReadTable sender, int packageRowsCount)

```

#### Parameters

`sender` [ReadTable](../ERPConnect.Utils.ReadTable/)

`packageRowsCount` [int](https://learn.microsoft.com/dotnet/api/system.int32)

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

Reads SAP database tables via RFC

```csharp
public sealed class ReadTable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [ReadTable](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### ReadTable()

```csharp
public ReadTable()

```

### ReadTable(IR3Connection)

```csharp
public ReadTable(IR3Connection connection)

```

#### Parameters

`connection` [IR3Connection](../../erpconnect/ERPConnect.IR3Connection/)

## Properties

### Connection

```csharp
public IR3Connection Connection { get; set; }

```

#### Property Value

[IR3Connection](../../erpconnect/ERPConnect.IR3Connection/)

### Fields

Represents the fields that should be / have been retrieved. This collection will be filled and / or refreshed during Run().

```csharp
public ReadTableFieldCollection Fields { get; }

```

#### Property Value

[ReadTableFieldCollection](../ERPConnect.Utils.ReadTableFieldCollection/)

### OrderBy

Defines the order of the result on SAP side. Works only with specialized custom function modules.

```csharp
public string OrderBy { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### PackageSize

Number of rows to retrieve per RFC call

```csharp
public int PackageSize { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### RaiseIncomingPackageEvent

Indicates whether the IncomingPackage event should be raised and results should be processed per package.

```csharp
public bool RaiseIncomingPackageEvent { get; set; }

```

#### Property Value

[bool](https://learn.microsoft.com/dotnet/api/system.boolean)

### Result

Result of the query, if IncomingPackage event is not used.

```csharp
public DataTable Result { get; }

```

#### Property Value

[DataTable](https://learn.microsoft.com/dotnet/api/system.data.datatable)

### RowCount

Upper limit for number of rows retrieved in total

```csharp
public int RowCount { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### RowSkip

Number of rows to be skipped at the start.

```csharp
public int RowSkip { get; set; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### TableName

```csharp
public string TableName { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### WhereClause

Selection criteria

```csharp
public string WhereClause { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### AddField(string)

Appends a field to the Fields collection

```csharp
public void AddField(string fieldName)

```

#### Parameters

`fieldName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of DDIC table field

### RetrieveAllFieldsOfTable()

Retrieves all fields of the given table from SAP and fills the Fields collection

```csharp
public void RetrieveAllFieldsOfTable()

```

### Run()

Retrieves table rows from SAP. This method will block until all data has been extracted.

```csharp
public void Run()

```

### SetCustomFunctionName(string)

Call this method to use a custom function module. This overrides `ERPConnect.IR3Connection.ReadTableFunctionName`.

```csharp
public void SetCustomFunctionName(string name)

```

#### Parameters

`name` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the custom function module

### IncomingPackage

IncomingPackage is fired, when addtional data packages are fetched from SAP.

```csharp
public event ReadTable.OnIncomingPackage IncomingPackage

```

#### Event Type

[ReadTable](./).[OnIncomingPackage](../ERPConnect.Utils.ReadTable.OnIncomingPackage/)

### PackageProgress

PackageProgress is fired, when addtional data packages are fetched from SAP.

```csharp
public event ReadTable.OnPackageProgress PackageProgress

```

#### Event Type

[ReadTable](./).[OnPackageProgress](../ERPConnect.Utils.ReadTable.OnPackageProgress/)

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

Represents a table field

```csharp
public sealed class ReadTableField

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [ReadTableField](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Properties

### ABAPType

ABAP type ID of the field

```csharp
public string ABAPType { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Decimals

Number of decimal digits

```csharp
public int Decimals { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

### FieldName

Name of the field

```csharp
public string FieldName { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### FieldText

Short description

```csharp
public string FieldText { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Length

Length of the ABAP string representation in characters

```csharp
public int Length { get; }

```

#### Property Value

[int](https://learn.microsoft.com/dotnet/api/system.int32)

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

Represents a collection of ReadTableField objects

```csharp
public sealed class ReadTableFieldCollection : CollectionBase, IList, ICollection, IEnumerable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [CollectionBase](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase) ← [ReadTableFieldCollection](./)

#### Implements

[IList](https://learn.microsoft.com/dotnet/api/system.collections.ilist), [ICollection](https://learn.microsoft.com/dotnet/api/system.collections.icollection), [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.ienumerable)

#### Inherited Members

[CollectionBase.Clear()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.clear), [CollectionBase.RemoveAt(int)](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.removeat), [CollectionBase.GetEnumerator()](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.getenumerator), [CollectionBase.Capacity](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.capacity), [CollectionBase.Count](https://learn.microsoft.com/dotnet/api/system.collections.collectionbase.count), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### ReadTableFieldCollection()

```csharp
public ReadTableFieldCollection()

```

## Properties

### this[int]

Returns the ReadTableField object at the given position

```csharp
public ReadTableField this[int index] { get; set; }

```

#### Property Value

[ReadTableField](../ERPConnect.Utils.ReadTableField/)

## Methods

### Add(ReadTableField)

Adds a new ReadTableField object to the collection

```csharp
public void Add(ReadTableField field)

```

#### Parameters

`field` [ReadTableField](../ERPConnect.Utils.ReadTableField/)

The ReadTableField object to be added

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

Transaction represents a single SAP transction

```csharp
public class Transaction

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Transaction](./)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Transaction(R3Connection)

Initializes a Transction object

```csharp
public Transaction(R3Connection Connection)

```

#### Parameters

`Connection` [R3Connection](../../erpconnect/ERPConnect.R3Connection/)

A valid R3Connection object

### Transaction()

Initializes a Tranction object

```csharp
public Transaction()

```

## Properties

### BatchSteps

The steps to be executed when running the transaction

```csharp
public BatchStepCollection BatchSteps { get; set; }

```

#### Property Value

[BatchStepCollection](../ERPConnect.Utils.BatchStepCollection/)

### Connection

A R3Connection object

```csharp
public R3Connection Connection { get; set; }

```

#### Property Value

[R3Connection](../../erpconnect/ERPConnect.R3Connection/)

### ExecutionMode

Defines the execution mode

```csharp
public TransactionDialogMode ExecutionMode { get; set; }

```

#### Property Value

[TransactionDialogMode](../ERPConnect.Utils.TransactionDialogMode/)

### Returns

Batch Input return messages

```csharp
public BatchReturnCollection Returns { get; set; }

```

#### Property Value

[BatchReturnCollection](../ERPConnect.Utils.BatchReturnCollection/)

### TCode

The transaction code to be performed

```csharp
public string TCode { get; set; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Type

Defines the execution type

```csharp
public TransactionType Type { get; set; }

```

#### Property Value

[TransactionType](../ERPConnect.Utils.TransactionType/)

### UpdateMode

Defines the Update mode

```csharp
public TransactionUpdateMode UpdateMode { get; set; }

```

#### Property Value

[TransactionUpdateMode](../ERPConnect.Utils.TransactionUpdateMode/)

## Methods

### AddStepSetCursor(string)

Adds a new Batch step

```csharp
public void AddStepSetCursor(string FieldName)

```

#### Parameters

`FieldName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the field where the cursor should be set

### AddStepSetField(string, string)

Adds a new batch step

```csharp
public void AddStepSetField(string FieldName, string FieldValue)

```

#### Parameters

`FieldName` [string](https://learn.microsoft.com/dotnet/api/system.string)

Name of the field to be set

`FieldValue` [string](https://learn.microsoft.com/dotnet/api/system.string)

Value of the field to be set

### AddStepSetNewDynpro(string, string)

Adds a new batch step

```csharp
public void AddStepSetNewDynpro(string Program, string DynproNumber)

```

#### Parameters

`Program` [string](https://learn.microsoft.com/dotnet/api/system.string)

Program name

`DynproNumber` [string](https://learn.microsoft.com/dotnet/api/system.string)

The Dynpronumber of the new screen

### AddStepSetOKCode(string)

Adds a new batch step that executes an OK code in the transaction

```csharp
public void AddStepSetOKCode(string OKCode)

```

#### Parameters

`OKCode` [string](https://learn.microsoft.com/dotnet/api/system.string)

OB code

### AddStepSwitchToShowAll()

Adds a new batch step that switch the mode to 'Show All'

```csharp
public void AddStepSwitchToShowAll()

```

### AddStepSwitchToShowOnlyErrors()

Adds a new batch step that switch the mode to 'Show Only Errors'

```csharp
public void AddStepSwitchToShowOnlyErrors()

```

### Execute()

Executes the transaction

```csharp
public void Execute()

```

### SetCustomFunctionName(string)

Use this function to set a custom RFC instead of RFC_CALL_TRANSACTION_USING or RFC_CALL_TRANSACTION

```csharp
public void SetCustomFunctionName(string CustomFunctionName)

```

#### Parameters

`CustomFunctionName` [string](https://learn.microsoft.com/dotnet/api/system.string)

The name of the custom RFC

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

Batch Input Dialog Modes

```csharp
public enum TransactionDialogMode

```

## Fields

`Background = 2`

The transaction will be executed in background mode

`ShowAll = 0`

The transaction steps will be shown in SAP GUI

`ShowOnlyErrors = 1`

The transaction will pop up if any errors occur during execution

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

Batch Input Transaction Types

```csharp
public enum TransactionType

```

## Fields

`Multiple = 1`

More than one transaction will be processed at once

`Single = 0`

Only one transaction is contained in the Batch table

Namespace: [ERPConnect.Utils](../)\
Assembly: ERPConnectStandard20.dll

Batch Input update mode

```csharp
public enum TransactionUpdateMode

```

## Fields

`Asynchronous = 0`

Asynchronous call

`Local = 2`

The call will be processed locally

`Synchronous = 1`

Synchronous call

### Classes

[FileExistsException](Theobald.Common.FileExistsException/)

Namespace: [Theobald.Common](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class FileExistsException : IOException, ISerializable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Exception](https://learn.microsoft.com/dotnet/api/system.exception) ← [SystemException](https://learn.microsoft.com/dotnet/api/system.systemexception) ← [IOException](https://learn.microsoft.com/dotnet/api/system.io.ioexception) ← [FileExistsException](./)

#### Implements

[ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable)

#### Inherited Members

[Exception.GetBaseException()](https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception), [Exception.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata), [Exception.ToString()](https://learn.microsoft.com/dotnet/api/system.exception.tostring), [Exception.GetType()](https://learn.microsoft.com/dotnet/api/system.exception.gettype), [Exception.TargetSite](https://learn.microsoft.com/dotnet/api/system.exception.targetsite), [Exception.StackTrace](https://learn.microsoft.com/dotnet/api/system.exception.stacktrace), [Exception.Message](https://learn.microsoft.com/dotnet/api/system.exception.message), [Exception.Data](https://learn.microsoft.com/dotnet/api/system.exception.data), [Exception.InnerException](https://learn.microsoft.com/dotnet/api/system.exception.innerexception), [Exception.HelpLink](https://learn.microsoft.com/dotnet/api/system.exception.helplink), [Exception.Source](https://learn.microsoft.com/dotnet/api/system.exception.source), [Exception.HResult](https://learn.microsoft.com/dotnet/api/system.exception.hresult), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### FileExistsException(string, int)

```csharp
public FileExistsException(string path, int hResult)

```

#### Parameters

`path` [string](https://learn.microsoft.com/dotnet/api/system.string)

`hResult` [int](https://learn.microsoft.com/dotnet/api/system.int32)

## Properties

### Path

```csharp
public string Path { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

### Classes

[CircularString<T>](Theobald.Ogc.CircularString-1/)

[Geometry<T>](Theobald.Ogc.Geometry-1/)

[Geometry](Theobald.Ogc.Geometry/)

[LineString<T>](Theobald.Ogc.LineString-1/)

[MultiLineString<T>](Theobald.Ogc.MultiLineString-1/)

[MultiPoint<T>](Theobald.Ogc.MultiPoint-1/)

[MultiPolygon<T>](Theobald.Ogc.MultiPolygon-1/)

[Point<T>](Theobald.Ogc.Point-1/)

[Polygon<T>](Theobald.Ogc.Polygon-1/)

[WellKnownSerializableList<T>](Theobald.Ogc.WellKnownSerializableList-1/)

[WkbByteOrderNotSupportedException](Theobald.Ogc.WkbByteOrderNotSupportedException/)

### Structs

[BinaryHelper](Theobald.Ogc.BinaryHelper/)

[EwkbReader](Theobald.Ogc.EwkbReader/)

[EwkbWriter](Theobald.Ogc.EwkbWriter/)

[Xy](Theobald.Ogc.Xy/)

[Xym](Theobald.Ogc.Xym/)

[Xyz](Theobald.Ogc.Xyz/)

[Xyzm](Theobald.Ogc.Xyzm/)

### Interfaces

[IWellKnownSerializable<T>](Theobald.Ogc.IWellKnownSerializable-1/)

### Enums

[Srid](Theobald.Ogc.Srid/)

[WkbByteOrder](Theobald.Ogc.WkbByteOrder/)

[WkbDimensions](Theobald.Ogc.WkbDimensions/)

[WkbGeometryType](Theobald.Ogc.WkbGeometryType/)

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public readonly struct BinaryHelper

```

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### BinaryHelper(in byte[])

```csharp
public BinaryHelper(in byte[] value)

```

#### Parameters

`value` [byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

## Properties

### Value

```csharp
public byte[] Value { get; }

```

#### Property Value

[byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

### this[int]

```csharp
public byte this[in int i] { get; set; }

```

#### Property Value

[byte](https://learn.microsoft.com/dotnet/api/system.byte)

## Methods

### EnsureLittleEndian()

```csharp
public static void EnsureLittleEndian()

```

### ToBytesBigEndian(in uint, in int)

```csharp
public void ToBytesBigEndian(in uint uint32, in int offset)

```

#### Parameters

`uint32` [uint](https://learn.microsoft.com/dotnet/api/system.uint32)

`offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### ToBytesBigEndian(in ulong, in int)

```csharp
public void ToBytesBigEndian(in ulong uint64, in int offset)

```

#### Parameters

`uint64` [ulong](https://learn.microsoft.com/dotnet/api/system.uint64)

`offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### ToBytesBigEndian(double, in int)

```csharp
public void ToBytesBigEndian(double d, in int offset)

```

#### Parameters

`d` [double](https://learn.microsoft.com/dotnet/api/system.double)

`offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### ToBytesNative(in uint, in int)

```csharp
public void ToBytesNative(in uint uint32, in int offset)

```

#### Parameters

`uint32` [uint](https://learn.microsoft.com/dotnet/api/system.uint32)

`offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### ToBytesNative(in double, in int)

```csharp
public void ToBytesNative(in double d, in int offset)

```

#### Parameters

`d` [double](https://learn.microsoft.com/dotnet/api/system.double)

`offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

### ToDoubleBigEndian(in int)

```csharp
public double ToDoubleBigEndian(in int offset)

```

#### Parameters

`offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

#### Returns

[double](https://learn.microsoft.com/dotnet/api/system.double)

### ToDoubleNative(in int)

```csharp
public double ToDoubleNative(in int offset)

```

#### Parameters

`offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

#### Returns

[double](https://learn.microsoft.com/dotnet/api/system.double)

### ToUint32BigEndian(in int)

```csharp
public uint ToUint32BigEndian(in int offset)

```

#### Parameters

`offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

#### Returns

[uint](https://learn.microsoft.com/dotnet/api/system.uint32)

### ToUint32Native(in int)

```csharp
public uint ToUint32Native(in int offset)

```

#### Parameters

`offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

#### Returns

[uint](https://learn.microsoft.com/dotnet/api/system.uint32)

### ToUint64BigEndian(in int)

```csharp
public ulong ToUint64BigEndian(in int offset)

```

#### Parameters

`offset` [int](https://learn.microsoft.com/dotnet/api/system.int32)

#### Returns

[ulong](https://learn.microsoft.com/dotnet/api/system.uint64)

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class CircularString<T> : Geometry<WellKnownSerializableList<T>> where T : struct, IWellKnownSerializable<T>

```

#### Type Parameters

`T`

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Geometry](../Theobald.Ogc.Geometry/) ← [Geometry\<WellKnownSerializableList<T>>](../Theobald.Ogc.Geometry-1/) ← [CircularString<T>](./)

#### Inherited Members

[Geometry\<WellKnownSerializableList<T>>.AsText(in StringBuilder)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsText_System_Text_StringBuilder__), [Geometry\<WellKnownSerializableList<T>>.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry\<WellKnownSerializableList<T>>.With(in WellKnownSerializableList<T>, in Srid?)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_With__0__System_Nullable_Theobald_Ogc_Srid___), [Geometry\<WellKnownSerializableList<T>>.WithoutSrid()](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WithoutSrid), [Geometry\<WellKnownSerializableList<T>>.Read(in EwkbReader, out Geometry\<WellKnownSerializableList<T>>)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Read_Theobald_Ogc_EwkbReader__Theobald_Ogc_Geometry__0___), [Geometry\<WellKnownSerializableList<T>>.WkbDimensions](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WkbDimensions), [Geometry\<WellKnownSerializableList<T>>.Value](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Value), [Geometry.WithoutSrid()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WithoutSrid), [Geometry.AsText(in StringBuilder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsText_System_Text_StringBuilder__), [Geometry.ToString()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToString), [Geometry.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry.ToBinary(in WkbByteOrder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToBinary_Theobald_Ogc_WkbByteOrder__), [Geometry.FromBinary(in byte[])](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_FromBinary_System_Byte____), [Geometry.WktGeometryTag](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WktGeometryTag), [Geometry.WkbDimensions](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbDimensions), [Geometry.WkbGeometryType](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbGeometryType), [Geometry.Srid](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_Srid), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### CircularString(in IEnumerable<T>, in Srid?)

```csharp
public CircularString(in IEnumerable<T> value, in Srid? srid)

```

#### Parameters

`value` [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)<T>

`srid` [Srid](../Theobald.Ogc.Srid/)?

### CircularString(in IEnumerable<T>)

```csharp
public CircularString(in IEnumerable<T> value)

```

#### Parameters

`value` [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)<T>

### CircularString()

```csharp
public CircularString()

```

## Properties

### WkbGeometryType

```csharp
public override WkbGeometryType WkbGeometryType { get; }

```

#### Property Value

[WkbGeometryType](../Theobald.Ogc.WkbGeometryType/)

### WktGeometryTag

```csharp
public override string WktGeometryTag { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### With(in WellKnownSerializableList<T>, in Srid?)

```csharp
public override Geometry<WellKnownSerializableList<T>> With(in WellKnownSerializableList<T> value, in Srid? maybeSrid)

```

#### Parameters

`value` [WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)<T>

`maybeSrid` [Srid](../Theobald.Ogc.Srid/)?

#### Returns

[Geometry](../Theobald.Ogc.Geometry-1/)\<[WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)<T>>

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public readonly struct EwkbReader

```

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Methods

### ReadCount(out uint)

```csharp
public EwkbReader ReadCount(out uint count)

```

#### Parameters

`count` [uint](https://learn.microsoft.com/dotnet/api/system.uint32)

#### Returns

[EwkbReader](./)

### ReadDouble(out double)

```csharp
public EwkbReader ReadDouble(out double value)

```

#### Parameters

`value` [double](https://learn.microsoft.com/dotnet/api/system.double)

#### Returns

[EwkbReader](./)

### ReadHeader(out WkbDimensions, out WkbGeometryType, out Srid?)

```csharp
public EwkbReader ReadHeader(out WkbDimensions dimensions, out WkbGeometryType geometryType, out Srid? maybeSrid)

```

#### Parameters

`dimensions` [WkbDimensions](../Theobald.Ogc.WkbDimensions/)

`geometryType` [WkbGeometryType](../Theobald.Ogc.WkbGeometryType/)

`maybeSrid` [Srid](../Theobald.Ogc.Srid/)?

#### Returns

[EwkbReader](./)

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public readonly struct EwkbWriter

```

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Methods

### ToArray()

```csharp
public byte[] ToArray()

```

#### Returns

[byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public abstract class Geometry<T> : Geometry where T : IWellKnownSerializable<T>

```

#### Type Parameters

`T`

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Geometry](../Theobald.Ogc.Geometry/) ← [Geometry<T>](./)

#### Inherited Members

[Geometry.WithoutSrid()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WithoutSrid), [Geometry.AsText(in StringBuilder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsText_System_Text_StringBuilder__), [Geometry.ToString()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToString), [Geometry.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry.ToBinary(in WkbByteOrder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToBinary_Theobald_Ogc_WkbByteOrder__), [Geometry.Read(in EwkbReader)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_Read_Theobald_Ogc_EwkbReader__), [Geometry.FromBinary(in byte[])](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_FromBinary_System_Byte____), [Geometry.WktGeometryTag](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WktGeometryTag), [Geometry.WkbDimensions](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbDimensions), [Geometry.WkbGeometryType](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbGeometryType), [Geometry.Srid](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_Srid), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Geometry(in T, in Srid?)

```csharp
protected Geometry(in T value, in Srid? srid)

```

#### Parameters

`value` T

`srid` [Srid](../Theobald.Ogc.Srid/)?

## Properties

### Value

```csharp
public T Value { get; }

```

#### Property Value

T

### WkbDimensions

```csharp
public override WkbDimensions WkbDimensions { get; }

```

#### Property Value

[WkbDimensions](../Theobald.Ogc.WkbDimensions/)

## Methods

### AsBinary(in EwkbWriter)

```csharp
public override EwkbWriter AsBinary(in EwkbWriter writer)

```

#### Parameters

`writer` [EwkbWriter](../Theobald.Ogc.EwkbWriter/)

#### Returns

[EwkbWriter](../Theobald.Ogc.EwkbWriter/)

### AsText(in StringBuilder)

```csharp
public override void AsText(in StringBuilder builder)

```

#### Parameters

`builder` [StringBuilder](https://learn.microsoft.com/dotnet/api/system.text.stringbuilder)

### Read(in EwkbReader, out Geometry<T>)

```csharp
public EwkbReader Read(in EwkbReader reader, out Geometry<T> geometry)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`geometry` [Geometry](./)<T>

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)

### Read(in EwkbReader)

```csharp
protected override Geometry Read(in EwkbReader reader)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

#### Returns

[Geometry](../Theobald.Ogc.Geometry/)

### With(in T, in Srid?)

```csharp
public abstract Geometry<T> With(in T value, in Srid? maybeSrid)

```

#### Parameters

`value` T

`maybeSrid` [Srid](../Theobald.Ogc.Srid/)?

#### Returns

[Geometry](./)<T>

### WithoutSrid()

```csharp
public override Geometry WithoutSrid()

```

#### Returns

[Geometry](../Theobald.Ogc.Geometry/)

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public abstract class Geometry

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Geometry](./)

#### Derived

[Geometry<T>](../Theobald.Ogc.Geometry-1/)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Geometry(in Srid?)

```csharp
protected Geometry(in Srid? srid)

```

#### Parameters

`srid` [Srid](../Theobald.Ogc.Srid/)?

## Properties

### Srid

```csharp
public Srid? Srid { get; }

```

#### Property Value

[Srid](../Theobald.Ogc.Srid/)?

### WkbDimensions

```csharp
public abstract WkbDimensions WkbDimensions { get; }

```

#### Property Value

[WkbDimensions](../Theobald.Ogc.WkbDimensions/)

### WkbGeometryType

```csharp
public abstract WkbGeometryType WkbGeometryType { get; }

```

#### Property Value

[WkbGeometryType](../Theobald.Ogc.WkbGeometryType/)

### WktGeometryTag

```csharp
public abstract string WktGeometryTag { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### AsBinary(in EwkbWriter)

```csharp
public abstract EwkbWriter AsBinary(in EwkbWriter writer)

```

#### Parameters

`writer` [EwkbWriter](../Theobald.Ogc.EwkbWriter/)

#### Returns

[EwkbWriter](../Theobald.Ogc.EwkbWriter/)

### AsText(in StringBuilder)

```csharp
public abstract void AsText(in StringBuilder builder)

```

#### Parameters

`builder` [StringBuilder](https://learn.microsoft.com/dotnet/api/system.text.stringbuilder)

### FromBinary(in byte[])

```csharp
public static Geometry FromBinary(in byte[] ewkb)

```

#### Parameters

`ewkb` [byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

#### Returns

[Geometry](./)

### Read(in EwkbReader)

```csharp
protected abstract Geometry Read(in EwkbReader reader)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

#### Returns

[Geometry](./)

### ToBinary(in WkbByteOrder)

```csharp
public byte[] ToBinary(in WkbByteOrder byteOrder)

```

#### Parameters

`byteOrder` [WkbByteOrder](../Theobald.Ogc.WkbByteOrder/)

#### Returns

[byte](https://learn.microsoft.com/dotnet/api/system.byte)[]

### ToString()

```csharp
public override string ToString()

```

#### Returns

[string](https://learn.microsoft.com/dotnet/api/system.string)

### WithoutSrid()

```csharp
public abstract Geometry WithoutSrid()

```

#### Returns

[Geometry](./)

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public interface IWellKnownSerializable<T>

```

#### Type Parameters

`T`

## Properties

### WkbDimensions

```csharp
WkbDimensions WkbDimensions { get; }

```

#### Property Value

[WkbDimensions](../Theobald.Ogc.WkbDimensions/)

## Methods

### AsBinary(in EwkbWriter)

```csharp
EwkbWriter AsBinary(in EwkbWriter writer)

```

#### Parameters

`writer` [EwkbWriter](../Theobald.Ogc.EwkbWriter/)

#### Returns

[EwkbWriter](../Theobald.Ogc.EwkbWriter/)

### AsText(in StringBuilder)

```csharp
void AsText(in StringBuilder builder)

```

#### Parameters

`builder` [StringBuilder](https://learn.microsoft.com/dotnet/api/system.text.stringbuilder)

### Read(in EwkbReader, out T)

```csharp
EwkbReader Read(in EwkbReader reader, out T t)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`t` T

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class LineString<T> : Geometry<WellKnownSerializableList<T>>, IWellKnownSerializable<LineString<T>> where T : IWellKnownSerializable<T>, new()

```

#### Type Parameters

`T`

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Geometry](../Theobald.Ogc.Geometry/) ← [Geometry\<WellKnownSerializableList<T>>](../Theobald.Ogc.Geometry-1/) ← [LineString<T>](./)

#### Implements

[IWellKnownSerializable\<LineString<T>>](../Theobald.Ogc.IWellKnownSerializable-1/)

#### Inherited Members

[Geometry\<WellKnownSerializableList<T>>.AsText(in StringBuilder)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsText_System_Text_StringBuilder__), [Geometry\<WellKnownSerializableList<T>>.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry\<WellKnownSerializableList<T>>.With(in WellKnownSerializableList<T>, in Srid?)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_With__0__System_Nullable_Theobald_Ogc_Srid___), [Geometry\<WellKnownSerializableList<T>>.WithoutSrid()](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WithoutSrid), [Geometry\<WellKnownSerializableList<T>>.Read(in EwkbReader, out Geometry\<WellKnownSerializableList<T>>)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Read_Theobald_Ogc_EwkbReader__Theobald_Ogc_Geometry__0___), [Geometry\<WellKnownSerializableList<T>>.WkbDimensions](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WkbDimensions), [Geometry\<WellKnownSerializableList<T>>.Value](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Value), [Geometry.WithoutSrid()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WithoutSrid), [Geometry.AsText(in StringBuilder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsText_System_Text_StringBuilder__), [Geometry.ToString()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToString), [Geometry.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry.ToBinary(in WkbByteOrder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToBinary_Theobald_Ogc_WkbByteOrder__), [Geometry.FromBinary(in byte[])](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_FromBinary_System_Byte____), [Geometry.WktGeometryTag](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WktGeometryTag), [Geometry.WkbDimensions](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbDimensions), [Geometry.WkbGeometryType](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbGeometryType), [Geometry.Srid](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_Srid), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### LineString(in IEnumerable<T>, in Srid?)

```csharp
public LineString(in IEnumerable<T> value, in Srid? srid)

```

#### Parameters

`value` [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)<T>

`srid` [Srid](../Theobald.Ogc.Srid/)?

### LineString(in IEnumerable<T>)

```csharp
public LineString(in IEnumerable<T> value)

```

#### Parameters

`value` [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)<T>

### LineString()

```csharp
public LineString()

```

## Properties

### WkbGeometryType

```csharp
public override WkbGeometryType WkbGeometryType { get; }

```

#### Property Value

[WkbGeometryType](../Theobald.Ogc.WkbGeometryType/)

### WktGeometryTag

```csharp
public override string WktGeometryTag { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### Read(in EwkbReader, out LineString<T>)

```csharp
public EwkbReader Read(in EwkbReader reader, out LineString<T> t)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`t` [LineString](./)<T>

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)

### With(in WellKnownSerializableList<T>, in Srid?)

```csharp
public override Geometry<WellKnownSerializableList<T>> With(in WellKnownSerializableList<T> value, in Srid? maybeSrid)

```

#### Parameters

`value` [WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)<T>

`maybeSrid` [Srid](../Theobald.Ogc.Srid/)?

#### Returns

[Geometry](../Theobald.Ogc.Geometry-1/)\<[WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)<T>>

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class MultiLineString<T> : Geometry<WellKnownSerializableList<LineString<T>>> where T : IWellKnownSerializable<T>, new()

```

#### Type Parameters

`T`

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Geometry](../Theobald.Ogc.Geometry/) ← [Geometry\<WellKnownSerializableList\<LineString<T>>>](../Theobald.Ogc.Geometry-1/) ← [MultiLineString<T>](./)

#### Inherited Members

[Geometry\<WellKnownSerializableList\<LineString<T>>>.AsText(in StringBuilder)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsText_System_Text_StringBuilder__), [Geometry\<WellKnownSerializableList\<LineString<T>>>.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry\<WellKnownSerializableList\<LineString<T>>>.With(in WellKnownSerializableList\<LineString<T>>, in Srid?)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_With__0__System_Nullable_Theobald_Ogc_Srid___), [Geometry\<WellKnownSerializableList\<LineString<T>>>.WithoutSrid()](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WithoutSrid), [Geometry\<WellKnownSerializableList\<LineString<T>>>.Read(in EwkbReader, out Geometry\<WellKnownSerializableList\<LineString<T>>>)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Read_Theobald_Ogc_EwkbReader__Theobald_Ogc_Geometry__0___), [Geometry\<WellKnownSerializableList\<LineString<T>>>.WkbDimensions](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WkbDimensions), [Geometry\<WellKnownSerializableList\<LineString<T>>>.Value](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Value), [Geometry.WithoutSrid()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WithoutSrid), [Geometry.AsText(in StringBuilder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsText_System_Text_StringBuilder__), [Geometry.ToString()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToString), [Geometry.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry.ToBinary(in WkbByteOrder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToBinary_Theobald_Ogc_WkbByteOrder__), [Geometry.FromBinary(in byte[])](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_FromBinary_System_Byte____), [Geometry.WktGeometryTag](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WktGeometryTag), [Geometry.WkbDimensions](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbDimensions), [Geometry.WkbGeometryType](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbGeometryType), [Geometry.Srid](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_Srid), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### MultiLineString(in IEnumerable\<LineString<T>>, Srid?)

```csharp
public MultiLineString(in IEnumerable<LineString<T>> value, Srid? srid)

```

#### Parameters

`value` [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)\<[LineString](../Theobald.Ogc.LineString-1/)<T>>

`srid` [Srid](../Theobald.Ogc.Srid/)?

### MultiLineString(in IEnumerable\<LineString<T>>)

```csharp
public MultiLineString(in IEnumerable<LineString<T>> value)

```

#### Parameters

`value` [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)\<[LineString](../Theobald.Ogc.LineString-1/)<T>>

### MultiLineString()

```csharp
public MultiLineString()

```

## Properties

### WkbGeometryType

```csharp
public override WkbGeometryType WkbGeometryType { get; }

```

#### Property Value

[WkbGeometryType](../Theobald.Ogc.WkbGeometryType/)

### WktGeometryTag

```csharp
public override string WktGeometryTag { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### With(in WellKnownSerializableList\<LineString<T>>, in Srid?)

```csharp
public override Geometry<WellKnownSerializableList<LineString<T>>> With(in WellKnownSerializableList<LineString<T>> value, in Srid? maybeSrid)

```

#### Parameters

`value` [WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)\<[LineString](../Theobald.Ogc.LineString-1/)<T>>

`maybeSrid` [Srid](../Theobald.Ogc.Srid/)?

#### Returns

[Geometry](../Theobald.Ogc.Geometry-1/)\<[WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)\<[LineString](../Theobald.Ogc.LineString-1/)<T>>>

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class MultiPoint<T> : Geometry<WellKnownSerializableList<Point<T>>> where T : struct, IWellKnownSerializable<T>

```

#### Type Parameters

`T`

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Geometry](../Theobald.Ogc.Geometry/) ← [Geometry\<WellKnownSerializableList\<Point<T>>>](../Theobald.Ogc.Geometry-1/) ← [MultiPoint<T>](./)

#### Inherited Members

[Geometry\<WellKnownSerializableList\<Point<T>>>.AsText(in StringBuilder)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsText_System_Text_StringBuilder__), [Geometry\<WellKnownSerializableList\<Point<T>>>.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry\<WellKnownSerializableList\<Point<T>>>.With(in WellKnownSerializableList\<Point<T>>, in Srid?)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_With__0__System_Nullable_Theobald_Ogc_Srid___), [Geometry\<WellKnownSerializableList\<Point<T>>>.WithoutSrid()](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WithoutSrid), [Geometry\<WellKnownSerializableList\<Point<T>>>.Read(in EwkbReader, out Geometry\<WellKnownSerializableList\<Point<T>>>)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Read_Theobald_Ogc_EwkbReader__Theobald_Ogc_Geometry__0___), [Geometry\<WellKnownSerializableList\<Point<T>>>.WkbDimensions](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WkbDimensions), [Geometry\<WellKnownSerializableList\<Point<T>>>.Value](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Value), [Geometry.WithoutSrid()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WithoutSrid), [Geometry.AsText(in StringBuilder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsText_System_Text_StringBuilder__), [Geometry.ToString()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToString), [Geometry.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry.ToBinary(in WkbByteOrder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToBinary_Theobald_Ogc_WkbByteOrder__), [Geometry.FromBinary(in byte[])](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_FromBinary_System_Byte____), [Geometry.WktGeometryTag](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WktGeometryTag), [Geometry.WkbDimensions](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbDimensions), [Geometry.WkbGeometryType](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbGeometryType), [Geometry.Srid](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_Srid), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### MultiPoint(in IEnumerable\<Point<T>>, Srid?)

```csharp
public MultiPoint(in IEnumerable<Point<T>> value, Srid? srid)

```

#### Parameters

`value` [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)\<[Point](../Theobald.Ogc.Point-1/)<T>>

`srid` [Srid](../Theobald.Ogc.Srid/)?

### MultiPoint(in IEnumerable\<Point<T>>)

```csharp
public MultiPoint(in IEnumerable<Point<T>> value)

```

#### Parameters

`value` [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)\<[Point](../Theobald.Ogc.Point-1/)<T>>

### MultiPoint()

```csharp
public MultiPoint()

```

## Properties

### WkbGeometryType

```csharp
public override WkbGeometryType WkbGeometryType { get; }

```

#### Property Value

[WkbGeometryType](../Theobald.Ogc.WkbGeometryType/)

### WktGeometryTag

```csharp
public override string WktGeometryTag { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### With(in WellKnownSerializableList\<Point<T>>, in Srid?)

```csharp
public override Geometry<WellKnownSerializableList<Point<T>>> With(in WellKnownSerializableList<Point<T>> value, in Srid? maybeSrid)

```

#### Parameters

`value` [WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)\<[Point](../Theobald.Ogc.Point-1/)<T>>

`maybeSrid` [Srid](../Theobald.Ogc.Srid/)?

#### Returns

[Geometry](../Theobald.Ogc.Geometry-1/)\<[WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)\<[Point](../Theobald.Ogc.Point-1/)<T>>>

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class MultiPolygon<T> : Geometry<WellKnownSerializableList<Polygon<T>>> where T : IWellKnownSerializable<T>, new()

```

#### Type Parameters

`T`

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Geometry](../Theobald.Ogc.Geometry/) ← [Geometry\<WellKnownSerializableList\<Polygon<T>>>](../Theobald.Ogc.Geometry-1/) ← [MultiPolygon<T>](./)

#### Inherited Members

[Geometry\<WellKnownSerializableList\<Polygon<T>>>.AsText(in StringBuilder)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsText_System_Text_StringBuilder__), [Geometry\<WellKnownSerializableList\<Polygon<T>>>.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry\<WellKnownSerializableList\<Polygon<T>>>.With(in WellKnownSerializableList\<Polygon<T>>, in Srid?)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_With__0__System_Nullable_Theobald_Ogc_Srid___), [Geometry\<WellKnownSerializableList\<Polygon<T>>>.WithoutSrid()](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WithoutSrid), [Geometry\<WellKnownSerializableList\<Polygon<T>>>.Read(in EwkbReader, out Geometry\<WellKnownSerializableList\<Polygon<T>>>)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Read_Theobald_Ogc_EwkbReader__Theobald_Ogc_Geometry__0___), [Geometry\<WellKnownSerializableList\<Polygon<T>>>.WkbDimensions](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WkbDimensions), [Geometry\<WellKnownSerializableList\<Polygon<T>>>.Value](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Value), [Geometry.WithoutSrid()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WithoutSrid), [Geometry.AsText(in StringBuilder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsText_System_Text_StringBuilder__), [Geometry.ToString()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToString), [Geometry.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry.ToBinary(in WkbByteOrder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToBinary_Theobald_Ogc_WkbByteOrder__), [Geometry.FromBinary(in byte[])](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_FromBinary_System_Byte____), [Geometry.WktGeometryTag](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WktGeometryTag), [Geometry.WkbDimensions](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbDimensions), [Geometry.WkbGeometryType](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbGeometryType), [Geometry.Srid](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_Srid), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### MultiPolygon(in IEnumerable\<Polygon<T>>, Srid?)

```csharp
public MultiPolygon(in IEnumerable<Polygon<T>> value, Srid? srid)

```

#### Parameters

`value` [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)\<[Polygon](../Theobald.Ogc.Polygon-1/)<T>>

`srid` [Srid](../Theobald.Ogc.Srid/)?

### MultiPolygon(in IEnumerable\<Polygon<T>>)

```csharp
public MultiPolygon(in IEnumerable<Polygon<T>> value)

```

#### Parameters

`value` [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)\<[Polygon](../Theobald.Ogc.Polygon-1/)<T>>

### MultiPolygon()

```csharp
public MultiPolygon()

```

## Properties

### WkbGeometryType

```csharp
public override WkbGeometryType WkbGeometryType { get; }

```

#### Property Value

[WkbGeometryType](../Theobald.Ogc.WkbGeometryType/)

### WktGeometryTag

```csharp
public override string WktGeometryTag { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### With(in WellKnownSerializableList\<Polygon<T>>, in Srid?)

```csharp
public override Geometry<WellKnownSerializableList<Polygon<T>>> With(in WellKnownSerializableList<Polygon<T>> value, in Srid? maybeSrid)

```

#### Parameters

`value` [WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)\<[Polygon](../Theobald.Ogc.Polygon-1/)<T>>

`maybeSrid` [Srid](../Theobald.Ogc.Srid/)?

#### Returns

[Geometry](../Theobald.Ogc.Geometry-1/)\<[WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)\<[Polygon](../Theobald.Ogc.Polygon-1/)<T>>>

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class Point<T> : Geometry<T>, IWellKnownSerializable<Point<T>> where T : struct, IWellKnownSerializable<T>

```

#### Type Parameters

`T`

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Geometry](../Theobald.Ogc.Geometry/) ← [Geometry<T>](../Theobald.Ogc.Geometry-1/) ← [Point<T>](./)

#### Implements

[IWellKnownSerializable\<Point<T>>](../Theobald.Ogc.IWellKnownSerializable-1/)

#### Inherited Members

[Geometry<T>.AsText(in StringBuilder)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsText_System_Text_StringBuilder__), [Geometry<T>.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry<T>.With(in T, in Srid?)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_With__0__System_Nullable_Theobald_Ogc_Srid___), [Geometry<T>.WithoutSrid()](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WithoutSrid), [Geometry<T>.Read(in EwkbReader, out Geometry<T>)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Read_Theobald_Ogc_EwkbReader__Theobald_Ogc_Geometry__0___), [Geometry<T>.WkbDimensions](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WkbDimensions), [Geometry<T>.Value](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Value), [Geometry.WithoutSrid()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WithoutSrid), [Geometry.AsText(in StringBuilder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsText_System_Text_StringBuilder__), [Geometry.ToString()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToString), [Geometry.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry.ToBinary(in WkbByteOrder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToBinary_Theobald_Ogc_WkbByteOrder__), [Geometry.FromBinary(in byte[])](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_FromBinary_System_Byte____), [Geometry.WktGeometryTag](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WktGeometryTag), [Geometry.WkbDimensions](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbDimensions), [Geometry.WkbGeometryType](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbGeometryType), [Geometry.Srid](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_Srid), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Point(in T, in Srid?)

```csharp
public Point(in T value, in Srid? srid)

```

#### Parameters

`value` T

`srid` [Srid](../Theobald.Ogc.Srid/)?

### Point(in T)

```csharp
public Point(in T value)

```

#### Parameters

`value` T

### Point()

```csharp
public Point()

```

## Properties

### WkbGeometryType

```csharp
public override WkbGeometryType WkbGeometryType { get; }

```

#### Property Value

[WkbGeometryType](../Theobald.Ogc.WkbGeometryType/)

### WktGeometryTag

```csharp
public override string WktGeometryTag { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### AsText(in StringBuilder)

```csharp
public override void AsText(in StringBuilder builder)

```

#### Parameters

`builder` [StringBuilder](https://learn.microsoft.com/dotnet/api/system.text.stringbuilder)

### Read(in EwkbReader, out Point<T>)

```csharp
public EwkbReader Read(in EwkbReader reader, out Point<T> t)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`t` [Point](./)<T>

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)

### With(in T, in Srid?)

```csharp
public override Geometry<T> With(in T value, in Srid? maybeSrid)

```

#### Parameters

`value` T

`maybeSrid` [Srid](../Theobald.Ogc.Srid/)?

#### Returns

[Geometry](../Theobald.Ogc.Geometry-1/)<T>

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class Polygon<T> : Geometry<WellKnownSerializableList<WellKnownSerializableList<T>>>, IWellKnownSerializable<Polygon<T>> where T : IWellKnownSerializable<T>, new()

```

#### Type Parameters

`T`

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Geometry](../Theobald.Ogc.Geometry/) ← [Geometry\<WellKnownSerializableList\<WellKnownSerializableList<T>>>](../Theobald.Ogc.Geometry-1/) ← [Polygon<T>](./)

#### Implements

[IWellKnownSerializable\<Polygon<T>>](../Theobald.Ogc.IWellKnownSerializable-1/)

#### Inherited Members

[Geometry\<WellKnownSerializableList\<WellKnownSerializableList<T>>>.AsText(in StringBuilder)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsText_System_Text_StringBuilder__), [Geometry\<WellKnownSerializableList\<WellKnownSerializableList<T>>>.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry\<WellKnownSerializableList\<WellKnownSerializableList<T>>>.With(in WellKnownSerializableList\<WellKnownSerializableList<T>>, in Srid?)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_With__0__System_Nullable_Theobald_Ogc_Srid___), [Geometry\<WellKnownSerializableList\<WellKnownSerializableList<T>>>.WithoutSrid()](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WithoutSrid), [Geometry\<WellKnownSerializableList\<WellKnownSerializableList<T>>>.Read(in EwkbReader, out Geometry\<WellKnownSerializableList\<WellKnownSerializableList<T>>>)](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Read_Theobald_Ogc_EwkbReader__Theobald_Ogc_Geometry__0___), [Geometry\<WellKnownSerializableList\<WellKnownSerializableList<T>>>.WkbDimensions](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_WkbDimensions), [Geometry\<WellKnownSerializableList\<WellKnownSerializableList<T>>>.Value](../Theobald.Ogc.Geometry-1/#Theobald_Ogc_Geometry_1_Value), [Geometry.WithoutSrid()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WithoutSrid), [Geometry.AsText(in StringBuilder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsText_System_Text_StringBuilder__), [Geometry.ToString()](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToString), [Geometry.AsBinary(in EwkbWriter)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_AsBinary_Theobald_Ogc_EwkbWriter__), [Geometry.ToBinary(in WkbByteOrder)](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_ToBinary_Theobald_Ogc_WkbByteOrder__), [Geometry.FromBinary(in byte[])](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_FromBinary_System_Byte____), [Geometry.WktGeometryTag](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WktGeometryTag), [Geometry.WkbDimensions](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbDimensions), [Geometry.WkbGeometryType](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_WkbGeometryType), [Geometry.Srid](../Theobald.Ogc.Geometry/#Theobald_Ogc_Geometry_Srid), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Polygon(in IEnumerable\<IEnumerable<T>>, in Srid?)

```csharp
public Polygon(in IEnumerable<IEnumerable<T>> value, in Srid? srid)

```

#### Parameters

`value` [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)\<[IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)<T>>

`srid` [Srid](../Theobald.Ogc.Srid/)?

### Polygon(in IEnumerable\<IEnumerable<T>>)

```csharp
public Polygon(in IEnumerable<IEnumerable<T>> value)

```

#### Parameters

`value` [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)\<[IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)<T>>

### Polygon()

```csharp
public Polygon()

```

## Properties

### WkbGeometryType

```csharp
public override WkbGeometryType WkbGeometryType { get; }

```

#### Property Value

[WkbGeometryType](../Theobald.Ogc.WkbGeometryType/)

### WktGeometryTag

```csharp
public override string WktGeometryTag { get; }

```

#### Property Value

[string](https://learn.microsoft.com/dotnet/api/system.string)

## Methods

### Read(in EwkbReader, out Polygon<T>)

```csharp
public EwkbReader Read(in EwkbReader reader, out Polygon<T> t)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`t` [Polygon](./)<T>

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)

### With(in WellKnownSerializableList\<WellKnownSerializableList<T>>, in Srid?)

```csharp
public override Geometry<WellKnownSerializableList<WellKnownSerializableList<T>>> With(in WellKnownSerializableList<WellKnownSerializableList<T>> value, in Srid? maybeSrid)

```

#### Parameters

`value` [WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)\<[WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)<T>>

`maybeSrid` [Srid](../Theobald.Ogc.Srid/)?

#### Returns

[Geometry](../Theobald.Ogc.Geometry-1/)\<[WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)\<[WellKnownSerializableList](../Theobald.Ogc.WellKnownSerializableList-1/)<T>>>

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public enum Srid : uint

```

## Fields

`Default = 0`

`Wgs84 = 4326`

`Wgs84Planar = 1000004326`

`Wgs84PseudoMercator = 3857`

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public sealed class WellKnownSerializableList<T> : IWellKnownSerializable<WellKnownSerializableList<T>> where T : IWellKnownSerializable<T>, new()

```

#### Type Parameters

`T`

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [WellKnownSerializableList<T>](./)

#### Implements

[IWellKnownSerializable\<WellKnownSerializableList<T>>](../Theobald.Ogc.IWellKnownSerializable-1/)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### WellKnownSerializableList(in IEnumerable<T>)

```csharp
public WellKnownSerializableList(in IEnumerable<T> items)

```

#### Parameters

`items` [IEnumerable](https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1)<T>

### WellKnownSerializableList()

```csharp
public WellKnownSerializableList()

```

## Properties

### WkbDimensions

```csharp
public WkbDimensions WkbDimensions { get; }

```

#### Property Value

[WkbDimensions](../Theobald.Ogc.WkbDimensions/)

## Methods

### AsBinary(in EwkbWriter)

```csharp
public EwkbWriter AsBinary(in EwkbWriter writer)

```

#### Parameters

`writer` [EwkbWriter](../Theobald.Ogc.EwkbWriter/)

#### Returns

[EwkbWriter](../Theobald.Ogc.EwkbWriter/)

### AsText(in StringBuilder)

```csharp
public void AsText(in StringBuilder builder)

```

#### Parameters

`builder` [StringBuilder](https://learn.microsoft.com/dotnet/api/system.text.stringbuilder)

### Read(in EwkbReader, out WellKnownSerializableList<T>)

```csharp
public EwkbReader Read(in EwkbReader reader, out WellKnownSerializableList<T> t)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`t` [WellKnownSerializableList](./)<T>

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public enum WkbByteOrder : byte

```

## Fields

`Ndr = 1`

Little Endian

`Xdr = 0`

Big Endian

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public class WkbByteOrderNotSupportedException : NotSupportedException, ISerializable

```

#### Inheritance

[object](https://learn.microsoft.com/dotnet/api/system.object) ← [Exception](https://learn.microsoft.com/dotnet/api/system.exception) ← [SystemException](https://learn.microsoft.com/dotnet/api/system.systemexception) ← [NotSupportedException](https://learn.microsoft.com/dotnet/api/system.notsupportedexception) ← [WkbByteOrderNotSupportedException](./)

#### Implements

[ISerializable](https://learn.microsoft.com/dotnet/api/system.runtime.serialization.iserializable)

#### Inherited Members

[Exception.GetBaseException()](https://learn.microsoft.com/dotnet/api/system.exception.getbaseexception), [Exception.GetObjectData(SerializationInfo, StreamingContext)](https://learn.microsoft.com/dotnet/api/system.exception.getobjectdata), [Exception.ToString()](https://learn.microsoft.com/dotnet/api/system.exception.tostring), [Exception.GetType()](https://learn.microsoft.com/dotnet/api/system.exception.gettype), [Exception.TargetSite](https://learn.microsoft.com/dotnet/api/system.exception.targetsite), [Exception.StackTrace](https://learn.microsoft.com/dotnet/api/system.exception.stacktrace), [Exception.Message](https://learn.microsoft.com/dotnet/api/system.exception.message), [Exception.Data](https://learn.microsoft.com/dotnet/api/system.exception.data), [Exception.InnerException](https://learn.microsoft.com/dotnet/api/system.exception.innerexception), [Exception.HelpLink](https://learn.microsoft.com/dotnet/api/system.exception.helplink), [Exception.Source](https://learn.microsoft.com/dotnet/api/system.exception.source), [Exception.HResult](https://learn.microsoft.com/dotnet/api/system.exception.hresult), [Exception.SerializeObjectState](https://learn.microsoft.com/dotnet/api/system.exception.serializeobjectstate), [object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.MemberwiseClone()](https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### WkbByteOrderNotSupportedException(in byte)

```csharp
public WkbByteOrderNotSupportedException(in byte byteOrder)

```

#### Parameters

`byteOrder` [byte](https://learn.microsoft.com/dotnet/api/system.byte)

### WkbByteOrderNotSupportedException(in WkbByteOrder)

```csharp
public WkbByteOrderNotSupportedException(in WkbByteOrder byteOrder)

```

#### Parameters

`byteOrder` [WkbByteOrder](../Theobald.Ogc.WkbByteOrder/)

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public enum WkbDimensions : uint

```

## Fields

`M = 2000`

2D + Measure

`Xy = 0`

`Z = 1000`

3D

`Zm = 3000`

3D + Measure

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public enum WkbGeometryType : uint

```

## Fields

`CircularString = 8`

`LineString = 2`

`MultiLineString = 5`

`MultiPoint = 4`

`MultiPolygon = 6`

`Point = 1`

`Polygon = 3`

`SridFlag = 536870912`

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public readonly struct Xy : IWellKnownSerializable<Xy>

```

#### Implements

[IWellKnownSerializable<Xy>](../Theobald.Ogc.IWellKnownSerializable-1/)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Xy(in double, in double)

```csharp
public Xy(in double x, in double y)

```

#### Parameters

`x` [double](https://learn.microsoft.com/dotnet/api/system.double)

`y` [double](https://learn.microsoft.com/dotnet/api/system.double)

## Properties

### WkbDimensions

```csharp
public WkbDimensions WkbDimensions { get; }

```

#### Property Value

[WkbDimensions](../Theobald.Ogc.WkbDimensions/)

### X

```csharp
public double X { get; }

```

#### Property Value

[double](https://learn.microsoft.com/dotnet/api/system.double)

### Y

```csharp
public double Y { get; }

```

#### Property Value

[double](https://learn.microsoft.com/dotnet/api/system.double)

## Methods

### AsBinary(in EwkbWriter)

```csharp
public EwkbWriter AsBinary(in EwkbWriter writer)

```

#### Parameters

`writer` [EwkbWriter](../Theobald.Ogc.EwkbWriter/)

#### Returns

[EwkbWriter](../Theobald.Ogc.EwkbWriter/)

### AsText(in StringBuilder)

```csharp
public void AsText(in StringBuilder builder)

```

#### Parameters

`builder` [StringBuilder](https://learn.microsoft.com/dotnet/api/system.text.stringbuilder)

### FromBinary(in EwkbReader, out Xy)

```csharp
public static EwkbReader FromBinary(in EwkbReader reader, out Xy xy)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`xy` [Xy](./)

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)

### Read(in EwkbReader, out Xy)

```csharp
public EwkbReader Read(in EwkbReader reader, out Xy xy)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`xy` [Xy](./)

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public readonly struct Xym : IWellKnownSerializable<Xym>

```

#### Implements

[IWellKnownSerializable<Xym>](../Theobald.Ogc.IWellKnownSerializable-1/)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Xym(in double, in double, in double)

```csharp
public Xym(in double x, in double y, in double m)

```

#### Parameters

`x` [double](https://learn.microsoft.com/dotnet/api/system.double)

`y` [double](https://learn.microsoft.com/dotnet/api/system.double)

`m` [double](https://learn.microsoft.com/dotnet/api/system.double)

## Properties

### M

```csharp
public double M { get; }

```

#### Property Value

[double](https://learn.microsoft.com/dotnet/api/system.double)

### WkbDimensions

```csharp
public WkbDimensions WkbDimensions { get; }

```

#### Property Value

[WkbDimensions](../Theobald.Ogc.WkbDimensions/)

### X

```csharp
public double X { get; }

```

#### Property Value

[double](https://learn.microsoft.com/dotnet/api/system.double)

### Y

```csharp
public double Y { get; }

```

#### Property Value

[double](https://learn.microsoft.com/dotnet/api/system.double)

## Methods

### AsBinary(in EwkbWriter)

```csharp
public EwkbWriter AsBinary(in EwkbWriter writer)

```

#### Parameters

`writer` [EwkbWriter](../Theobald.Ogc.EwkbWriter/)

#### Returns

[EwkbWriter](../Theobald.Ogc.EwkbWriter/)

### AsText(in StringBuilder)

```csharp
public void AsText(in StringBuilder builder)

```

#### Parameters

`builder` [StringBuilder](https://learn.microsoft.com/dotnet/api/system.text.stringbuilder)

### FromBinary(in EwkbReader, out Xym)

```csharp
public static EwkbReader FromBinary(in EwkbReader reader, out Xym xym)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`xym` [Xym](./)

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)

### Read(in EwkbReader, out Xym)

```csharp
public EwkbReader Read(in EwkbReader reader, out Xym xym)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`xym` [Xym](./)

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public readonly struct Xyz : IWellKnownSerializable<Xyz>

```

#### Implements

[IWellKnownSerializable<Xyz>](../Theobald.Ogc.IWellKnownSerializable-1/)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Xyz(in double, in double, in double)

```csharp
public Xyz(in double x, in double y, in double z)

```

#### Parameters

`x` [double](https://learn.microsoft.com/dotnet/api/system.double)

`y` [double](https://learn.microsoft.com/dotnet/api/system.double)

`z` [double](https://learn.microsoft.com/dotnet/api/system.double)

## Properties

### WkbDimensions

```csharp
public WkbDimensions WkbDimensions { get; }

```

#### Property Value

[WkbDimensions](../Theobald.Ogc.WkbDimensions/)

### X

```csharp
public double X { get; }

```

#### Property Value

[double](https://learn.microsoft.com/dotnet/api/system.double)

### Y

```csharp
public double Y { get; }

```

#### Property Value

[double](https://learn.microsoft.com/dotnet/api/system.double)

### Z

```csharp
public double Z { get; }

```

#### Property Value

[double](https://learn.microsoft.com/dotnet/api/system.double)

## Methods

### AsBinary(in EwkbWriter)

```csharp
public EwkbWriter AsBinary(in EwkbWriter writer)

```

#### Parameters

`writer` [EwkbWriter](../Theobald.Ogc.EwkbWriter/)

#### Returns

[EwkbWriter](../Theobald.Ogc.EwkbWriter/)

### AsText(in StringBuilder)

```csharp
public void AsText(in StringBuilder builder)

```

#### Parameters

`builder` [StringBuilder](https://learn.microsoft.com/dotnet/api/system.text.stringbuilder)

### FromBinary(in EwkbReader, out Xyz)

```csharp
public static EwkbReader FromBinary(in EwkbReader reader, out Xyz xyz)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`xyz` [Xyz](./)

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)

### Read(in EwkbReader, out Xyz)

```csharp
public EwkbReader Read(in EwkbReader reader, out Xyz xyz)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`xyz` [Xyz](./)

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)

Namespace: [Theobald.Ogc](../)\
Assembly: ERPConnectStandard20.dll

```csharp
public readonly struct Xyzm : IWellKnownSerializable<Xyzm>

```

#### Implements

[IWellKnownSerializable<Xyzm>](../Theobald.Ogc.IWellKnownSerializable-1/)

#### Inherited Members

[object.GetType()](https://learn.microsoft.com/dotnet/api/system.object.gettype), [object.ToString()](https://learn.microsoft.com/dotnet/api/system.object.tostring), [object.Equals(object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)>), [object.Equals(object?, object?)](<https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)>), [object.ReferenceEquals(object?, object?)](https://learn.microsoft.com/dotnet/api/system.object.referenceequals), [object.GetHashCode()](https://learn.microsoft.com/dotnet/api/system.object.gethashcode)

## Constructors

### Xyzm(in double, in double, in double, in double)

```csharp
public Xyzm(in double x, in double y, in double z, in double m)

```

#### Parameters

`x` [double](https://learn.microsoft.com/dotnet/api/system.double)

`y` [double](https://learn.microsoft.com/dotnet/api/system.double)

`z` [double](https://learn.microsoft.com/dotnet/api/system.double)

`m` [double](https://learn.microsoft.com/dotnet/api/system.double)

## Properties

### M

```csharp
public double M { get; }

```

#### Property Value

[double](https://learn.microsoft.com/dotnet/api/system.double)

### WkbDimensions

```csharp
public WkbDimensions WkbDimensions { get; }

```

#### Property Value

[WkbDimensions](../Theobald.Ogc.WkbDimensions/)

### X

```csharp
public double X { get; }

```

#### Property Value

[double](https://learn.microsoft.com/dotnet/api/system.double)

### Y

```csharp
public double Y { get; }

```

#### Property Value

[double](https://learn.microsoft.com/dotnet/api/system.double)

### Z

```csharp
public double Z { get; }

```

#### Property Value

[double](https://learn.microsoft.com/dotnet/api/system.double)

## Methods

### AsBinary(in EwkbWriter)

```csharp
public EwkbWriter AsBinary(in EwkbWriter writer)

```

#### Parameters

`writer` [EwkbWriter](../Theobald.Ogc.EwkbWriter/)

#### Returns

[EwkbWriter](../Theobald.Ogc.EwkbWriter/)

### AsText(in StringBuilder)

```csharp
public void AsText(in StringBuilder builder)

```

#### Parameters

`builder` [StringBuilder](https://learn.microsoft.com/dotnet/api/system.text.stringbuilder)

### FromBinary(in EwkbReader, out Xyzm)

```csharp
public static EwkbReader FromBinary(in EwkbReader reader, out Xyzm xyzm)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`xyzm` [Xyzm](./)

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)

### Read(in EwkbReader, out Xyzm)

```csharp
public EwkbReader Read(in EwkbReader reader, out Xyzm xyzm)

```

#### Parameters

`reader` [EwkbReader](../Theobald.Ogc.EwkbReader/)

`xyzm` [Xyzm](./)

#### Returns

[EwkbReader](../Theobald.Ogc.EwkbReader/)
