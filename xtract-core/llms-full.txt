# Xtract Core HelpCenter

> Xtract Core is a Web API server solution for creating and configuring data extractions from SAP systems. Learn how to use Xtract Core by browsing our user documentation, changelog and more.

Full: https://helpcenter.theobald-software.com/xtract-core/llms-full.txt

# Getting Started

This section shows how to install and set up Xtract Core for the first time.

## About Xtract Core

Xtract Core is a whitelabel Web API server for developing your own SAP interfaces. The Xtract Core API enables you to extract data from SAP Tables and write them to target environments.

As Xtract Core is still in its initial release, only certain SAP objects and target environments are supported. Contact the Theobald Software [sales team](mailto:sales@theobald-software.com) for feature requests or feedback.

- **Supported SAP Objects:**

  ______________________________________________________________________

  - SAP Tables
  - Planned for Q3 2025: Delta Table extractions (CDC)

- **Supported Target Environments:**

  ______________________________________________________________________

  - Azure Blob Storage

For information on which SAP systems are supported, refer to the [Xtract Core Requirements](../knowledge-base/requirements/#supported-sap-systems-and-releases).

### Get Xtract Core

Contact the Theobald Software [sales team](mailto:sales@theobald-software.com?subject=Requesting%20Xtract%20Core%20Trial&body=I'd%20like%20to%20receive%20a%202-month%20demo%20version%20of%20Xtract%20Core.) to get access to a 2 month trial version of Xtract Core.

You are guaranteed to get unrestricted support by the Theobald Software support team during the evaluation phase. In case of questions or doubts, feel free to contact Theobald Software at any time:

- [Contact Forms](https://theobald-software.com/en/contact/)
- [Support Portal](https://support.theobald-software.com)

## Setup

Xtract Core provides a configurable Windows service that acts as a web server to serve incoming API calls. The service and network settings of Xtract Core can be configured using the files in the installaltion directory of Xtract Core.

### Prerequisites

- Contact the Theobald Software [sales team](mailto:sales@theobald-software.com?subject=Requesting%20Xtract%20Core%20Trial&body=I'd%20like%20to%20receive%20a%202-month%20demo%20version%20of%20Xtract%20Core.) to get a 2 month trial version of Xtract Core.
- Download and install the [.NET8.0 Desktop Runtime from Microsoft](https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/runtime-desktop-8.0.11-windows-x64-installer) and install it.
- Optional: Install the THEO/READ_TABLE function module in SAP to boost the capabilities of SAP table extractions. For more information, see [Knowledge Base: Function Module for Tables](../knowledge-base/custom-function-module-for-table-extraction/).

For more information on system requirements and supported SAP systems, see [Knowledge Base: Requirements](../knowledge-base/requirements/).

### Installation

Follow the steps below to install the Xtract Core Windows service:

1. Extract all files from the `XtractCore.zip` archive into the directory where you want to install Xtract Core.

1. Open a command line tool with administrator rights and navigate to the installation directory.

1. Run the following command to install the Xtract Core Windows service and to create a dedicated virtual user that runs the service:

   ```text
   service.exe -i --virtual-service-user 

   ```

1. Make sure that the Xtract Core service "SAP Connector" is running on your Windows system and that the default port 1337 is not blocked by the firewall.

The Xtract Core Windows service can now receive HTTP requests. For information on how to change the default settings of the Xtract Core service, refer to the [service settings](#service-settings) and [network-settings](#network-settings).

Note

To update Xtract Core replace the files in the installation directory with the new Xtract Core installation files.

Warning

**Access is denied.**\
The virtual user that is created during the installation of Xtract Core has minimal access rights. If Xtract Core is installed in a user-specific directory (e.g., `C:\Users\<username>\Documents`), the virtual user cannot access the files. To successfully run the Windows service, grant the virtual user access rights to the directory or install Xtract Core in a system-level directory, e.g., `C:\XtractCore`.

### Files in the Installation Directory

The installation directory contains the following files:

| Filename | Description | | --- | --- | | config directory | Directory that contains all SAP and destination connections, extractions, and web server settings. This directory is created when executing a POST request for the first time. | | logs directory | Directory that contains service logs. | | private directory | Directory that contains keys to encrypt passwords. This directory is created when running an extraction for the first time. | | Transport directory | Directory that contains SAP function modules. Read the README.pdf within the directory for more information. | | Cleaner.exe | Application that deletes all cached results and log files. | | ConfigConverter.exe | Application that converts extractions, connections, etc. from previous a version format to the new format. | | listener.exe | Application that starts one worker per incomming connection. listener.exe can be renamed (make sure to rename the listener.json as well and update the content of theobald.service.definition.json). | | listener.json | Contains the default settings of the web server. listener.json can be renamed (make sure that the listener.json has the same name as the listener.exe). | | service.exe | Application that installs Xtract Core. | | theobald.service.definition.json | Contains the configuration of the Xtract Core Windows service. theobald.service.definition.json cannot be renamed. | | worker.exe | Application that handles HTTP requests. worker.exe can be renamed (make sure to update the content of listener.json). | | XtractCoreLicense.json | License file. |

### Service Settings

The name (`serviceName`), displayed name (`displayName`) and description (`description`) of the Windows service can be changed in the `theobald.service.definition.json` file.

theobald.service.definition.json

```json
{
    "description": "A web API for extracting data from SAP systems",
    "displayName": "SAPConnector",
    "serviceName": "SAP Connector Service",
    "servers": [
        {
            "displayName": "listener",
            "path": "listener.exe"
        }
    ]
}

```

Note

Do not change any values for `convertConfig`, `minCfgVersion` and `currentVersion`.

### Network Settings

The network settings of the web server can be changed in the `listener.json` file.

listener.json

```json
{
    "insecurePort": 1337,
    "securePort": 1338,
    "workerName": "worker.exe",
    "mode": "Localhost(1)" 
}

```

1. The property **mode** supports *Any* and *Localhost*.
   - *Any* listens on the default network interface and the loopback interface.
   - *Localhost* only listens on the loopback interface.

### TLS Configuration

You can enable Transport Layer Security (TLS) to use secured HTTPS communication for the web server. For information on how to set up TLS with Xtract Core, refer to the [Knowledge Base Article: Install an X.509 Certificate](../knowledge-base/install-x.509-certificate/).

## How to use the API

The [API Reference](../api-reference/) lists all available Xtract Core endpoints. It includes descriptions of all endpoints and their parameters. The Xtract Core API uses the following parameter types:

| Parameters | Description | Example | | --- | --- | --- | | Path | Path parameters are part of the request URL and are used to address specific resources. They are referenced by placeholders in curved brackets. | */connections/sap/{name}/tables?pattern=ma*\* | | Query | Query parameters are added to the end of a request URL, following '?'. They are listed in key-value pairs, separated by '&'. Query parameters can be used for filtering or sorting. | */connections/sap/{name}/tables?pattern=ma*\* | | Body | Body parameters are passed in the request body of POST methods to add or update structured data. A list of mandatory and optional body parameters is provided in the data model of an API call. In the API reference, expand the data model to display the descriptions of the parameters. | - |

### General Workflow

The general workflow for first-time Xtract Core users includes the following steps:

1. Create a [connection to an SAP source system](#create-sap-connections) to extract data from.
1. Create a [connection to a target environment / destination](#create-azure-blob-storage-connections) to write data to.
1. Optional: Fetch information about the tables in your SAP source system. For example:
   - [names and descriptions of tables](../api-reference/#/connections/metaconnection)
   - [names and descriptions of table columns](../api-reference/#/connections/metatable)
1. Create a reusable [extraction](#create-table-extractions) that defines which SAP table data to extract.
1. [Run](#run-extractions) the extraction.

### Create SAP Connections

Before connecting to SAP for the first time, set up an SAP dialog user with the necessary [SAP user rights](../knowledge-base/sap-authority-objects/#general-authorization-objects).\
Use the following endpoint to create a new connection to an SAP application server:

```http
POST /v1/connections/sap/{name}

```

```http
POST /v1/connections/sap/{name} HTTP/1.1
Host: localhost:1337
Content-Type: application/json
Content-Length: 109

{
"Host": "sap-erp-as05.example.com(1)",
"User": "alice",
"Password": "myPassword",
"Client": "800",
"Language": "en",
"InstanceNo": 0
}

```

1. Input values for the SAP connection can be found in the *Properties* of the SAP Logon Pad or they can be requested from the SAP Basis team.

```shell
curl -X POST \
     -H '[Content-Type: application/json]' \
     -H '[Content-Length: 142]' \
     -d '"Host": "sap-erp-as05.example.com", "User": "alice", "Password": "myPassword", "Client": "800", "Language": "en", "InstanceNo": 0' \
     'http://localhost:1337/v1/connections/sap/{name}'

```

```js
fetch('http://localhost:1337/v1/connections/sap/{name}', {
  "method": "POST",
  "headers": {
    "[Content-Type": "application/json]",
    "[Content-Length": "142]"
  },
  "body": JSON.stringify("Host": "sap-erp-as05.example.com", "User": "alice", "Password": "myPassword", "Client": "800", "Language": "en", "InstanceNo": 0)"
});

```

When this endpoint is called, the Xtract Core web server tries to establish a connection to the SAP system with the given credentials before saving the connection.

Tip

The `Content-Length` property in the header represents the byte size of the JSON string in the request body. When using curl, the `Content-Length` can be determined automatically. The `-v` (verbose) option returns the request details, including `Content-Length`.

### Create Azure Blob Storage Connections

To connect to a Microsoft Azure Blob Storage, generate a Shared Access Signature (SAS) token for authentication, see [Microsoft Documentation: Create SAS tokens for storage containers](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/authentication/create-sas-tokens?view=doc-intel-4.0.0&tabs=azure-portal#use-the-azure-portal). The following SAS permissions are required to write data to the Azure container:

- Add
- Create
- Write
- Delete
- List

Use the following endpoint to create a new connection to an Azure blob storage container:

```HTTP
POST /v1/connections/azureblob/{name}

```

```http
POST /v1/connections/azureblob/{name} HTTP/1.1
Host: localhost:1337
Content-Type: application/json
Content-Length: 223

{
"Account": "my-account",
"Token": "sv=YYYY-MM-DD&ss=...%3D(1)",
"Container": "container"
}

```

1. You can copy the SAS token from the Azure portal in:\
   **Storage accounts > [account_name] > Data storage > Containers > [container_name] > Generate SAS**.

```shell
curl -X POST \
     -H '[Content-Type: application/json]' \
     -H '[Content-Length: 223]' \
     -d '"Account": "my-account", "Token": "sv=YYYY-MM-DD&ss=...%3D", "Container": "container"' \
     'http://localhost:1337/v1/connections/azureblob/{name}'

```

```js
fetch('http://localhost:1337/v1/connections/azureblob/{name}', {
  "method": "POST",
  "headers": {
    "[Content-Type": "application/json]",
    "[Content-Length": "223]"
  },
  "body": JSON.stringify("Account": "my-account", "Token": "sv=YYYY-MM-DD&ss=...%3D", "Container": "container")"
});

```

When this endpoint is called, the Xtract Core web server tries to establish a connection to Azure with the given credentials before saving the connection.

Tip

The `Content-Length` property in the header represents the byte size of the JSON string in the request body. When using curl, the `Content-Length` can be determined automatically. The `-v` (verbose) option returns the request details, including `Content-Length`.

### Create Table Extractions

Before creating extractions, make sure to meet the following requirements:

- A valid [connection to an SAP system](#create-sap-connections) is available.
- The SAP user of the SAP connection has sufficient user rights, see [Knowledge Base Article: SAP Authorization Objects](../knowledge-base/sap-authority-objects/#table)
- A valid [connection to a destination](#create-azure-blob-storage-connections) is available.
- You know the technical name of the SAP table you want to extract. You can fetch the names and descriptions of the tables in your SAP source system [using the Xtract Core API](../api-reference/#/connections/metaconnection).

Use the following endpoint to create a new table extraction:

```HTTP
POST /v1/extractions/table/{name}

```

```http
POST /v1/extractions/table/{name} HTTP/1.1
Host: localhost:1337
Content-Type: application/json
Content-Length: 190

{
"Table": "MARA",
"Where": "MATNR = 000000000001",
"Source": "s4hana",
"Destination": "azure",
"Columns": ["MATNR", "MANDT"],
"ResultName": "materials",
"FunctionModule": "/THEO/READ_TABLE"
}

```

```shell
curl -X POST \
     -H '[Content-Type: application/json]' \
     -H '[Content-Length: 190]' \
     -d '"Table": "MARA", "Where": "MATNR = 000000000001", "Source": "s4hana", "Destination": "azure", "Columns": ["MATNR", "MANDT(1)"], "ResultName": "materials", "FunctionModule": "/THEO/READ_TABLE"' \
     'http://localhost:1337/v1/extractions/table/{name}'

```

```js
fetch('http://localhost:1337/v1/extractions/table/{name}', {
  "method": "POST",
  "headers": {
    "[Content-Type": "application/json]",
    "[Content-Length": "190]"
  },
  "body": JSON.stringify("Table": "MARA", "Where": "MATNR = 000000000001", "Source": "s4hana", "Destination": "azure", "Columns": ["MATNR", "MANDT(1)"], "ResultName": "materials", "FunctionModule": "/THEO/READ_TABLE")"
});

```

Tip

The `Content-Length` property in the header represents the byte size of the JSON string in the request body. When using curl, the `Content-Length` can be determined automatically. The `-v` (verbose) option returns the request details, including `Content-Length`.

### Run Extractions

Extractions are executed on the web server. An extraction can be executed synchronously (`run`) or asynchronously (`start`). The response of an extraction run contains the following information:

| Response | Description | | --- | --- | | HTTP status code | The HTTP status code 200 indicates a successful extraction call. It does not indicate a successful execution of the extraction. The HTTP status code 404 indicates that the called extraction does not exist. Detailed information can be found in the log of the web service. | | HTTP header | Shows the timestamp of the extraction, e.g., X-XU-Timestamp: 2025-01-24_19:03:09.971. The timestamp is unique and can be used to query status information and logs of the extraction. | | HTTP response body | The response body of the extraction contains the extraction log. |

#### Synchronous Extractions

When running extractions synchronously, the HTTP response head is returned as soon as the server receives the first data package. Use the following endpoint to run an extraction and wait for the result:

```http
GET /run/{name} HTTP/1.1
Host: localhost:1337

```

```shell
curl -X GET 'http://localhost:1337/run/{name}/'

```

```js
fetch('http://localhost:1337/run/{name}/', {"method": "GET"});

```

Note

Any issue that occure before the first data package is received, result in a 4XX or 5XX status code.

#### Asynchronous Extractions

When running extractions asynchronously, the request immediately returns the HTTP response head. Status information can be queried using the timestamp in the header. Use the following endpoint to run an extraction without waiting for the results:

```http
GET /start/{name} HTTP/1.1
Host: localhost:1337

```

```shell
curl -X GET 'http://localhost:1337/start/{name}/'

```

```js
fetch('http://localhost:1337/start/{name}/', {"method": "GET"});

```

### Access Logs

Xtract Core logs all steps performed on a system in log files. The log files are located in the installation directory of Xtract Core. It is also possible to fetch logs using the Xtract Core API. For more information, refer to the [API Reference](../api-reference/#/logs).
# Knowledge Base Articles

This section contains in-depth articles about the usage of Xtract Core.

### General

- [Requirements for Xtract Core](requirements/)
- [Install an X.509 Certificate](install-x.509-certificate/)
- [Xtract Core in a Hybrid Cloud Architecture](xtract-core-in-a-hybrid-cloud-architecture/)

______________________________________________________________________

### SAP

- [Check the Accessibility to an SAP System](check-the-accessibility-to-an-sap-system/)
- [Import an SAP Transport Request](import-an-sap-transport-request/)
- [SAP User Rights](sap-authority-objects/)
- [Supported SAP S/4HANA Versions](supported-sap-and-hana-versions/)

______________________________________________________________________

### Table

- [Extraction Mechanism of Table](table-extraction-mechanism/)
- [Install /THEO/READ_TABLE for Table Extractions](custom-function-module-for-table-extraction/)
- [WHERE Clause Syntax](where-clause/)

The following article shows how to check the accessibility of an SAP system using the [paping.exe](https://code.google.com/archive/p/paping) tool. Alternatively, you can also use the Microsoft [telnet](https://learn.microsoft.com/de-de/windows-server/administration/windows-commands/telnet) tool.

Sometimes the firewall is blocking the traffic to the SAP System. This could be a local firewall, but also a firewall in the destination network. You can use the paping.exetool to ping the port and to check if the firewall is open.

### Ping the SAP System

Use the following syntax with paping.exe:

```console
paping.exe SAPServer -p port -c 3*

```

```console
paping.exe 192.168.0.9 -p 3305 -c 3

```

### Port Numbers

If an SAP-Router is used, the ports are 3299 and 3399.\
If not, the ports are 32XX and 33XX. XX is usually the system number, e.g., 00, or 05.

Some important port numbers:

```console
sapdp00 3200/tcp # SAP Dispatcher. 3200 + Instance-Number
sapgw00 3300/tcp # SAP Gateway. 3300 + Instance-Number
sapsp00 3400/tcp # 3400 + Instance-Number
sapms00 3500/tcp # 3500 + Instance-Number
sapmsSID 3600/tcp # SAP Message Server. 3600 + Instance-Number
sapgw00s 4800/tcp # SAP Secure Gateway 4800 + Instance-Number

```

SAP customization for the *Table* extraction type is optional. The installation of the custom function module `/THEO/READ_TABLE` is recommended to improve performance and to bypass restrictions of the SAP standard function module RFC_READ_TABLE.

### RFC_READ_TABLE Restrictions

Especially with older SAP releases you may encounter a few restrictions when using the SAP standard function module (RFC_READ_TABLE) for table extraction:

- The overall width of all columns to be extracted must not exceed 512 bytes.
- It is not possible to extract data from tables that contain one or more columns of the data type f (FLTP, floating point), DEC (decimal, e.g. for percentage) or x (RAW, LRAW).
- Poor extraction performance with larger tables. Can cause also duplicates.
- Depending on the SAP version there may be other restrictions.

When facing restrictions, install the Theobald Software custom function module [/THEO/READ_TABLE](#installation-of-theoread_table) on your SAP system.

Warning

**Converting issues**\
Error while converting value '\*.0' of row 1530, column 3.\
The SAP standard module *RFC_READ_TABLE* for table extraction can only extract the ABAP data type DEC to a limited extent. This leads to the mentioned example error during extraction. Use the function module */THEO/READ_TABLE*.

### Installation of /THEO/READ_TABLE

An SAP transport request for the installation of the function module is provided in the installation directory of Xtract Core in the `Transports` folder. Transport requests are imported into SAP by your SAP Basis team. For more information, see [Knowledge Base: Import an SAP Transport Request](/xtract-core/knowledge-base/import-an-sap-transport-request/).

It is recommended to install the latest custom function module THEO/READ_TABLE:

| Transport Request | Compatible SAP Systems | | --- | --- | | `THEO_READ_TABLE_740SP05.zip` | ABAP version 7.40 SP05 and higher | | `THEO_READ_TABLE_710.zip` | ABAP version 7.10 to 7.40 SP04 | | `THEO_READ_TABLE_640.zip` | ABAP versions from 6.40 until 7.03 | | `THEO_READ_TABLE_46C.zip` | ABAP versions from 4.6C |

When importing the transport requests on older SAP releases a syntax error may occur. Contact [Theobald Support](https://support.theobald-software.com) and send the dedicated error message text.

Warning

**Generating Short Dumps.**\
Testing the function modules on an SAP system is not possible. Function modules /THEO/READ_TABLE and Z_THEO_READ_TABLE can only be called by Theobald Software products due to the callback function of the module. Avoid calling function modules /THEO/READ_TABLE and Z_THEO_READ_TABLE directly from an SAP system.

The following article shows how to import transport requests for custom functions modules that are included in the installation directory of your product.

### Upload SAP Transport Requests to SAP

If you have access to the file system of SAP, you can copy and paste the files of your transport request directly into the `data` and `cofiles` folders of your SAP system. If you don't have access to the file system, follow the steps below to upload the files of your transport request using the SAP function module ARCHIVFILE_CLIENT_TO_SERVER:

1. Unzip the transport request provided in the installation directory of your product, e.g., `C:\Program Files\Theobald Software\Xtract Core\ABAP`.
1. Open SAP and go to transaction AL11.
1. Find the entry DIR_TRANS in the column *Name of Directory Parameter*. Note or copy the path shown in the column *Directory*.
1. Go to SAP transaction SE37.
1. Enter name of function module ARCHIVFILE_CLIENT_TO_SERVER and click **[Test/Execute]**.
1. In the field **PATH** you select your request file from from step 1. The name of the file starts with an "R", e.g., R900472.
1. In the field **TARGET PATH** you construct your target path using the following pattern:\
   `{copied path from step 2}\data\{request file name}`.
1. Enable case-sensitivity and click **[Execute]**. When prompted, confirm the upload.
1. In the field **PATH** you select your cofile from from step 1. The name of the file starts with a "K", e.g., K900472.
1. In the field **TARGET PATH** you construct your target path using the following pattern:\
   `{copied path from step 2}\cofiles\{cofile name}`.
1. Enable case-sensitivity and click **[Execute]**. When prompted, confirm the upload.

The files are now available in SAP.

Note

Another method for uploading files to SAP is the SAP transaction CG3Z. This transaction is only available on ERP systems.

### Import SAP Transport Requests

Follow the steps below to add the transport requests to the import queue and import them:

1. Go to SAP transaction STMS to open the transport management system.
1. Click **[Import Overview]** ( icon).
1. Double click on the import queue in which you want to load the transport request into.
1. Open the transport request selection dialog via **More > Extras > Other Requests > Add**.
1. Select the transport request and confirm. If prompted, confirm the import.
1. Select your transport request from the list and click **[Import Request]** ( icon). The window "Import Transport Request" opens.
1. Enter the target client. If the version of the SAP system where the transport request was created differs from your SAP system version, select the option **Ignore Invalid Component Version**.
1. Confirm your settings.

The transport request is imported.

### Check the Status of Transport Requests

The import overview of the transport management system (transaction STMS) lists all transport requests.\
The status of the transport requests is displayed in the column "RC".

A green bar indicates that the import was successful. In case of warnings or errors, double click on the icon to view the error messages.

The following article shows how to install an X.509 certificate for transport encryption.\
The installation of an X.509 certificate is required to use [Transport Layer Security (TLS)](https://learn.microsoft.com/en-us/windows/win32/secauthn/transport-layer-security-protocol) and secure authentication with Xtract Core.

### About X.509 Certificates

There are two main approaches for creating an X.509 certificate:

- Certificate released by an (internal) certification authority (CA)
- Self-signed certificate

On test environments you can use a self-signed certificate. For production environment it is recommended to use a certificate released by an (internal) certificate authority (CA).

### Create and Import the X.509 Certificate

Make sure to have a TLS certificate issued by your IT network team considering the following points:

1. The certificate property “Subject Alternative Name” contains the DNS name of the server that runs the SAP Connector Windows service. When activating TLS, the *Subject Alternative Name* is used as the new hostname.
1. The certificate common name (CN) attribute contains the DNS name of the server. To display the Common Name (CN) of the certificate, double-click the certificate in the Cetrificate Manager and navigate to the *Details* tab.
1. Import the certificate to the [Windows Certificate Store](<https://technet.microsoft.com/en-us/ms788967(v=vs.91)>) of the machine, that runs the SAP Connector Windows service using the Microsoft Management Console (mmc.exe). The depicted example uses the server name "TODD":
1. Right-click the certificate and navigate to **All Tasks > Manage private keys** to add a new permission entry for the Windows user that runs the SAP Connector Windows service.
1. Enter the object name "NT Service\\SAP Connector Service" and click **[Check Names]** before applying the changes.

The certificate is now available on your machine.

Note

The Windows Certificate Store works with most browsers. NMozilla Firefox offers its own certificate storage. Configure your Firefox browser to trust certificates in the Windows certificate store or import the certificate via an enterprise policy, see [Mozilla Support: Setting Up Certificate Authorities (CAs) in Firefox](https://support.mozilla.org/en-US/kb/setting-certificate-authorities-firefox).

### Enable TLS in Xtract Core

Follow the steps below to enable TLS for the Xtract Core Windows service:

1. Open the following file in the Xtract Core installation directory: `config/servers/tls.json`. If the directory and file do not exist, create them.

1. Enable TLS in the `tls.json` file and add the details of the certificate. Example:

   tls.json

   ```json
   {
       "tlsEnabled": true,
       "certificate": {
       "subjectAltName": "BOB.theobald.local",
       "issuer": "CN=Theobald CA, DC=theobald, DC=local",
       "notAfter": "20250717T152041.000Z",
       "thumbprint": "0C32EEE1053DA57E88E6AE22832DFB13775250F9"
       }
   }

   ```

1. Restart the Xtract Core service to restart the listener.

The web server now uses the HTTPS protocol for communication. The default port for secured communication is 1338. You can change the port in the `listener.json` file using the property *securePort*, see [Network Settings](../../getting-started/#network-settings).

This page contains information about system requirements and compatible SAP systems for Xtract Core.

### Supported SAP Systems and Releases

The following SAP Systems are supported:

- All SAP ABAP based systems that provide RFC connectivity and all SAP S/4 HANA (Cloud) systems that provide OData connectivity are supported.
- SAP ABAP systems on any database are supported (including HANA). The database used by the SAP system is irrelevant, because the integration occurs at SAP application server level.
- SAP systems running on Big Endian and Little Endian hardware are supported.
- SAP industry solutions like IS-U, IS-R, etc. are supported.
- SAP releases 4.6C and newer are supported.
- All operating systems are supported.

Examples

- [SAP S/4HANA](/xtract-core/knowledge-base/supported-sap-and-hana-versions)
- mySAP
- SAP Application Server ABAP
- Message Server
- Router
- Standalone Gateway
- SAP Business Suite 7 (CRM, SRM, SCM etc.)
- SAP Business All in One, CAR, APO, PI
- SAP BW 3.1 and later
- SAP BW/BI 7.x
- SAP ERP / ECC 5.0 / ECC 6.0 (including all EhPs)
- SAP R/3 Version 4.6C and later
- SAP BW/4HANA
- ...and more.

**Disclaimer**

While SAP versions that are no longer supported by SAP still work with Theobald Software products, they are excluded from the Theobald Software support service.

#### Not Supported SAP Systems

The following SAP Systems are not supported:

- SAP systems that don’t run on ABAP systems
- SAP systems that don't provide RFC connectivity.

Examples

- SAP S/4HANA Cloud Public Edition
- Business By Design
- Business One
- Business Objects
- Sybase
- Ariba
- Success Factors
- Concur

### HANA Database

You can use Operational Data Provisioning (ODP) to connect the SAP HANA database of an SAP ABAP source system. Communication is done via RFC. With the ODP context for SAP HANA (HANA) the following HANA View types are available for extracting:

- Analysis Views
- Calculation Views
- Associated Attribute Views

Direct access to a HANA database without an SAP ABAP source system running on the corresponding HANA database is not supported.

### Ports

Following ports have to be opened depending on the SAP system, where *nn* is the instance number of the SAP system (e.g. 00 or 99).

- SAP Application Server: Port 33*nn*
- SAP Message Server (Load Balancing): Port 36*nn*
- Secure Network Communications (SNC): Port 48*nn*
- SAP Router: Port 3299

### SAP Licenses

Additional SAP licenses might be required for extracting data from SAP. Contact SAP to verify these requirements.

### Ports

The following ports between the Windows server that runs Xtract Core and the SAP server, must be open:

| SAP NetWeaver Component | Port (NN = System number of the SAP system) | | --- | --- | | SAP Application Server | 33<NN> | | SAP Message Server | 36<NN> | | Secure Network Communication (SNC) | 48<NN> | | SAP-Router | 3299 |

For more information, see [SAP Help: TCP/IP Ports of All SAP Products](https://help.sap.com/viewer/ports).

### SAP Licenses

Additional SAP licenses might be required for extracting data from SAP. Contact SAP to verify these requirements.

### Operating Systems

- Windows 11
- Windows Server 2022 (until 2031-10-14)
- Windows 10 (until 2025-10-14)
- Windows Server 2022
- Windows Server 2019 (until 2029-01-09)
- Windows Server 2016 (until 2027-01-12)

### Other Applications and Frameworks

- .NET Framework 4.7.2 or higher, see [Download .NET Framework from Microsoft](https://support.microsoft.com/en-us/help/4054530/microsoft-net-framework-4-7-2-offline-installer-for-windows).
- .NET8.0 Desktop Runtime, see [Download .NET8.0 Desktop Runtime from Micsrosoft](https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/runtime-desktop-8.0.11-windows-x64-installer).

### Hardware

The following requirements apply to the hardware:

| Hardware | Minimum Requirement | | --- | --- | | Processor Cores | 2 Cores, 1 additional core is required for each additional parallel extraction | | Processor Speed | 1.4 GHz, recommended: 2.0 GHz or faster | | Main Memory | 8 GB, recommended: 12 GB for up to two parallel extractions 4 GB dedicated memory in average for each additional parallel extraction. Check the exact storage requirements of an extraction in your scenario. | | Disk Space | min. 150 MB total for Installation | | 64-Bit Environment | 64-Bit operating systems only | | Display Resolution | 1920x1080x1.25 with 1.25 display scaling |

To use Xtract Core you need an SAP connection user with sufficient authorization in SAP. Authorizations are assigned via authorization objects in SAP. Redirect this page to your SAP Basis administrators to get the relevant authorization objects for your SAP connection user.

The authorizations in the section [General authorization objects](#general-authorization-objects) are required to establish an SAP connection with the SAP application server. The required authorizations for each extraction type are listed in their respective section.

### SAP Authorization Profiles

Theobald Software collected and combined the necessary authorizations for all extraction types into SAP roles. You can download the SAP profiles and upload them to your SAP system:

| Extraction Type | SAP Role File | | --- | --- | | [General Authorization Objects](#general-authorization-objects) | [ZXTGENERAL.SAP](/xtract-core/assets/files/sap_roles/ZXTGENERAL.SAP) | | [Table](#table) | [ZXTABLE.SAP](/xtract-core/assets/files/sap_roles/ZXTABLE.SAP) |

Note

If you still get an authorization error, ask SAP Basis to record an ST01-/ or SU53-authorization trace in SAP. This trace shows which authorizations objects are missing.

### General Authorization Objects

The following authorization objects are required to establish a connection to SAP.

Necessary SAP authorizations

```text
S_RFC           RFC_TYPE=FUGR; RFC_NAME=SYST; ACTVT=16
S_RFC           RFC_TYPE=FUGR; RFC_NAME=SRFC; ACTVT=16
S_RFC           RFC_TYPE=FUGR; RFC_NAME=RFC1; ACTVT=16
S_RFC           RFC_TYPE=FUGR; RFC_NAME=OCS_CRM; ACTVT=16

```

[Download SAP profile for general authorization](/xtract-core/assets/files/sap_roles/ZXTGENERAL.SAP)

### Table

Necessary SAP authorizations

```text
S_RFC            ACTVT=16; RFC_TYPE=FUGR; RFC_NAME=SDTX, SDIFRUNTIME, /THEO/READ_TABLE                   
S_TABU_DIS       ACTVT=03; DICBERCLS=XXXX
S_TABU_NAM       ACTVT=03; TABLE=DD02V, DD17S, DD27S, ENLFDIR
S_DSAUTH         ACTVT=16;    

```

XXXX (stands for a placeholder) is the authorization group for the table. To determine, which authorization group belongs to which table, check the table TDDAT - Maintenance Areas for Tables. If the table is not listed, the authorization group is &NC&. For authorizing specific tables use authorization object S_TABU_NAM instead of S_TABU_DIS.

______________________________________________________________________

#### Related Links

- [SAP Help: Role Administration](https://help.sap.com/doc/saphelp_nw74/7.4.16/en-us/52/6714a9439b11d1896f0000e8322d00/content.htm)
- [SAP ONE Support Launchpad](https://launchpad.support.sap.com/#/notes/2855052)

The following article gives an overview of all SAP S/4HANA systems supported by Xtract Core.

### Supported SAP S/4HANA Cloud Systems

The following table lists all available SAP S/4HANA cloud systems and their compatibility with Xtract Core.\
SAP S/4HANA Cloud Edition (Cloud ERP):

| | S/4HANA Public Cloud | S/4HANA Private Cloud | | --- | --- | --- | | **Compatible with Xtract Core:** | | | | **Limitations:** | - | - |

### SAP S/4HANA On Premise Systems

The following table lists all available SAP S/4HANA on premise systems and their compatibility with Xtract Core.\
SAP S/4HANA AnyPremise (ERP in the Cloud):

| | S/4HANA Private Cloud Managed by SAP (HEC) | SAP HEC Customer Edition | S/4HANA AnyPremise | S/4HANA AnyPremise | | --- | --- | --- | --- | --- | | Additional Information: | On-Premises Edition | Runs on Customer Data Center | Public Cloud (AZURE/AWS/GCP) | called ERP in DC (Customer Data Center) | | Compatible with Xtract Core: | | | | |

The following article illustrates the extraction mechanism of the *Table* extraction type.

### Table Extraction Process

The extraction mechanism of Table includes the following processes:

- Lookup process to read SAP metadata for the definition of the Table extraction.
- Configuration of the *Table* extraction type definition.
- Execution of the asynchron data loading process.

The depicted graphic illustrates the mechanism in both Xtract Core and in SAP. Click the graphic to zoom in.

A WHERE clause can be used to filter table records, see [SAP ABAP Documentation: SELECT-WHERE](https://help.sap.com/doc/abapdocu_750_index_htm/7.50/en-us/abapwhere.htm).

### WHERE Clause Syntax

The WHERE Clause syntax generally uses the following structure:

```bash
[Table]~[Column][Space][Operator][Space][Filter-Value]

```

**Example:**

```text
KNA1~LAND1 = 'US'

```

The following rules apply to filter values:

| Rule | Correct | Wrong | | --- | --- | --- | | Enter a space before and after the equal sign | *YEAR = '1999'* | *YEAR= '1999 '*, *YEAR ='1999'* or *YEAR='1999'* | | Set floating point numbers in single quotation mark | *KMENG > '10.3'* | *KMENG > 10.3* | | Values must use the internal SAP representation: Date: YYYYMMDD Year Period: YYYYPPP Numbers with leading zeroes, e.g., customer numbers | 19990101 1999001 0000001000 | 01.01.1999 001.1999 1000 |

The following operations are supported in the WHERE clause:

| Operator | Description | | --- | --- | | =, EQ | True if the content of operand1 is equal to the content of operand2. | | \<>, NE | True if the content of operand1 is not equal to the content of operand2. | | \<, LT | True if the content of operand1 is less than the content of operand2. | | >, GT | True if the content of operand1 is greater than the content of operand2. | | \<=, LE | True if the content of operand1 is less than or equal to the content of operand2. | | >=, GE | True if the content of operand1 is greater than or equal to the content of operand2. | | (NOT) LIKE | True if the value of operand1 matches (does not match) the pattern in operand2. | | (NOT) IN | True if the content of operand1 is (not) part of the content of operand2. Operand2 must be of type LIST or SQL. |

For more details on the OpenSQL syntax, see [SAP Help: Select WHERE](https://help.sap.com/doc/abapdocu_752_index_htm/7.52/en-US/abapwhere.htm?file=abapwhere.htm)

Tip

To increase extracting performance, make sure to place the indexed fields as the first selection filter operation in the WHERE clause.

Note

When fields with the same name exist in different tables, the field names must be formatted as [table name]~[field name], e.g., MARC~MATNR. This can be the case when extracting multiple tables.

### Subqueries

Note

The usage of subqueries is only possible as of SAP Release 7.40, SP05.

A subquery is an SQL query nested inside a larger query. Subqueries are nested queries that provide data to the enclosing query. Subqueries need be enclosed with parenthesis and can return individual values or a list of records. Get more details about subqueries on the [SAP Help: Conditions](https://help.sap.com/doc/abapdocu_752_index_htm/7.52/en-US/abenwhere_logexp_in_subquery.htm).

**Example:**

In the following example a subquery is used with the *IN* operator. The following statement returns all the *active* customers (rows in the table KNA1) that have i.e. a sales document in the table VBAK for sales document header data.

```text
KUNNR IN ( SELECT KUNNR FROM VBAK )

```

This article outlines a use case where Xtract Core is deployed within a hybrid cloud architecture, combining on-premises SAP connectivity with a cloud-based user interface.

### About the Application

As a white-label solution, Xtract Core enables third-party applications to extract data from SAP systems via RESTful services. A typical implementation scenario involves integration into a hybrid cloud architecture. In this setup, Xtract Core is deployed within the end customer’s on-premises network to maintain direct access to their SAP environment and to ensure secure and compliant data extraction. Meanwhile, the cloud-based component of the application delivers the user interface.

The application uses Xtract Core to:

- Create and delete SAP data sources
- Fetch tables and table metadata from SAP systems
- Create and delete destinations for the SAP data
- Create and delete Table extractions
- Run extractions

### Integration of Xtract Core

The following graphic shows how Xtract Core was integrated into the architecture of the application:
# API Reference

