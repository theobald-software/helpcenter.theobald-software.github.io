swagger: '2.0'
info:
  description: >
    Xtract Core is a whitelabel Web API server for developing your own SAP
    interfaces. 

    The Xtract Core API enables you to extract data from various SAP sytsems and
    write them to a target environment. 
     The API uses the following parameter types:
    - **Path parameters** are part of the request URL and are used to address
    specific resources. They are referenced by placeholders in curved brackets.
    Example: <br> */v1/connections/sap/<mark>{name}</mark>/tables?pattern=ma** 

    - **Query parameters** are added to the end of a request URL, following '?'.
    They are listed in key-value pairs, separated by '&'. Query parameters can
    be used for filtering or sorting.  Example: <br>
    */v1/connections/sap/{name}/tables<mark>?pattern=ma*</mark>* 

    - **Body parameters** are passed in the request body of POST methods to add
    or update structured data. 
  version: 1.0.0
  title: Xtract Core
host: localhost
basePath: /v1
tags:
  - name: Connections
    description: >-
      Create, list or delete connections allowing access to source and target
      environments.
  - name: Extractions
    description: >-
      Create, list or delete extractions that load data from a source system
      into a target environment.
  - name: Run Extractions
    description: Run data extractions synchronously or asynchronously on the web server.
  - name: Logs
    description: Fetch logs of extraction runs.
  - name: Version
    description: Fetch your current software version.
paths:
  /version/:
    get:
      tags:
        - Version
      summary: Get the version of the server.
      description: ''
      operationId: serverversion
      produces:
        - application/json
      responses:
        '200':
          description: Operation successful
          schema:
            type: object
            properties:
              version:
                type: string
                example: "2025.3.5.54" 
  /connections/sap/{name}:
    post:
      tags:
        - Connections
      summary: Create a connection to an SAP system.
      description: ''
      operationId: addsap
      produces:
        - text/plain
      parameters:
        - name: name
          in: path
          description: >-
            Provide a name for the new SAP connection. Allowed characters are
            uppercase and lowercase Latin letters (A–Z, a–z) and digits (0–9).
            The name can not start with a number. Names are unique and not
            case-sensitive.
          required: true
          type: string
        - in: body
          name: body
          description: >
            Provide the connection settings of the SAP system. Values can be
            found in the *Properties* of the SAP Logon Pad or they can be
            requested from the SAP Basis team.
          required: true
          schema:
            type: object
            required:
              - Host
              - Client
              - InstanceNo
              - Language
              - User
              - Password
            properties:
              Host:
                type: string
                description: >-
                  Host name or IP address of the SAP application server
                  (Property Host)
                example: sap-erp-as05.example.com
              Client:
                type: string
                description: >-
                  A three-digit number of the SAP client between 000 and 999,
                  e.g., 800.
                example: '100'
              InstanceNo:
                type: number
                description: A two-digit number between 00 and 99 (Property SystemNumber).
                example: 0
              Language:
                type: string
                description: >-
                  The logon language for the SAP system, e.g., 'EN' for English
                  or 'DE' for German.
                example: en
              User:
                type: string
                description: Name of an SAP dialog user.
                example: alice
              Password:
                type: string
                description: Password of the SAP user.
                example: myPassword
      responses:
        '200':
          description: Operation successful
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause. All errors return a 500
            status code.
  /connections/azureblob/{name}:
    post:
      tags:
        - Connections
      summary: Create a connection to an Azure Blob storage.
      description: ''
      operationId: addazure
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - name: name
          in: path
          description: >-
            Provide a name for the new Azure Blob storage connection. Allowed
            characters are uppercase and lowercase Latin letters (A–Z, a–z) and
            digits (0–9). The name can not start with a number. Names are unique
            and not case-sensitive.
          required: true
          type: string
        - in: body
          name: body
          description: |
            Provide the connection settings of the Azure Blob storage.
          required: true
          schema:
            type: object
            required:
              - Account
              - Container
              - Token
            properties:
              Account:
                type: string
                description: Name of the storage account. Do not enter the full URL.
                example: my-account
              Container:
                type: string
                description: Name of an existing Azure storage container.
                example: container
              Token:
                type: string
                description: >-
                  The [Shared Access Signature (SAS)
                  token](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/authentication/create-sas-tokens?view=doc-intel-4.0.0&tabs=azure-portal#use-the-azure-portal)
                  of the storage container.
                example: sv=YYYY-MM-DD&ss=...%3D
      responses:
        '200':
          description: Operation successful
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause. All errors return a 500
            status code.
  /connections/:
    get:
      tags:
        - Connections
      summary: Get a list of existing connections.
      description: ''
      operationId: listconnections
      produces:
        - application/json
      responses:
        '200':
          description: Operation successful
          schema:
            type: object
            properties:
              connections:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of the SAP connection.
                      example: s4hana
                    type:
                      type: string
                      description: >-
                        Type of the connection, e.g., "SapRFC" for SAP
                        connections or "AzureBlob" for Azure storage
                        connections.
                      example: SapRfc
  /connections/sap/{name}/test:
    get:
      tags:
        - Connections
      summary: Test a connection to an SAP system.
      description: ''
      operationId: testsap
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - name: name
          in: path
          description: Name of the SAP connection you want to test.
          required: true
          type: string
      responses:
        '200':
          description: Operation successful
        '404':
          description: Indicates that the connection does not exist
  /connections/sap/{name}/tables:
    get:
      tags:
        - Connections
      summary: Get name and description of all tables on the SAP system.
      description: ''
      operationId: metaconnection
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: Name of an existing SAP connection.
          required: true
          type: string
        - name: pattern
          in: query
          description: >-
            Define a search pattern for SAP tables. Wildcards (*) are supported.
            If *pattern* is omitted, this call may take very long and yield
            multiple MB of data.
          required: false
          type: string
          x-example: ma*
      responses:
        '200':
          description: Operation successful
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the SAP table.
                  example: MARA
                description:
                  type: string
                  description: Description text of the SAP table.
                  example: General Material Data
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause. All errors return a 500
            status code.
  /connections/sap/{name}/tables/{table}:
    get:
      tags:
        - Connections
      summary: Get name, description and data type of all columns in an SAP table.
      description: ''
      operationId: metatable
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: Name of an existing SAP connection.
          required: true
          type: string
        - name: table
          in: path
          description: Technical name of an SAP table.
          required: true
          type: string
      responses:
        '200':
          description: Operation successful
          schema:
            type: object
            properties:
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of the table column.
                      example: MANDT
                    description:
                      type: string
                      description: Description text of the table column.
                      example: Client
                    type:
                      type: string
                      description: Data type of the table column.
                      example: CharacterString
                    length:
                      type: integer
                      description: >-
                        Length of the fields inside the table column, e.g., "3"
                        means that the fields inside the table columns can
                        contain up to 3 characters.
                      example: 3
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause. All errors return a 500
            status code.
  /connections/{name}:
    delete:
      tags:
        - Connections
      summary: Delete a connection.
      description: ''
      operationId: deleteconnection
      produces:
        - text/plain
      parameters:
        - name: name
          in: path
          description: Name of the connection you want to delete.
          required: true
          type: string
      responses:
        '200':
          description: Operation successful
        '404':
          description: Indicates that the connection does not exist.
  /extractions/table/{name}:
    post:
      tags:
        - Extractions
      summary: >-
        Create an extraction that writes data from an SAP table to a
        destination.
      description: ''
      operationId: addextraction
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - name: name
          in: path
          description: >-
            Name for the new extraction. Allowed characters are uppercase and
            lowercase Latin letters (A–Z, a–z) and digits (0–9). The name must
            not start with a number. Names are unique and not case-sensitive,
            because the names of connections map to a directory on the file
            system.
          required: true
          type: string
        - in: body
          name: body
          description: Extraction settings for the table extraction.
          required: true
          schema:
            type: object
            required:
              - Table
              - Where
              - Source
              - Destination
            properties:
              Table:
                type: string
                description: Name of the SAP table you want to extract data from.
                example: MARA
              Where:
                type: string
                description: WHERE clause to filter table records.
                example: MATNR = 000000000001
              Source:
                type: string
                description: Name of an existing SAP connection.
                example: s4hana
              Destination:
                type: string
                description: >-
                  Name of a destination connection, e.g., to an Azure Blob
                  Storage container.
                example: azure
              Columns:
                type: array
                description: >-
                  Define which SAP table columns to extract. If omitted, all
                  columns are extracted.
                items:
                  type: string
                  description: List of table columns (technical names).
                example:
                    - MATNR
                    - MANDT
              ResultName:
                type: string
                description: >-
                  Name of the new table in the target environment. If omitted,
                  the name of the extration is also the name of the new table.
                example: resultset
              FunctionModule:
                type: string
                description: >-
                  Name of the function module that is used to extract SAP
                  tables. If omitted, the SAP standard function module
                  *RFC_READ_TABLE* is used. The installation of
                  */THEO/READ_TABLE* is recommended. For more information, see
                  [Function Module for
                  Tables](knowledge-base/custom-function-module-for-table-extraction.md).
                example: /THEO/READ_TABLE
      responses:
        '200':
          description: Operation successful
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause. All errors return a 500
            status code.
  /extractions/:
    get:
      tags:
        - Extractions
      summary: Get a list of existing extractions.
      description: ''
      operationId: listextractions
      produces:
        - application/json
      responses:
        '200':
          description: Operation successful
          schema:
            type: object
            properties:
              extractions:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of the extraction.
                      example: mara
                    type:
                      type: string
                      description: Extraction type.
                      example: Table
                    sapObject:
                      type: string
                      description: Name of the SAP source object that is extracted.
                      example: MARA
                    source:
                      type: string
                      description: Name of the source connection.
                      example: s4hana
                    destination:
                      type: string
                      description: Name of the target connection.
                      example: azure
                    created:
                      type: object
                      properties:
                        machine:
                          type: string
                          description: >-
                            Name of the machine on which the extraction was
                            created.
                          example: ''
                        timestamp:
                          type: string
                          format: date-time
                          description: Timestamp of when the extraction was created.
                          example: '2025-01-24T09:05:26.000Z'
                        user:
                          type: string
                          description: Username of the user who created the extraction.
                          example: ''
                    lastChange:
                      type: object
                      properties:
                        machine:
                          type: string
                          description: >-
                            Name of the machine on which the extraction was last
                            changed.
                          example: ''
                        timestamp:
                          type: string
                          format: date-time
                          description: Timestamp of when the extraction was last changed.
                          example: '2025-01-24T09:46:21.000Z'
                        user:
                          type: string
                          description: >-
                            Username of the user who last changed the
                            extraction.
                          example: ''
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause. All errors return a 500
            status code.
  /extractions/{name}:
    delete:
      tags:
        - Extractions
      summary: Delete an extraction.
      description: ''
      operationId: deleteextraction
      produces:
        - text/plain
      parameters:
        - name: name
          in: path
          description: Name of the extraction you want to delete.
          required: true
          type: string
      responses:
        '200':
          description: Operation successful
        '404':
          description: Indicates that the extraction does not exist.
  /run/{name}:
    get:
      tags:
        - Run Extractions
      summary: Run an extraction and wait for the result.
      description: >-
        The `run` endpoint runs an extractions synchronously and returns the
        HTTP response head as soon as the server receives the first data
        package. The response header contains the timestamp of the extraction
        and the response body contains the logs of the extraction.
      operationId: runextraction
      produces:
        - text/plain
      parameters:
        - name: name
          in: path
          description: Name of the extraction you want to execute.
          required: true
          type: string
        - name: packageSize
          in: query
          description: >-
            The extracted data is split into packages of the defined size. The
            default value is 50000 lines. A package size between 20000 and 50000
            is advisable for large amounts of data. 0 means no packaging. Not
            using packaging can lead to an RFC timeout for large data
            extractions.
          required: false
          type: number
          x-example: 1000
        - name: rows
          in: query
          description: >-
            Set a maximum number of rows to be extracted. 0 extracts all data.
            You can use this option to perform tests with a small amount of data
            by entering a row limit of e.g., 100.
          required: false
          type: number
          x-example: 10
        - name: whereClause
          in: query
          description: >-
            WHERE clause to filter table records. For more information, see
            [WHERE Clause
            Syntax](https://helpcenter.theobald-software.com/xtract-core/knowledge-base/where-clause).
          required: false
          type: string
          x-example: ERSDA GT '2025'
      responses:
        '200':
          description: >-
            Indicates a successful extraction call. It does not indicate a
            successful execution of the extraction.
        '404':
          description: Indicates that the extraction does not exist.
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause. All errors return a 500
            status code.
  /start/{name}:
    get:
      tags:
        - Run Extractions
      summary: Run an extraction without waiting for the result.
      description: >-
        The `start` endpoint runs an extraction asynchronously and immediately
        returns the HTTP response head. The response header contains the
        timestamp of the extraction and the response body contains the logs of
        the extraction.
      operationId: startextraction
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: Name of the extraction you want to execute.
          required: true
          type: string
        - name: packageSize
          in: query
          description: >-
            The extracted data is split into packages of the defined size. The
            default value is 50000 lines. A package size between 20000 and 50000
            is advisable for large amounts of data. 0 means no packaging. Not
            using packaging can lead to an RFC timeout for large data
            extractions.
          required: false
          type: number
          x-example: 1000
        - name: rows
          in: query
          description: >-
            Set a maximum number of rows to be extracted. 0 extracts all data.
            You can use this option to perform tests with a small amount of data
            by entering a row limit of e.g., 100.
          required: false
          type: number
          x-example: 10
        - name: whereClause
          in: query
          description: >-
            WHERE clause to filter table records. For more information, see
            [WHERE Clause
            Syntax](https://helpcenter.theobald-software.com/xtract-core/knowledge-base/where-clause).
          required: false
          type: string
          x-example: ERSDA GT '2025'
      responses:
        '200':
          description: >-
            Indicates a successful extraction call. It does not indicate a
            successful execution of the extraction.
        '404':
          description: Indicates that the extraction does not exist.
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause. All errors return a 500
            status code.
  /logs/extractions/:
    get:
      tags:
        - Logs
      summary: Get a list of all extraction runs.
      description: ''
      operationId: logsextractions
      produces:
        - application/json
      parameters:
        - name: min
          in: query
          description: A timestamp in the format *yyyy-MM-dd_HH:mm:ss.SSS*. Returns the extraction runs after the specified date and time.
          required: false
          type: string
        - name: max
          in: query
          description: A timestamp in the format *yyyy-MM-dd_HH:mm:ss.SSS*. Returns the extraction runs before the specified date and time.
          required: false
          type: string
      responses:
        '200':
          description: Operation successful
          schema:
            type: object
            properties:
              extractions:
                type: array
                items:
                  type: object
                  properties:
                    extractionName:
                      type: array
                      items:
                        type: string
                      example: 'mara'
                      description: Name of the extraction.
                    runs:
                      type: array
                      description: Contains the logs of the extraction runs.
                      items:
                        type: object
                        properties:
                          rowCount:
                            type: integer
                            example: 5000
                            description: Number of extracted data records.
                          duration:
                            type: string
                            example: 'PT00H00M01.369S'
                            description: Duration of the exraction run.
                          state:
                            type: string
                            example: 'FinishedNoErrors'
                            description: Status of the extraction. Possible values are *Running*, *FinishedNoErrors*, and *FinishedErrors*.
                          webServerLog:
                            type: string
                            example: '2025-01-30_08:51:18.976'
                            description: Timestamp of the server log that corresponds to the extraction run.
                          startedAt:
                            type: string
                            example: '2025-01-30_08:51:19.007'
                            description: Timestamp of the extraction run.
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause.
  /logs/extractions/{name}:
    get:
      tags:
        - Logs
      summary: Get a list of extraction runs of the specified extraction.
      description: ''
      operationId: logsextraction
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: Name of an existing extraction.
          required: true
          type: string
        - name: min
          in: query
          description: A timestamp in the format *yyyy-MM-dd_HH:mm:ss.SSS*. Returns the extraction runs after the specified date and time.
          required: false
          type: string
        - name: max
          in: query
          description: A timestamp in the format *yyyy-MM-dd_HH:mm:ss.SSS*. Returns the extraction runs before the specified date and time.
          required: false
          type: string
      responses:
        '200':
          description: Operation successful
          schema:
            type: object
            properties:
              runs:
                type: array
                description: Contains the logs of the extraction runs.
                items:
                  type: object
                  properties:
                    rowCount:
                      type: integer
                      example: 5000
                      description: Number of extracted data records.
                    duration:
                      type: string
                      example: 'PT00H00M01.369S'
                      description: Duration of the exraction run.
                    state:
                      type: string
                      example: 'FinishedNoErrors'
                      description: Status of the extraction. Possible values are *Running*, *FinishedNoErrors*, and *FinishedErrors*.
                    webServerLog:
                      type: string
                      example: '2025-01-30_08:51:18.976'
                      description: Timestamp of the server log that corresponds to the extraction run.
                    startedAt:
                      type: string
                      example: '2025-01-30_08:51:19.007'
                      description: Timestamp of the extraction run.
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause.
  /logs/extractions/{name}/{timestamp}:
    get:
      tags:
        - Logs
      summary: Get information on a specified extraction run.
      description: ''
      operationId: logsextractionsrun
      produces:
        - application/json
      parameters:
      - name: name
        in: path
        description: Name of an existing extraction.
        required: true
        type: string
        x-example: 'mara'
      - name: timestamp
        in: path
        description: Timestamp of the extraction run you want to query.
        required: true
        type: string
        x-example: '2025-01-30_08:51:19.007'
      responses:
        '200':
          description: Operation successful
          schema:
            type: object
            properties:
              rowCount:
                type: integer
                example: 5000
                description: Number of extracted data records.
              duration:
                type: string
                example: 'PT00H00M01.369S'
                description: Duration of the exraction run.
              state:
                type: string
                example: 'FinishedNoErrors'
                description: Status of the extraction. Possible values are *Running*, *FinishedNoErrors*, and *FinishedErrors*.
              webServerLog:
                type: string
                example: '2025-01-30_08:51:18.976'
                description: Timestamp of the server log that corresponds to the extraction run.
              startedAt:
                type: string
                example: '2025-01-30_08:51:19.007'
                description: Timestamp of the extraction run.
        '404':
          description: Indicates that the extraction or the run does not exist.
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause. 
  /logs/extractions/{name}/{timestamp}/log:
    get:
      tags:
        - Logs
      summary: Get the complete log of a specified extraction run.
      description: ''
      operationId: logsextractionsrunandlog
      produces:
        - application/json
      parameters:
      - name: name
        in: path
        description: Name of an existing extraction.
        required: true
        type: string
        x-example: 'mara'
      - name: timestamp
        in: path
        description: Timestamp of the extraction run you want to query.
        required: true
        type: string
        x-example: '2025-01-30_08:51:19.007'
      responses:
        '200':
          description: Operation successful
          schema:
            type: object
            properties:
              rowCount:
                type: integer
                example: 5000
                description: Number of extracted data records.
              duration:
                type: string
                example: 'PT00H00M01.369S'
                description: Duration of the exraction run.
              state:
                type: string
                example: 'FinishedNoErrors'
                description: Status of the extraction. Possible values are *Running*, *FinishedNoErrors*, and *FinishedErrors*.
              webServerLog:
                type: string
                example: '2025-01-30_08:51:18.976'
                description: Timestamp of the server log that corresponds to the extraction run.
              startedAt:
                type: string
                example: '2025-01-30_08:51:19.007'
                description: Timestamp of the extraction run.
              logEntries:
                type: array
                description: List of log entries for the specified extraction run.
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      example: '2025-01-30_08:51:19.010'
                      description: Timestamp of the log entry.
                    logLevel:
                      type: string
                      example: 'Info'
                      description: Type of the log entry. Possible values are\:<br> "Error" - Error messages issued during the extraction. process.<br> "Info" - Status messages, about processes that do not lead to an error. <br> "Warnings" - Information about problems that do not lead to an extraction error, e.g., authentication errors. <br> "Debug" - Detailed information that helps finding error cause.
                    source:
                      type: string
                      description: The Xtract Core component that the log entry originates from.
                      example: 'Table'
                    message:
                      type: string
                      example: "Attempting to run Table extraction 'mara'" 
                      description: The content of the log entry.
        '404':
          description: Indicates that the extraction or the run does not exist.
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause. 
  /logs/web/:
    get:
      tags:
        - Logs
      summary: Get timestamps of server logs that correspond to extraction runs.
      description: ''
      operationId: logsweb
      produces:
        - application/json
      responses:
        '200':
          description: Operation successful
          schema:
            type: object
            description: A list of server log timestamps that correspond to extraction runs.
            properties:
              logs:
                type: array
                items:
                  type: string
                example: ["2025-01-30_14:17:44.189", "2025-01-30_14:17:44.190"]
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause. 
  /logs/web/{timestamp}:
    get:
      tags:
        - Logs
      summary: Get server logs of a specified extraction run.
      description: ''
      operationId: logsweblog
      produces:
        - application/json
      parameters:
        - name: timestamp
          in: path
          description: Timestamp of the extraction run you want to query.
          required: true
          type: string
          x-example: '2025-01-30_14:17:44.189'
      responses:
        '200':
          description: Operation successful
          schema:
            type: object
            properties:
              logEntries:
                type: array
                description: List of log entries for the specified extraction run.
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      example: '2025-01-23_14:45:19.151'
                      description: Timestamp of the log entry.
                    logLevel:
                      type: string
                      example: 'Info'
                      description: Type of the log entry. Possible values are\:<br> "Error" - Error messages issued during the extraction. process.<br> "Info" - Status messages, about processes that do not lead to an error. <br> "Warnings" - Information about problems that do not lead to an extraction error, e.g., authentication errors. <br> "Debug" - Detailed information that helps finding error cause.
                    source:
                      type: string
                      example: 'HttpServer'
                      description: The Xtract Core component that the log entry originates from.
                    message:
                      type: string
                      example: "Server does not require authentication. Setting anonymous user context."
                      description: The content of the log entry.
        '404':
          description: Indicates that the log does not exist.
        '500':
          description: >-
            An error occurred. The response body contains different error
            messages depending on the failure cause. 