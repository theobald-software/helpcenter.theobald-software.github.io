swagger: '2.0'
info:
  description: |
    Xtract Core is a whitelabel Web API server for developing your own SAP interfaces. 
    The Xtract Core API enables you to extract data from various SAP sytsems and write them to a target environment. 
    For more information about Xtract Core, refer to the [Xtract Core HelpCenter](https://helpcenter.theobald-software.com/xtract-core/).

    ## About Parameters
    The Xtract Core API uses the following parameter types:
    - **Path parameters** are part of the request URL and are used to address specific resources. They are referenced by placeholders in curved brackets. Example: <br> */v0/connections/sap/<span style="color:red">{name}</span>/tables?pattern=ma** |
    - **Query parameters** are added to the end of a request URL, following '?'. They are listed in key-value pairs, separated by '&'. Query parameters can be used for filtering or sorting.  Example: <br> */v0/connections/sap/{name}/tables<span style="color:red">?pattern=ma*</span>* |
    - **Body parameters** are passed in the request body of POST methods to add or update structured data. | 


  version: 1.0.0
  title: Xtract Core
  x-logo:
    url: 'https://helpcenter.theobald-software.com/xtract-core/XtractCore.png'
    altText: Xtract Core logo
host: localhost
#basePath: /v0
tags:
  - name: Connections
    description: |
      A connection can represent a data source or a target environment.
      At least 2 connections are required to create extractions:
      - A connection to an SAP source system to extract data from.
      - A connection to a destination to write data to.
  - name: Extractions
    description: |
      An extraction is a combination of the following components:
      - A connection to a source system, e.g., SAP S/4HANA, SAP BW, etc.
      - A definition of the data you want to extract from the source system.
      - A connection to a target environment / destination in which the data is written.
  - name: Run Extractions
    description: | 
      Extractions are executed on the web server.
      An extraction can be executed synchronously (`run`) or asynchronously (`start`). 
      The response of an extraction run contains the following information:

      | Response | Description |
      |----------|-------------|
      | HTTP status code | The HTTP status code 200 indicates a successful extraction call. It does not indicate a successful execution of the extraction. The HTTP status code 404 indicates that the called extraction does not exist. Detailed information can be found in the log of the web service. |
      | HTTP header | Shows the timestamp of the extraction, e.g., X-XU-Timestamp: 2025-01-24_19:03:09.971. The timestamp is unique and can be used to query status information and logs of the extraction. |
      | HTTP response body | The response body of the extraction contains the extraction log. |

paths:
  /v0/connections/sap/{name}:
    post:
      tags:
        - Connections
      summary: Create a connection to an SAP system.
      description: ''
      operationId: addsap
      parameters:
        - name: name
          in: path
          description: Provide a name for the new SAP connection. Allowed characters are uppercase and lowercase Latin letters (A–Z, a–z) and digits (0–9). The name can not start with a number. Names are unique and not case-sensitive.
          required: true
          type: string
        - in: body
          name: body
          description: |
            Provide the connection settings of the SAP system. Values can be found in the *Properties* of the SAP Logon Pad or they can be requested from the SAP Basis team.
          required: true
          schema:
            type: object
            required:
                  - Host
                  - Client
                  - InstanceNo
                  - Language
                  - User
                  - Password
            properties:
              Host:
                type: string
                description: Host name or IP address of the SAP application server (Property Host)
                example: sap-erp-as05.example.com
              Client:
                type: string
                description: A three-digit number of the SAP client between 000 and 999, e.g., 800.
                example: '100'
              InstanceNo:
                type: number
                description: A two-digit number between 00 and 99 (Property SystemNumber).
                example: 0
              Language:
                type: string
                description: The logon language for the SAP system, e.g., 'EN' for English or 'DE' for German.
                example: en
              User:
                type: string
                description: Name of an SAP dialog user.
                example: alice
              Password:
                type: string
                description: Password of the SAP user.
                example: myPassword
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X POST \
              -H '[Content-Type: application/json]' \
              -H '[Content-Length: 142]' \
              -d '"Host": "sap-erp-as05.example.com", "User": "alice", "Password": "myPassword", "Client": "800", "Language": "en", "InstanceNo": 0' \
              'http://localhost:1337/v0/connections/sap/s4hana'
        - lang: javascript
          source: |
            fetch('http://localhost:1337/v0/connections/sap/s4hana', {
              "method": "POST",
              "headers": {
                "[Content-Type": "application/json]",
                "[Content-Length": "142]"
              },
              "body": JSON.stringify("Host": "sap-erp-as05.example.com", "User": "alice", "Password": "myPassword", "Client": "800", "Language": "en", "InstanceNo": 0)"
            });
      responses:
        '200':
          description: Operation successful
          examples: 
            text/plain: The connection was created successfully. Connected to SAP host 'sap-erp-as05.example.com', instance 00, release 756, codepage 4103, user 'ALICE'
        '500':
          description: An error occured. The response body contains different error messages depending on the failure cause. All errors return a 500 status code.
  /v0/connections/azureblob/{name}:
    post:
      tags:
        - Connections
      summary: Create a connection to an Azure Blob storage.
      description: ''
      operationId: addazure
      consumes:
        - application/json
      parameters:
        - name: name
          in: path
          description: Provide a name for the new Azure Blob storage connection. Allowed characters are uppercase and lowercase Latin letters (A–Z, a–z) and digits (0–9). The name can not start with a number. Names are unique and not case-sensitive.
          required: true
          type: string
        - in: body
          name: body
          description: |
            Provide the connection settings of the Azure Blob storage.
          required: true
          schema:
            type: object
            required:
              - Account
              - Container
              - Token
            properties:
              Account:
                type: string
                description: Name of the storage account. Do not enter the full URL.
                example: my-account
              Container:
                type: string
                description: Name of an existing Azure storage container.
                example: container
              Token:
                type: string
                description: The [Shared Access Signature (SAS) token](https://learn.microsoft.com/en-us/azure/ai-services/document-intelligence/authentication/create-sas-tokens?view=doc-intel-4.0.0&tabs=azure-portal#use-the-azure-portal) of the storage container.
                example: sv=YYYY-MM-DD&ss=...%3D
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X POST \
              -H '[Content-Type: application/json]' \
              -H '[Content-Length: 223]' \
              -d '"Account": "my-account", "Token": "sv=YYYY-MM-DD&ss=...%3D", "Container": "container"' \
              'http://localhost:1337/v0/connections/azureblob/storage'
        - lang: javascript
          source: |
            fetch('http://localhost:1337/v0/connections/azureblob/{name}', {
              "method": "POST",
              "headers": {
                "[Content-Type": "application/json]",
                "[Content-Length": "223]"
              },
              "body": JSON.stringify("Account": "my-account", "Token": "sv=YYYY-MM-DD&ss=...%3D", "Container": "container")"
            });
      responses:
        '200':
          description: Operation successful
          examples: 
            text/plain: The connection was tested and created succesfully.
        '500':
          description: An error occured. The response body contains different error messages depending on the failure cause. All errors return a 500 status code.
  /v0/connections/:
    get:
      tags:
        - Connections
      summary: Get a list of existing connections.
      description: ''
      operationId: listconnections
      produces:
        - application/json
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X GET 'http://localhost:1337/v0/connections/'
        - lang: javascript
          source: |
            fetch('http://localhost:1337/v0/connections/',  {
              "method": "GET"
            });
      responses:
        '200':
          description: Operation successful
          schema:
            type: object
            properties:
              connections:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: s4hana
                    type:
                      type: string
                      example: SapRfc
  /v0/connections/sap/{name}/test:
    get:
      tags:
        - Connections
      summary: Test a connection to an SAP system.
      description: ''
      operationId: testsap
      consumes:
        - application/json
      parameters:
        - name: name
          in: path
          description: Name of the SAP connection you want to test.
          required: true
          type: string
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X GET 'http://localhost:1337/v0/connections/sap/s4hana/test'
        - lang: javascript
          source: |
            fetch('http://localhost:1337/v0/connections/sap/s4hana/test',  {
              "method": "GET"
            });
      responses:
        '200':
          description: Operation successful
          examples: 
            text/plain: Connected to SAP host 'sap-erp-as05.example.com', instance 00, release 756, codepage 4103, user 'ALICE'
        '404':
          description: Indicates that the connection does not exist
  /v0/connections/sap/{name}/tables:
    get:
      tags:
        - Connections
      summary: Get name and description of all tables on the SAP system.
      description: ''
      operationId: metaconnection
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: Name of an existing SAP connection.
          required: true
          type: string
        - name: pattern
          in: query
          description: Define a search pattern for SAP tables. Wildcards (*) are supported. If *pattern* is omitted, this call may take very long and yield multiple MB of data.
          required: false
          type: string
          x-example: ma*
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X GET 'http://localhost:1337/v0/connections/sap/s4hana/tables'
        - lang: javascript
          source: |
            fetch('http://localhost:1337/v0/connections/sap/s4hana/tables', {
              "method": "GET"
            });
      responses:
        '200':
          description: Operation successful
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  example: MARA
                description:
                  type: string
                  example: General Material Data
        '500':
          description: An error occured. The response body contains different error messages depending on the failure cause. All errors return a 500 status code.
  /v0/connections/sap/{name}/tables/{table}:
    get:
      tags:
        - Connections
      summary: Get name, description and data type of all columns in an SAP table.
      description: ''
      operationId: metatable
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: Name of an existing SAP connection.
          required: true
          type: string
        - name: table
          in: path
          description: Technical name of an SAP table.
          required: true
          type: string
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X GET 'http://localhost:1337/v0/connections/sap/s4hana/tables/mara'
        - lang: javascript
          source: |
            fetch('http://localhost:1337/v0/connections/sap/s4hana/tables/mara', {
              "method": "GET"
            });
      responses:
        '200':
          description: Operation successful
          schema:
            type: object
            properties:
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: MANDT
                    description:
                      type: string
                      example: Client
                    type:
                      type: string
                      example: CharacterString
                    length:
                      type: integer
                      example: 3
        '500':
          description: An error occured. The response body contains different error messages depending on the failure cause. All errors return a 500 status code.
  /v0/connections/{name}:
    delete:
      tags:
        - Connections
      summary: Delete a connection.
      description: ''
      operationId: deleteconnection
      parameters:
        - name: name
          in: path
          description: Name of the connection you want to delete.
          required: true
          type: string
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X DELETE 'http://localhost:1337/v0/connections/s4hana'
        - lang: javascript
          source: |
            fetch('http://localhost:1337/v0/connections/s4hana', {
              "method": "DELETE"
            });
      responses:
        '200':
          description: Operation successful
          examples: 
            text/plain: The connection was deleted successfully.
        '404':
          description: Indicates that the connection does not exist.
  /v0/extractions/table/{name}:
    post:
      tags:
        - Extractions
      summary: Create an extraction to write data from an SAP table to a destination.
      description: ''
      operationId: addextraction
      consumes:
        - application/json
      parameters:
        - name: name
          in: path
          description: Name for the new extraction. Allowed characters are uppercase and lowercase Latin letters (A–Z, a–z) and digits (0–9). The name must not start with a number. Names are unique and not case-sensitive, beecause the names of connections map to a directory on the file system.
          required: true
          type: string
        - in: body
          name: body
          description: |
            Extraction settings for the table extraction.
          required: true
          schema:
            type: object
            required: 
              - Table
              - Where
              - Source 
              - Destination 
            properties:
              Table:
                type: string
                description: Name of the SAP table you want to extract data from. 
                example: MARA
              Where:
                type: string
                description: WHERE clause to filter table records.
                example: MATNR = 000000000001
              Source:
                type: string
                description: Name of an existing SAP connection. 
                example: s4hana
              Destination:
                type: string
                description: Name of a destination connection, e.g., to an Azure Blob Storage container.
                example: azure
              Columns:
                type: array
                description: Define which SAP table columns to extract. If omitted, all columns are extracted.
                items: 
                  type: string
                example:  
                  - MATNR 
                  - MANDT
              ResultName:
                type: string
                description: Name of the new table in the target environment. If omitted, the name of the extration is also the name of the new table.
                example: resultset
              FunctionModule:
                type: string
                description: Name of the function module that is used to extract SAP tables. If omitted, the SAP standard function module *RFC_READ_TABLE* is used. The installation of */THEO/READ_TABLE* is recommended. For more information, see [Function Module for Tables](knowledge-base/custom-function-module-for-table-extraction.md). 
                example: /THEO/READ_TABLE
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X POST \
              -H '[Content-Type: application/json]' \
              -H '[Content-Length: 190]' \
              -d '"Table": "MARA", "Where": "MATNR = 000000000001", "Source": "s4hana", "Destination": "azure", "Columns": ["MATNR", "MANDT(1)"], "ResultName": "materials", "FunctionModule": "/THEO/READ_TABLE"' \
              'http://localhost:1337/v0/extractions/table/mara'
        - lang: javascript
          source: |
            fetch('http://localhost:1337/v0/extractions/table/mara', {
              "method": "POST",
              "headers": {
                "[Content-Type": "application/json]",
                "[Content-Length": "190]"
              },
              "body": JSON.stringify("Table": "MARA", "Where": "MATNR = 000000000001", "Source": "s4hana", "Destination": "azure", "Columns": ["MATNR", "MANDT(1)"], "ResultName": "materials", "FunctionModule": "/THEO/READ_TABLE")"
            });
      responses:
        '200':
          description: Operation successful
          examples: 
            text/plain: The extraction was created successfully.
        '500':
          description: An error occured. The response body contains different error messages depending on the failure cause. All errors return a 500 status code.
  /v0/extractions/:
    get:
      tags:
        - Extractions
      summary: Get a list of existing extractions.
      description: ''
      operationId: listextractions
      produces:
        - application/json
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X GET 'http://localhost:1337/v0/extractions/'
        - lang: javascript
          source: |
            fetch('http://localhost:1337/v0/extractions/', {
              "method": "GET"
            });
      responses:
        '200':
          description: Operation successful
          schema:
                type: object
                properties:
                  extractions:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: mara
                        type:
                          type: string
                          example: Table
                        sapObject:
                          type: string
                          example: MARA
                        source:
                          type: string
                          example: s4hana
                        destination:
                          type: string
                          example: azure
                        created:
                          type: object
                          properties:
                            machine:
                              type: string
                              example: ""
                            timestamp:
                              type: string
                              format: date-time
                              example: 2025-01-24T09:05:26.000Z
                            user:
                              type: string
                              example: ""
                        lastChange:
                          type: object
                          properties:
                            machine:
                              type: string
                              example: ""
                            timestamp:
                              type: string
                              format: date-time
                              example: 2025-01-24T09:46:21.000Z
                            user:
                              type: string
                              example: ""
        '500':
          description: An error occured. The response body contains different error messages depending on the failure cause. All errors return a 500 status code.
  /v0/extractions/{name}:
    delete:
      tags:
        - Extractions
      summary: Delete an extraction.
      description: ''
      operationId: deleteextraction
      parameters:
        - name: name
          in: path
          description: Name of the extraction you want to delete.
          required: true
          type: string
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X DELETE 'http://localhost:1337/v0/extractions/mara'
        - lang: javascript
          source: |
            fetch('http://localhost:1337/v0/extractions/mara', {
              "method": "DELETE"
            });
      responses:
        '200':
          description: Operation successful
          examples: 
            text/plain: The extraction was deleted successfully.
        '404':
          description: Indicates that tthe extraction does not exist.
  /run/{name}:
    get:
      tags:
        - Run Extractions
      summary: Run an extraction and wait for the result.
      description: 'The `run` endpoint runs an extractions synchronously and returns the HTTP response head as soon as the server receives the first data package. The response header contains the timestamp of the extraction and the response body contains the logs of the extraction.'
      operationId: runextraction
      produces:
        - text/csv
      parameters:
        - name: name
          in: path
          description: Name of the extraction you want to execute.
          required: true
          type: string
        - name: packageSize
          in: query
          description: The extracted data is split into packages of the defined size. The default value is 50000 lines. A package size between 20000 and 50000 is advisable for large amounts of data. 0 means no packaging. Not using packaging can lead to an RFC timeout for large data extractions.
          required: false
          type: number
          x-example: 1000
        - name: rows
          in: query
          description: Set a maximum number of rows to be extracted. 0 extracts all data. You can use this option to perform tests with a small amount of data by entering a row limit of e.g., 100.
          required: false
          type: number
          x-example: 10
        - name: whereClause
          in: query
          description: WHERE clause to filter table records. For more information, see [WHERE Clause Syntax](https://helpcenter.theobald-software.com/xtract-core/knowledge-base/where-clause).
          required: false
          type: string
          x-example: ERSDA GT '2025'
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X GET 'http://localhost:1337/run/mara'
        - lang: javascript
          source: |
            fetch('http://localhost:1337/run/mara', {"method": "GET"});
      responses:
        '200':
          description: Indicates a successful extraction call. It does not indicate a successful execution of the extraction.
        '404':
          description: Indicates that the extraction does not exist.
        '500':
          description: An error occured. The response body contains different error messages depending on the failure cause. All errors return a 500 status code.
  /start/{name}:
    get:
      tags:
        - Run Extractions
      summary: Run an extraction without waiting for the result.
      description: 'The `start` endpoint runs an extraction asynchronously and immediately returns the HTTP response head. The response header contains the timestamp of the extraction and the response body contains the logs of the extraction.'
      operationId: startextraction
      produces:
        - text/csv
      parameters:
        - name: name
          in: path
          description: Name of the extraction you want to execute.
          required: true
          type: string
        - name: packageSize
          in: query
          description: The extracted data is split into packages of the defined size. The default value is 50000 lines. A package size between 20000 and 50000 is advisable for large amounts of data. 0 means no packaging. Not using packaging can lead to an RFC timeout for large data extractions.
          required: false
          type: number
          x-example: 1000
        - name: rows
          in: query
          description: Set a maximum number of rows to be extracted. 0 extracts all data. You can use this option to perform tests with a small amount of data by entering a row limit of e.g., 100.
          required: false
          type: number
          x-example: 10
        - name: whereClause
          in: query
          description: WHERE clause to filter table records. For more information, see [WHERE Clause Syntax](https://helpcenter.theobald-software.com/xtract-core/knowledge-base/where-clause).
          required: false
          type: string
          x-example: ERSDA GT '2025'
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X GET 'http://localhost:1337/start/mara/'
        - lang: javascript
          source: |
            fetch('http://localhost:1337/start/mara', {"method": "GET"});
      responses:
        '200':
          description: Indicates a successful extraction call. It does not indicate a successful execution of the extraction.
        '404':
          description: Indicates that the extraction does not exist.
        '500':
          description: An error occured. The response body contains different error messages depending on the failure cause. All errors return a 500 status code.

